import React from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { callBoth } from "../_util/call-both";

export interface MenuItemProps extends StyledProps {
  /**
   * 标题
   */
  title?: React.ReactNode;

  /**
   * 菜单折叠后标题处显示的图标 URL
   *
   * **传递一组 URL 时，第一个 URL 会作为未激活态图标，第二个 URL 会作为激活态图标**
   */
  icon?: [string, string] | string;

  /**
   * 是否为选中状态
   *
   * @default false
   */
  selected?: boolean;

  /**
   * 点击回调
   */
  onClick?: (event: React.MouseEvent) => void;

  /**
   * 自定义渲染
   *
   * @default children => <a>{children}</a>
   */
  render?: (children: JSX.Element) => JSX.Element;
}

export function MenuItem({
  title,
  icon,
  selected,
  className,
  style,
  onClick = () => null,
  render = children => <a>{children}</a>,
}: MenuItemProps) {
  let defaultIcon;
  let activeIcon;

  if (typeof icon === "string") {
    defaultIcon = icon;
    activeIcon = icon;
  }

  if (Array.isArray(icon)) {
    [defaultIcon, activeIcon] = icon;
  }

  const children = render(
    <>
      {defaultIcon && (
        <img className="tea-menu__list-icon" src={defaultIcon} alt="icon" />
      )}
      {activeIcon && (
        <img
          className="tea-menu__list-icon is-selected"
          src={activeIcon}
          alt="icon"
        />
      )}
      <div className="tea-menu__text">{title}</div>
    </>
  );

  return (
    <li
      className={classNames(className, { "is-selected": selected })}
      style={style}
    >
      {React.cloneElement(children, {
        className: classNames("tea-menu__item", children.props.className),
        onClick: callBoth(onClick, children.props.onClick),
      })}
    </li>
  );
}
