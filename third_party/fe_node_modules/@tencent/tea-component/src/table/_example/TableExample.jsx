import React, { useState } from "react";
import { Table } from "@tea/component/table";
import { Switch } from "@tea/component/switch";
import { Icon } from "@tea/component/icon";

const { expandable, stylize, selectable, rowtooltip } = Table.addons;

const cvmList = [
  {
    instanceId: "ins-4m99aio4",
    instanceName: "Hongkong VPN",
    status: "running",
    area: "香港一区",
    modal: "标准型 S1",
    publicIP: "119.28.142.24",
    privateIP: "10.144.77.75",
  },
  {
    instanceId: "ins-3e7y5ww3",
    instanceName: "Guangzhou Test",
    status: "stopped",
    area: "广州三区",
    modal: "标准型 S1",
    publicIP: "112.30.42.241",
    privateIP: "10.121.72.123",
  },
];

export default function TableExample() {
  const [expandedKeys, setExpandedKeys] = useState([]);
  const [selectedKeys, setSelectedKeys] = useState([]);
  const [bordered, setBordered] = useState(false);
  const [compact, setCompact] = useState(false);
  const [verticalTop, setVerticalTop] = useState(false);

  return (
    <>
      <Table
        compact={compact}
        bordered={bordered}
        verticalTop={verticalTop}
        records={cvmList}
        recordKey="instanceId"
        rowDisabled={record => record.status === "stopped"}
        rowClassName={record => record.status}
        columns={[
          {
            key: "instance",
            header: "ID/实例名",
            render: cvm => (
              <>
                <p>
                  <a>{cvm.instanceId}</a>
                </p>
                <p>{cvm.instanceName}</p>
              </>
            ),
          },
          {
            key: "status",
            header: "状态",
            width: 100,
            render: cvm => {
              if (cvm.status === "running") {
                return <span style={{ color: "green" }}>运行中</span>;
              }
              if (cvm.status === "stopped") {
                return <span style={{ color: "red" }}>已关机</span>;
              }
              return cvm.status;
            },
          },
          {
            key: "area",
            header: "可用区域",
          },
          {
            key: "modal",
            header: "主机型号",
          },
          {
            key: "publicIP",
            header: "IP 地址",
            align: "right",
          },
        ]}
        addons={[
          stylize({
            className: "my-table",
            // style: { outline: '2px solid yellow' },
            headClassName: "my-head",
            // headStyle: { outline: '2px solid green '},
            bodyClassName: "my-body",
            // bodyStyle: { outline: '2px solid red' }
          }),
          selectable({
            value: selectedKeys,
            onChange: (keys, context) => {
              console.log(keys, context);
              setSelectedKeys(keys);
            },
            rowSelect: true,
            render: (element, { disabled }) => {
              return disabled ? <Icon type="loading" /> : element;
            },
          }),
          expandable({
            expandedKeys,
            onExpandedKeysChange: (keys, { event }) => {
              event.stopPropagation();
              setExpandedKeys(keys);
            },
            render(record) {
              return `${record.instanceId} 的详情`;
            },
            gapCell: 1,
          }),
          rowtooltip({
            tooltip: record =>
              record.status === "stopped" ? "已关机，无法操作" : null,
          }),
        ]}
      />
      <section>
        <Switch value={bordered} onChange={value => setBordered(value)}>
          包含边框
        </Switch>
        <Switch value={compact} onChange={value => setCompact(value)}>
          紧凑样式
        </Switch>
        <Switch value={verticalTop} onChange={value => setVerticalTop(value)}>
          上对齐
        </Switch>
      </section>
    </>
  );
}
