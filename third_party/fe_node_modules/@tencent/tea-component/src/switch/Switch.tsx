import React, { useContext } from "react";
import classNames from "classnames";
import { Omit } from "../_type";
import { CheckProps, CheckContext } from "../check";
import { Text } from "../text";
import { useDefaultValue } from "../form/controlled";
import { callBoth } from "../_util/call-both";
import { Tooltip } from "../tooltip";

/**
 * Switch 组件所接收的参数
 */
export interface SwitchProps extends Omit<CheckProps, "type"> {
  /**
   * 是否繁忙
   */
  loading?: boolean;
}

const noop = () => {};

export function Switch(props: SwitchProps) {
  // 支持从 Context 注入
  const context = useContext(CheckContext);

  if (context) {
    // eslint-disable-next-line no-param-reassign
    props = context.inject({ type: "checkbox", ...props });
  }

  const {
    value,
    disabled,
    onChange = noop,
    onClick,
    loading,
    tooltip,
    children,
  } = useDefaultValue(props, false);

  let component = (
    <label className={classNames("tea-switch", { "is-loading": loading })}>
      <input
        readOnly
        type="checkbox"
        className="tea-switch__input"
        checked={value}
        disabled={disabled}
        onClick={callBoth(
          onClick,
          (event: React.MouseEvent<HTMLInputElement>) => {
            const { checked } = event.currentTarget;
            onChange(checked, {
              event,
              check: {
                type: "checkbox",
                ...props,
                value: checked,
              },
            });
          }
        )}
      />
      <span className="tea-switch__toggle" />
    </label>
  );

  // 默认是不需要 children 的，如果提供了，需要包装一层
  if (children) {
    component = (
      <label
        onClick={onClick}
        style={{ cursor: disabled ? "default" : "pointer" }}
      >
        {component}
        <Text reset style={{ verticalAlign: "middle", margin: "0 5px" }}>
          {children}
        </Text>
      </label>
    );
  }

  if (tooltip) {
    component = <Tooltip title={tooltip}>{component}</Tooltip>;
  }

  return component;
}
