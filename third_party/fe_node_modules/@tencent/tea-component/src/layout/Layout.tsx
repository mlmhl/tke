import React, { useState, useEffect } from "react";
import classNames from "classnames";
import { createRocket, RocketProps } from "../_util/create-rocket";
import { InferProps } from "../_type";
import { LayoutContent } from "./LayoutContent";
import { isChildOfType } from "../_util/is-child-of-type";

const LayoutHeader = createRocket("LayoutHeader", "header.tea-layout__header");
const LayoutFooter = createRocket("LayoutFooter", "footer.tea-layout__footer");
const LayoutSider = createRocket("LayoutFooter", "nav.tea-layout__sidebar");

function LayoutBody({ className, style, children }: RocketProps) {
  const [hasSider, setHasSider] = useState<boolean>(false);

  useEffect(() => {
    React.Children.forEach(children, child => {
      if (isChildOfType(child, LayoutSider)) {
        setHasSider(true);
      }
    });
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  return (
    <section
      className={classNames(
        "tea-layout__body",
        { "has-subsidebar": hasSider },
        className
      )}
      style={style}
    >
      {children}
    </section>
  );
}

export const Layout = Object.assign(
  createRocket("Layout", "section.tea-layout"),
  {
    Header: LayoutHeader,
    Body: LayoutBody,
    Footer: LayoutFooter,
    Sider: LayoutSider,
    Content: LayoutContent,
  }
);

export interface LayoutProps extends InferProps<typeof Layout> {}
