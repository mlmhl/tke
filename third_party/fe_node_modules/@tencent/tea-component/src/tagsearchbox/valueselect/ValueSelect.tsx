/* eslint-disable */
import React from "react";
import { PureInput } from "./PureInput";
import { SingleValueSelect } from "./SingleValueSelect";
import { MultipleValueSelect } from "./MultipleValueSelect";
import { Loading } from "./Loading";
import { Empty } from "./Empty";

export interface ValueSelectProps {
  /**
   * 值选择组件类型，用于选择不同组件
   */
  type: string | [string, { [key: string]: any }];

  /**
   * 值选择组件可选值的集合
   */
  values?: any[] | Function;

  /**
   * 当前输入值
   */
  inputValue?: string;
  onChange?: (value: any) => void;
  onSelect?: (value: any) => void;
  onCancel?: () => void;
  offset: number;
  maxHeight: number;
}

export class ValueSelect extends React.Component<ValueSelectProps, any> {
  mount = false;

  state = {
    values: this.props.values,
  };

  componentDidMount() {
    this.mount = true;
    const propsValues = this.props.values;
    if (typeof propsValues === "function") {
      const res = propsValues();
      // Promise
      if (res && res.then) {
        res.then(values => {
          this.mount && this.setState({ values });
        });
      } else {
        this.mount && this.setState({ values: res });
      }
    }
  }

  componentWillUnmount() {
    this.mount = false;
  }

  handleKeyDown = (keyCode: number): boolean => {
    if (this["select"] && this["select"].handleKeyDown) {
      return this["select"].handleKeyDown(keyCode);
    }
    return true;
  };

  // handleKeyUp = (keyCode: number): boolean => {
  //   if (this['select'] && this['select'].handleKeyUp) {
  //     return this['select'].handleKeyUp(keyCode);
  //   }
  //   return true;
  // }

  render() {
    const { values } = this.state;
    const {
      type,
      inputValue,
      onChange,
      onSelect,
      onCancel,
      offset,
      maxHeight,
    } = this.props;

    const props = {
      values,
      inputValue,
      onChange,
      onSelect,
      onCancel,
      offset,
      maxHeight,
    };

    let componentName = type;
    let componentOptions = {};

    if (Array.isArray(type)) {
      [componentName, componentOptions = {}] = type;
    }

    switch (componentName) {
      case "input":
        return (
          <PureInput ref={select => (this["select"] = select)} {...props} />
        );
      case "single":
        if (!Array.isArray(values)) {
          return <Loading offset={offset} />;
        }
        if (!values.length) {
          return (
            <Empty {...componentOptions} offset={offset} onCancel={onCancel} />
          );
        }
        return (
          <SingleValueSelect
            {...props}
            ref={select => (this["select"] = select)}
            values={values}
          />
        );

      case "multiple":
        if (!Array.isArray(values)) {
          return <Loading offset={offset} />;
        }
        if (!values.length) {
          return (
            <Empty {...componentOptions} offset={offset} onCancel={onCancel} />
          );
        }
        return (
          <MultipleValueSelect
            {...props}
            {...componentOptions}
            ref={select => (this["select"] = select)}
            values={values}
          />
        );
    }
    return null;
  }
}
