/* eslint-disable */
import React from "react";
import { List } from "../list";
import { DropdownBox } from "../dropdown";
import { TagSearchBoxContext } from "./TagSearchBoxContext";

export interface AttributeValue {
  /**
   * 为资源属性需求值的类型
   */
  type: string | [string, { [key: string]: any }];

  /**
   * 属性的唯一标识，会在结果中返回
   */
  key: string;

  /**
   * 资源属性值名称
   */
  name: string;

  /**
   * 属性是否可重复选择
   */
  values?: any[] | Function;

  /**
   * 该属性是否可重复选择
   * @default false
   */
  reusable?: boolean;

  /**
   * 该属性是否可移除
   * @default true
   */
  removeable?: boolean;
}

export interface AttributeSelectProps {
  attributes: AttributeValue[];
  inputValue: string;
  onSelect?: (attribute: AttributeValue) => void;
  maxHeight: number;
}

export interface AttributeSelectState {
  select: number;
}

const keys = {
  "8": "backspace",
  "9": "tab",
  "13": "enter",
  "37": "left",
  "38": "up",
  "39": "right",
  "40": "down",
};

export class AttributeSelect extends React.Component<
  AttributeSelectProps,
  AttributeSelectState
> {
  static contextType = TagSearchBoxContext;
  state: AttributeSelectState = {
    select: -1,
  };

  componentWillReceiveProps(nextProps: AttributeSelectProps) {
    if (this.props.inputValue !== nextProps.inputValue) {
      this.setState({ select: -1 });
    }
  }

  // 父组件调用
  handleKeyDown = (keyCode: number): boolean => {
    if (!keys[keyCode]) return;
    const { onSelect } = this.props;
    const { select } = this.state;

    switch (keys[keyCode]) {
      case "enter":
      case "tab":
        if (select < 0) break;
        if (onSelect) {
          onSelect(this.getAttribute(select));
        }
        return false;

      case "up":
        this.move(-1);
        break;

      case "down":
        this.move(1);
        break;
    }
  };

  getUseableList(): Array<AttributeValue> {
    const { attributes, inputValue } = this.props;

    // 获取冒号前字符串模糊查询
    const fuzzyValue = /(.*?)(:|：).*/.test(inputValue)
      ? RegExp.$1
      : inputValue;

    return attributes.filter(
      item => item.name.includes(inputValue) || item.name.includes(fuzzyValue)
    );
  }

  getAttribute(select: number): AttributeValue {
    const list = this.getUseableList();
    if (select < list.length) {
      return list[select];
    }
  }

  move = (step: number): void => {
    const { select } = this.state;
    const list = this.getUseableList();
    if (list.length <= 0) return;
    this.setState({ select: (select + step + list.length) % list.length });
  };

  handleClick = (e: React.MouseEvent, index: number): void => {
    e.stopPropagation();
    e.nativeEvent.stopPropagation();
    if (this.props.onSelect) {
      this.props.onSelect(this.getAttribute(index));
    }
  };

  render() {
    const { attributesSelectTips } = this.context;
    const { select } = this.state;
    const { maxHeight } = this.props;
    const list = this.getUseableList().map((item, index) => {
      return (
        <List.Item
          key={index}
          selected={select === index}
          onClick={e => this.handleClick(e, index)}
        >
          {item.name}
        </List.Item>
      );
    });

    if (list.length === 0) return null;

    return (
      <DropdownBox onClick={e => e.stopPropagation()}>
        <List type="option" style={{ maxHeight }}>
          {attributesSelectTips && (
            <List.Item disabled>{attributesSelectTips}</List.Item>
          )}
          {list}
        </List>
      </DropdownBox>
    );
  }
}
