import { ReferenceObject } from "popper.js";
import { RefObject, HTMLProps, ComponentType } from "react";
import { useOutsideClick } from "../_util/use-outside-click";

export type Trigger = ComponentType<TriggerProps>;
export type TriggerWithProps<P = any> = [ComponentType<P & TriggerProps>, P];

export interface TriggerProps {
  overlayElementRef: RefObject<HTMLElement>;
  childrenElementRef: RefObject<HTMLElement>;
  visible: boolean;
  setVisible: (visible: boolean, delay?: number) => Promise<boolean>;
  openDelay: number;
  closeDelay: number;
  render: (renderProps: TriggerRenderProps) => JSX.Element;
}

export interface TriggerRenderProps {
  overlayProps: HTMLProps<HTMLElement>;
  childrenProps: HTMLProps<HTMLElement>;
  referenceElement?: ReferenceObject;
}

export const buildinTriggers = {
  click: ClickTrigger as Trigger,
  hover: HoverTrigger as Trigger,
  focus: FocusTrigger as Trigger,
  empty: EmptyTrigger as Trigger,
};

/**
 * 点击的时候打开
 *
 * - children 上绑定 onClick 事件，点击时打开
 * - children 上添加 useClickOutside Hook，外部点击时关闭，并排除 overlayElement
 */
export function ClickTrigger({
  childrenElementRef,
  overlayElementRef,
  visible,
  setVisible,
  openDelay = 0,
  closeDelay = 0,
  render,
}: TriggerProps) {
  const { listen } = useOutsideClick([childrenElementRef, overlayElementRef]);

  listen(() => setVisible(false, closeDelay));

  return render({
    overlayProps: {},
    childrenProps: {
      onClick: () => setVisible(!visible, openDelay),
    },
  });
}

/**
 * 鼠标经过的时候打开
 */
export function HoverTrigger({
  setVisible,
  openDelay = 50,
  closeDelay = 100,
  render,
}: TriggerProps) {
  const commonProps = {
    onMouseEnter: () => setVisible(true, openDelay),
    onMouseLeave: () => setVisible(false, closeDelay),
  };
  return render({
    overlayProps: commonProps,
    childrenProps: commonProps,
  });
}

export function FocusTrigger({
  setVisible,
  openDelay = 50,
  closeDelay = 100,
  render,
}: TriggerProps) {
  const commonProps = {
    onFocus: () => setVisible(true, openDelay),
    onBlur: () => setVisible(false, closeDelay),
  };
  return render({
    overlayProps: { ...commonProps, tabIndex: 1000 },
    childrenProps: commonProps,
  });
}

/**
 * 表示空的触发交互
 */
export function EmptyTrigger(props: TriggerProps) {
  return props.render({ overlayProps: {}, childrenProps: {} });
}
