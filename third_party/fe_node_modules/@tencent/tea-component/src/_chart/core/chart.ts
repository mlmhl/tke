import { Context, Scale } from "./context";
import {
  ChartProps,
  Tooltip as TooltipCfg,
  Legend as LegendCfg,
} from "../type";
import { RectCoordinate } from "./coordinate/rect";
import { Line, Bar } from "./shape";
import uniqueId from "./lib/unique-id";
import { EventListener } from "./event";
import { Tooltip } from "./tooltip/tooltip";
import { Legend } from "./legend/legend";

export class Chart {
  /**
   * 全局上下文
   */
  private ctx: Context;

  /**
   * 直角坐标系
   */
  private rectCoordinate: RectCoordinate;

  /**
   * 图形实例
   */
  private shapes: { [key: string]: Line | Bar } = {};

  /**
   * 事件层实例
   */
  private event: EventListener;

  /**
   * 提示框实例
   */
  private tooltipInstance: Tooltip;

  /**
   * 图例实例
   */
  private legendInstance: Legend;

  /**
   * Resize 的缓冲器
   */
  private resizeTimer: NodeJS.Timeout;

  public constructor(root: HTMLElement) {
    this.ctx = new Context(root);
    this.rectCoordinate = new RectCoordinate(this.ctx);
    this.event = new EventListener(this.ctx);
    this.tooltipInstance = new Tooltip(this.ctx);
    this.legendInstance = new Legend(this.ctx);
  }

  /**
   * 设置数据源，转化为标准数据对象 MetaData
   * @param dataSource 原始数据源
   * @param scaleConfig 列定义设置
   */
  public source(dataSource: ChartProps["dataSource"]) {
    this.ctx.setSource(dataSource);
    return this;
  }

  /**
   * 设置数据源的列
   * @param scale 列定义
   */
  public scale(scale: Scale) {
    if (scale) {
      this.ctx.setScale(scale);
    }
    return this;
  }

  /**
   * 设置提示框
   * @param enable 是否显示提示框
   * @param tooltipCfg 提示框配置
   */
  public tooltip(enable: boolean | TooltipCfg, tooltipCfg: TooltipCfg = {}) {
    const cfg =
      typeof enable === "boolean" ? { enable, ...tooltipCfg } : enable;
    cfg.enable = typeof cfg.enable === "boolean" ? cfg.enable : true;
    this.ctx.setTooltip(cfg);
    return this;
  }

  /**
   * 设置图例
   * @param enable 是否显示图例
   * @param legendCfg 图例配置
   */
  public legend(enable: boolean | LegendCfg, legendCfg: LegendCfg = {}) {
    const cfg = typeof enable === "boolean" ? { enable, ...legendCfg } : enable;
    cfg.enable = typeof cfg.enable === "boolean" ? cfg.enable : true;
    this.ctx.setLegend(cfg);
    return this;
  }

  /**
   * 创建折线图实例
   */
  public line() {
    const name = uniqueId("shape_line_");
    this.shapes[name] = new Line(this.ctx, this.rectCoordinate);
    return this.shapes[name] as Line;
  }

  public bar() {
    const name = uniqueId("shape_bar_");
    this.shapes[name] = new Bar(this.ctx, this.rectCoordinate);
    return this.shapes[name] as Bar;
  }

  /**
   * 开始渲染
   */
  public render() {
    this.ctx.setSize();
    this.rectCoordinate.update();
    for (const shape of Object.values(this.shapes)) {
      shape.draw();
    }
  }

  /**
   * 重置尺寸
   */
  public resize() {
    clearTimeout(this.resizeTimer);
    this.resizeTimer = setTimeout(() => {
      this.ctx.setSize();
      this.render();
    }, 500);
  }

  /**
   * 销毁图表实例
   */
  public destroy() {
    this.ctx.removeAllListeners();
  }
}
