import { Selection, select } from "d3";
import { getTooltipContent } from "./tooltip-helper";
import { Context } from "../context";
import { escapeHTML } from "../lib/escape";

export class Tooltip {
  private ctx: Context;

  private tooltip: Selection<HTMLDivElement, {}, HTMLElement, {}>;

  public constructor(ctx: Context) {
    this.ctx = ctx;

    this.tooltip = select(this.ctx.root)
      .append("div")
      .classed("tea-chart-tooltip", true)
      .style("position", "absolute")
      .style("display", "none")
      .style("padding", "15px")
      .style("z-index", 99)
      .style("background", "#FFF")
      .style("white-space", "nowrap")
      .style("box-shadow", "0px 4px 8px 0px rgba(0, 0, 0, 0.15)");

    this.ctx.on("coordinate.helper.show", this.show.bind(this));
    this.ctx.on("coordinate.helper.hide", this.hide.bind(this));
  }

  /**
   * 显示提示框
   */
  private show({ x, y, xPos, metaData, index, type }) {
    const { formatter } = this.ctx.tooltip;
    const [{ title }] = metaData;
    let content = getTooltipContent(title, metaData);

    if (typeof formatter === "function") {
      const formatted = formatter(metaData, index);
      if (typeof formatted === "string") {
        content = formatted;
      } else {
        const [{ title }] = formatted;
        content = getTooltipContent(title, formatted);
      }
    }

    this.tooltip
      .html(escapeHTML(content))
      .style("display", "block")
      .transition()
      .duration(60);

    const offset = 10;
    const fixedX = type === "Band" ? x : xPos;
    const { height, width } = window.getComputedStyle(this.tooltip.node());
    const w = parseInt(width, 10);
    const h = parseInt(height, 10);
    const { plot } = this.ctx;

    // 设置水平方向位置
    if (fixedX + w > plot.width) {
      this.tooltip.style("right", `${plot.width - fixedX + 2 * offset}px`);
      this.tooltip.style("left", "unset");
    } else {
      this.tooltip.style("right", "unset");
      this.tooltip.style("left", `${fixedX + plot.padding.left + offset}px`);
    }

    this.tooltip.style("top", `${y + offset}px`);
  }

  /**
   * 隐藏提示框
   */
  private hide() {
    this.tooltip.style("display", "none");
  }
}
