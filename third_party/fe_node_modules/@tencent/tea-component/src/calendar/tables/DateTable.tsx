import React from "react";
import moment, { Moment, isMoment } from "moment";
import Table, { CellStatus } from "./BaseTable";
import { useTranslation } from "../../i18n";
import {
  RangeDateType,
  CalendarTableType,
  DateChangeContext,
} from "../DateProps";

export interface DateTableProps {
  /**
   * 当前展示日期
   */
  current: Moment;

  /**
   * 当前选中的日期
   */
  value: Moment;

  /**
   * 允许选择的时间范围限制
   */
  range?: RangeDateType;

  /**
   * 可选的日期范围
   */
  disabledDate?: (date: Moment) => boolean;

  /**
   * Cell 渲染状态
   */
  cellStatus?: (date: Moment) => CellStatus;

  /**
   * 选中回调
   */
  onSelect?: (value: Moment, context: DateChangeContext) => void;

  /**
   * type 变更回调
   */
  onTypeChange?: (type: CalendarTableType) => void;

  /**
   * 当前展示日期变更回调
   */
  onCurrentChange?: (current: Moment) => void;

  // onOverDate?: (e: React.MouseEvent) => void;

  // onOutDate?: (e: React.MouseEvent) => void;
}

export function DateTable({
  value,
  current,
  onCurrentChange = () => null,
  range,
  disabledDate,
  onSelect = () => null,
  onTypeChange = () => null,
  cellStatus = () => CellStatus.Common,
}: // onOverDate = () => null,
// onOutDate = () => null,
DateTableProps) {
  const t = useTranslation();

  const year = current.year();
  const month = current.month();

  function genTable(): Moment[][] {
    const table = [];

    // 本月第一天
    const first = moment({
      year,
      month,
      date: 1,
    });
    const firstDay = first.day();

    // 第一周
    const firstWeek = Array<Moment>(7)
      .fill(null)
      .map((_, i) => first.clone().add(i - firstDay, "d"));

    table.push(firstWeek);

    let nextWeekFirst = firstWeek[6].clone().add(1, "d");
    while (nextWeekFirst.month() === month) {
      const week = Array<Moment>(7)
        .fill(null)
        .map((_, i) => nextWeekFirst.clone().add(i, "d")); // eslint-disable-line no-loop-func

      table.push(week);
      nextWeekFirst = week[6].clone().add(1, "d");
    }

    return table;
  }

  function renderYear() {
    return (
      <a className="op-item" onClick={() => onTypeChange("year")}>
        {current.format(t.yearFormat)}
      </a>
    );
  }

  function renderMonth() {
    return (
      <a className="op-item" onClick={() => onTypeChange("month")}>
        {moment.monthsShort(month)}
      </a>
    );
  }

  const [rangeMin, rangeMax] = range || [null, null];

  function isValid(date) {
    if (isMoment(rangeMin) && rangeMin.isAfter(date, "day")) {
      return false;
    }
    if (isMoment(rangeMax) && rangeMax.isBefore(date, "day")) {
      return false;
    }
    return disabledDate(date);
  }

  return (
    <Table
      caption={
        t.monthBeforeYear ? (
          <>
            {renderMonth()}
            {renderYear()}
          </>
        ) : (
          <>
            {renderYear()}
            {renderMonth()}
          </>
        )
      }
      jumperOptions={{
        onNext: () => onCurrentChange(moment(current).add(1, "month")),
        onPrev: () => onCurrentChange(moment(current).subtract(1, "month")),
        onCurrent: () => onCurrentChange(moment()),
        isCurrent: current.isSame(moment(), "month"),
        nextDisabled:
          isMoment(rangeMax) &&
          rangeMax.isBefore(
            moment({ year, month, date: 1 }).add(1, "month"),
            "day"
          ),
        prevDisabled:
          isMoment(rangeMin) &&
          rangeMin.isAfter(
            moment({ year, month, date: 1 }).subtract(1, "day"),
            "day"
          ),
        nextTitle: t.nextMonth,
        prevTitle: t.prevMonth,
        curTitle: t.curMonth,
      }}
    >
      {/* 周 */}
      <div className="tea-calendar__header-group">
        <div className="tea-calendar__row">
          {moment.weekdaysMin().map(name => (
            <Table.Cell key={name} name={name} />
          ))}
        </div>
      </div>

      {genTable().map((week, i) => (
        <Table.Row key={`${month}-${i}`}>
          {week.map((date, j) => (
            <Table.Cell
              key={`${month}-${i}-${j}`}
              name={date.date()}
              value={date}
              onSelect={onSelect}
              status={cellStatus(date)}
              isNow={date.isSame(moment(), "day")}
              outside={date.month() !== month}
              disabled={!isValid(date)}
              onOutsideSelect={date =>
                onCurrentChange(
                  moment({ year: date.year(), month: date.month() })
                )
              }
            />
          ))}
        </Table.Row>
      ))}
    </Table>
  );
}
