import React from "react";
import classNames from "classnames";
import { Moment } from "moment";
import { ChangeContext } from "../../form/controlled";
import { JumperProps, Jumper } from "../../jumper";
import { CalendarTableType } from "../DateProps";

export enum CellStatus {
  Common,
  Selected,
  InRange,
  RangeStart,
  RangeEnd,
}

export interface TableProps extends React.Props<any> {
  /**
   * 标题渲染
   */
  caption?: React.ReactNode;

  /**
   * Jumper 配置
   */
  jumperOptions?: JumperProps;

  /**
   * table 类型
   */
  type?: CalendarTableType;
}

export default function Table({
  caption,
  children,
  jumperOptions = {},
  type,
}: TableProps) {
  return (
    <div className="tea-calendar__table">
      <div className="tea-calendar__caption">{caption}</div>
      <Jumper {...jumperOptions} noBordered showCurrent />
      {/* 日期 */}
      <div className="tea-calendar__row-group">
        <div
          className={classNames("tea-calendar__type-wrap", {
            "tea-calendar__type--month": type === "month",
            "tea-calendar__type--year": type === "year",
          })}
        >
          {children}
        </div>
      </div>
    </div>
  );
}

Table.Row = TableRow;
Table.Cell = Cell;

export function TableRow({ children }: { children: React.ReactNode }) {
  return <div className="tea-calendar__row">{children}</div>;
}

export interface Cell {
  /**
   * 展示名称
   */
  name: string | number;

  /**
   * 对应日期值
   */
  value?: Moment;

  /**
   * 被选中回调
   */
  onSelect?: (value: Moment, context: ChangeContext) => void;

  /**
   * Outside 日期被选中回调
   */
  onOutsideSelect?: (current: Moment) => void;

  /**
   * 是否为当前时间
   */
  isNow?: boolean;

  /**
   * 是否在当前时间外
   */
  outside?: boolean;

  /**
   * 是否禁用
   */
  disabled?: boolean;

  /**
   * 状态
   */
  status?: CellStatus;
}

export function Cell({
  name,
  value,
  onSelect = () => null,
  onOutsideSelect = () => null,
  isNow = false,
  outside = false,
  disabled = false,
  status = CellStatus.Common,
}: Cell) {
  return (
    <div
      role="button"
      className={classNames({
        "tea-calendar__cell": true,
        "tea-calendar__cell--now": isNow,
        "tea-calendar__day--outside": outside,
        "tea-calendar__day--in-range":
          !outside && status === CellStatus.InRange,
        "tea-calendar__day--start is-selected":
          !outside && status === CellStatus.RangeStart,
        "tea-calendar__day--end is-selected":
          !outside && status === CellStatus.RangeEnd,
        "is-disabled": disabled,
        "is-selected": !outside && status === CellStatus.Selected,
      })}
      onClick={event => {
        if (!disabled) {
          onSelect(value, { event });
          if (outside) {
            onOutsideSelect(value);
          }
        }
      }}
    >
      <span>{name}</span>
    </div>
  );
}
