import React, { useState, useEffect, useRef, useCallback } from "react";
import moment, { Moment, isMoment } from "moment";
import classNames from "classnames";
import { useTranslation } from "../i18n";
import { ControlledProps, useDefaultValue } from "../form/controlled";
import CalendarPart from "../calendar/CalendarPart";
import { CalendarTable, getTimeRange } from "../calendar/CalendarTable";
import { Combine } from "../_type";
import { TimeSupportWrapper } from "./TimeSupportWrapper";
import { Input } from "../input/Input";
import { RangePicker } from "./RangePicker";
import { TimeDisabledProps } from "../timepicker/TimeProps";
import { getHourMinuteSecond, getValidTimeValue } from "../timepicker/util";
import { DropdownBox } from "../dropdown";
import { MonthPicker } from "./MonthPicker";
import {
  showTimeType,
  CalendarTableType,
  DateChangeContext,
} from "../calendar/DateProps";
import { CommonDatePickerProps } from "./DatePickerProps";
import { getYearMonthDate, DatePickerTrigger } from "./util";
import { withStatics } from "../_util/with-statics";
import { Popover } from "../popover";
import { useDefault } from "../_util/use-default";

export interface DatePickerProps
  extends Combine<CommonDatePickerProps, ControlledProps<Moment>> {
  /**
   * 是否开启时间选择
   */
  showTime?: showTimeType<Moment>;

  /**
   * 不可选的日期
   */
  disabledDate?: (date: Moment) => boolean;

  /**
   * 不可选的时间
   */
  disabledTime?: (date: Moment) => TimeDisabledProps;
}

const getFormat = showTime => (showTime ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD");

export const DatePicker = withStatics(
  function DatePicker(props: DatePickerProps) {
    const t = useTranslation(moment);
    const {
      header,
      className,
      style,
      showTime,
      value,
      onChange,
      disabled,
      format: _format,
      placeholder = showTime ? t.selectTime : t.selectDate,
      defaultOpen = false,
      open,
      onOpenChange = () => null,
      placement = "bottom-start",
      placementOffset = 5,
      closeOnScroll = true,
      ...restProps
    } = useDefaultValue(props);

    const format = _format || getFormat(showTime);

    // 当前面板类型
    const [type, setType] = useState<CalendarTableType>("date");

    // 当前面板展示时间
    const [curViewMoment, setCurViewMoment] = useState<Moment>(
      isMoment(value) ? value : getDefaultViewMoment()
    );

    // 当前选中日期
    const [curValue, setCurValue] = useState<Moment>(value);

    // 上次选中日期
    const preValidValueRef = useRef<Moment>(value);

    // 选择器是否展开
    const [active, setActive] = useDefault(open, defaultOpen, onOpenChange);

    // 输入框显示值
    const inputRef = useRef<HTMLInputElement>(null);
    const getInputValue = useCallback(
      value => {
        return isMoment(value) ? value.locale(t.locale).format(format) : "";
      },
      [t.locale, format]
    );
    const [inputValue, setInputValue] = useState<string>(
      getInputValue(curValue)
    );

    useEffect(() => {
      setCurValue(value);
      setInputValue(getInputValue(value));
    }, [format, value, getInputValue]);

    function handleChange(value: Moment, context: DateChangeContext): void {
      // 同步日期/时间
      if (showTime && isMoment(value)) {
        value = syncDate(value, context.type); // eslint-disable-line no-param-reassign
      }

      setCurValue(value);
      setInputValue(getInputValue(value));

      // 没有时间选择时没有二次确认选中
      if (!showTime) {
        onChange(value, context);
        handleClose();
      }
    }

    function handleOk(event): void {
      onChange(curValue, { event });
      handleClose();
    }

    function handleOpen(): void {
      if (disabled) {
        return;
      }
      setActive(true);
      setType("date");
    }

    function handleClose(): void {
      setInputValue(getInputValue(value));
      setActive(false);
    }

    /**
     * 同步日期/时间
     * 如果当前修改为日期，则同步上次时间并修正；
     * 如果当前修改为时间，则同步上次日期；
     */
    function syncDate(value: Moment, type: CalendarTableType): Moment {
      const preValidValue = preValidValueRef.current;
      const { range, disabledTime = () => ({}) } = props;

      // 如果包含上次选择，则以上次选择为基准同步
      if (isMoment(preValidValue)) {
        if (type === "date") {
          const time = getValidTimeValue(preValidValue, {
            range: getTimeRange(value, range),
            ...disabledTime(value),
          });
          value.set(getHourMinuteSecond(time));
        }
        if (type === "time") {
          value.set(getYearMonthDate(preValidValue));
        }
        // 如果是首次选择，则将当前时间进行修正
      } else if (type === "date") {
        const time = getValidTimeValue(value, {
          range: getTimeRange(value, range),
          ...disabledTime(value),
        });
        value.set(getHourMinuteSecond(time));
      }

      preValidValueRef.current = value;
      return value;
    }

    /**
     * 获取面板默认展示时间
     */
    function getDefaultViewMoment(): Moment {
      const time =
        showTime && typeof showTime === "object"
          ? showTime.defaultValue
          : undefined;
      if (!time) {
        return moment();
      }
      return moment(getHourMinuteSecond(time));
    }

    return (
      <Popover
        trigger={[
          DatePickerTrigger,
          { onOpen: handleOpen, onClose: handleClose },
        ]}
        visible={active}
        onVisibleChange={setActive}
        placement={placement}
        placementOffset={placementOffset}
        closeOnScroll={closeOnScroll}
        overlay={
          <DropdownBox>
            <CalendarPart.Panel timeMode={type === "time"}>
              {!!header && <CalendarPart.Header>{header}</CalendarPart.Header>}
              <TimeSupportWrapper
                {...restProps}
                showTime={showTime}
                value={curValue}
                onChange={handleChange}
                onOk={handleOk}
                type={type}
                onTypeChange={type => setType(type as CalendarTableType)}
              >
                {props => (
                  <CalendarTable
                    {...props}
                    curViewMoment={curViewMoment}
                    onCurViewMomentChange={setCurViewMoment}
                  />
                )}
              </TimeSupportWrapper>
            </CalendarPart.Panel>
          </DropdownBox>
        }
      >
        <div className={classNames("tea-datepicker", className)} style={style}>
          <div className="tea-datepicker__input">
            <Input
              ref={inputRef}
              disabled={disabled}
              placeholder={placeholder}
              value={inputValue}
              onFocus={() => inputRef.current.blur()}
            />
          </div>
        </div>
      </Popover>
    );
  },
  {
    RangePicker,
    MonthPicker,
    defaultLabelAlign: "middle",
  }
);
