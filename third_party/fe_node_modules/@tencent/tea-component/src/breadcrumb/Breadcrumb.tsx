import React from "react";
import classNames from "classnames";
import { isChildOfType } from "../_util/is-child-of-type";
import { StyledProps } from "../_type";
import { withStatics } from "../_util/with-statics";

export interface BreadcrumbProps extends StyledProps {
  /**
   * 导航内容
   */
  children?: React.ReactNode;

  /**
   * 较大字号的样式，可用于 Layout.Content 标题处
   */
  large?: boolean;
}

export const Breadcrumb = withStatics(
  function Breadcrumb({ large, children, className, style }: BreadcrumbProps) {
    return (
      <ol
        className={classNames("tea-breadcrumb", className, {
          "tea-breadcrumb--fz-large": large,
        })}
        style={style}
      >
        {React.Children.map(children, (child, index) => {
          if (
            isChildOfType(child, BreadcrumbItem) &&
            index === React.Children.count(children) - 1
          ) {
            return React.cloneElement(child, {
              current: true,
            });
          }
          return child;
        })}
      </ol>
    );
  },
  {
    Item: BreadcrumbItem,
  }
);

interface BreadcrumbItemProps extends StyledProps {
  current?: boolean;
  children?: React.ReactNode;
}

export function BreadcrumbItem({
  current,
  children,
  className,
  style,
}: BreadcrumbItemProps) {
  if (typeof children === "string") {
    // eslint-disable-next-line no-param-reassign
    children = <span>{children}</span>;
  }

  return (
    <li className={classNames("tea-breadcrumb__item", className)} style={style}>
      {React.isValidElement<StyledProps>(children)
        ? React.cloneElement(children, {
            className: classNames(
              children.props.className,
              "tea-breadcrumb__item-title",
              {
                "is-current": current,
              }
            ),
          })
        : children}
    </li>
  );
}
