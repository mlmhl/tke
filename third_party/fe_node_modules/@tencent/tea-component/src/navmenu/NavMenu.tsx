import React from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { withStatics } from "../_util/with-statics";
import { Dropdown, DropdownProps } from "../dropdown";

export interface NavMenuItemProps extends StyledProps {
  /**
   * 菜单项类型
   *
   * - `default` 默认文字类型菜单项
   * - `logo` 导航 Logo
   * - `dropdown` 包含下拉的菜单项
   * - `icon` 图标类型菜单项
   *
   * @default "default"
   */
  type?: "default" | "logo" | "dropdown" | "icon";

  /**
   * 菜单项是否为选中样式
   *
   * @default false
   */
  selected?: boolean;

  /**
   * 菜单项点击回调
   */
  onClick?: (event: React.MouseEvent) => void;

  /**
   * 菜单项内容
   */
  children?: React.ReactNode;

  /**
   * `type="dropdown"` 时弹出层内容
   * @docType React.ReactNode | ((close: () => void) => React.ReactNode)
   */
  overlay?: DropdownProps["children"];
}

export function NavMenuItem({
  type = "default",
  selected,
  onClick,
  className,
  style,
  overlay,
  children,
}: NavMenuItemProps) {
  const wrapperProps = {
    className: classNames(className, {
      "tea-nav__service": type === "default",
      "tea-nav__logo": type === "logo",
      "tea-nav__dropdown": type === "dropdown",
      "tea-nav__operation": type === "icon",
      "is-selected": selected,
    }),
    style,
    onClick,
  };

  if (type === "dropdown") {
    return (
      <div {...wrapperProps}>
        <Dropdown
          trigger="hover"
          button={children}
          clickClose={false}
          boxClassName="tea-nav__dropdown-box"
          placementOffset={0}
        >
          {overlay}
        </Dropdown>
      </div>
    );
  }

  if (type === "icon") {
    return (
      <div {...wrapperProps}>
        <a className="tea-nav__operation-inner">{children}</a>
      </div>
    );
  }

  if (type === "logo") {
    return (
      <div {...wrapperProps}>
        <a>{children}</a>
      </div>
    );
  }

  // default
  if (typeof children === "string") {
    return (
      <div {...wrapperProps}>
        <a>{children}</a>
      </div>
    );
  }
  return <div {...wrapperProps}>{children}</div>;
}

export interface NavMenuProps extends StyledProps {
  /**
   * 导航左侧 <NavMenu.Item />
   */
  left?: React.ReactNode;

  /**
   * 导航右侧 <NavMenu.Item />
   */
  right?: React.ReactNode;
}

export const NavMenu = withStatics(
  function NavMenu({ left, right, className, style }: NavMenuProps) {
    return (
      <nav className={classNames("tea-nav", className)} style={style}>
        {left}
        <div className="tea-nav__flex-end" />
        {right}
      </nav>
    );
  },
  {
    Item: NavMenuItem,
  }
);
