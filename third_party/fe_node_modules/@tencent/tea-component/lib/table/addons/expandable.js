"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var icon_1 = require("../../icon");
var get_row_key_from_record_key_1 = require("../util/get-row-key-from-record-key");
var use_middleware_1 = require("../util/use-middleware");
var inject_props_if_target_not_existed_1 = require("../util/inject-props-if-target-not-existed");
var fallbackColumnKey = "__expandable_addon__";
var rowDisabled = null;
function expandable(options) {
    var render = options.render, expand = options.expand, shouldRecordExpandable = options.shouldRecordExpandable, expandedKeys = options.expandedKeys, onExpandedKeysChange = options.onExpandedKeysChange, targetColumnKey = options.targetColumnKey, gapCell = options.gapCell, gapCellRender = options.gapCellRender, _a = options.width, width = _a === void 0 ? 26 : _a, _b = options.iconRender, iconRender = _b === void 0 ? function (x) { return x; } : _b;
    var expandedKeySet = new Set(expandedKeys || []);
    var getRowKey;
    var addons = [];
    return {
        onInjectProps: function (props) {
            var recordKey = props.recordKey;
            getRowKey = get_row_key_from_record_key_1.getRowKeyfromRecordKey(recordKey);
            /* eslint-disable prefer-destructuring */
            rowDisabled = props.rowDisabled || (function () { return false; });
            addons = props.addons;
            var columns = inject_props_if_target_not_existed_1.injectPropsIfTargetNotExisted(props.columns, targetColumnKey, {
                key: fallbackColumnKey,
                width: width,
                header: null,
                render: function () { return null; },
            });
            /* eslint-enable prefer-destructuring */
            return tslib_1.__assign({}, props, { columns: columns });
        },
        onInjectColumn: function (previous) { return function (record, rowKey, recordIndex, column) {
            // 不是目标列
            if (column.key !== targetColumnKey && column.key !== fallbackColumnKey) {
                return previous(record, rowKey, recordIndex, column);
            }
            var _a = previous(record, rowKey, recordIndex, column), preChildren = _a.children, props = _a.props, result = tslib_1.__rest(_a, ["children", "props"]);
            var children = preChildren;
            // 非表头
            if (recordIndex !== -1) {
                var key_1 = getRowKey(record, recordIndex);
                var isExpandable = !shouldRecordExpandable || shouldRecordExpandable(record);
                var isExpanded_1 = expandedKeySet.has(key_1);
                if (isExpandable) {
                    var toggle = function (event) {
                        if (isExpanded_1) {
                            var nextSet = new Set(expandedKeySet);
                            nextSet.delete(key_1);
                            onExpandedKeysChange(Array.from(nextSet.keys()), {
                                operateType: "collapse",
                                operateKey: key_1,
                                operateRecord: record,
                                event: event,
                            });
                        }
                        else {
                            onExpandedKeysChange(expandedKeys.concat(key_1), {
                                operateType: "expand",
                                operateKey: key_1,
                                operateRecord: record,
                                event: event,
                            });
                        }
                    };
                    var element = (react_1.default.createElement("div", null,
                        react_1.default.createElement("a", { className: "tea-table__icon-wrap", onClick: toggle },
                            react_1.default.createElement(icon_1.Icon, { type: isExpanded_1 ? "arrowdown" : "arrowright" })),
                        children));
                    children = iconRender(element, {
                        children: preChildren,
                        record: record,
                        rowKey: rowKey,
                        recordIndex: recordIndex,
                        disabled: rowDisabled(record),
                    });
                }
            }
            return tslib_1.__assign({}, result, { props: props, children: children });
        }; },
        onInjectRow: function (renderRow) { return function (record, rowKey, recordIndex, columns) {
            // 不是展开的行，原样渲染即可
            if (!expandedKeySet.has(rowKey)) {
                return renderRow(record, rowKey, recordIndex, columns);
            }
            // 原始行的渲染内容
            var _a = renderRow(record, rowKey, recordIndex, columns), prepends = _a.prepends, row = _a.row, appends = _a.appends;
            // 展开的内容
            var expands = [];
            // 支持两种展开方式，提供了 render 方法的话，渲染一个行给 render() 作为渲染容器
            if (typeof render === "function") {
                expands.push(react_1.default.createElement("tr", { className: "tr__detailrow", key: rowKey + "__expanded-row" },
                    gapCell > 0 && (react_1.default.createElement("td", { colSpan: gapCell }, gapCellRender && react_1.default.createElement("div", null, gapCellRender(record)))),
                    react_1.default.createElement("td", { colSpan: columns.length - (gapCell > 0 ? gapCell : 0) },
                        react_1.default.createElement("div", null, render(record)))));
            }
            // 如果提供了 expand 方法，则意图为展开当前数据为更多的数据
            // 更多的数据走原来表格的渲染逻辑
            else if (typeof expand === "function") {
                // 展开的数据
                var expandedRecords = expand(record) || [];
                // 展开数据的渲染和追加
                expandedRecords.forEach(function (expandedRecord, expandedRecordIndex) {
                    var expandedRowKey = getRowKey(expandedRecord, expandedRecordIndex);
                    // 这里如果直接使用 renderRow，则展开的数据无法经过插件的处理，所以调用了 useMiddleware
                    var expandedInfo = use_middleware_1.useMiddleware(addons, "onInjectRow")(renderRow)(expandedRecord, expandedRowKey, recordIndex, columns);
                    expands.push.apply(expands, tslib_1.__spread(expandedInfo.prepends));
                    expands.push(expandedInfo.row);
                    expands.push.apply(expands, tslib_1.__spread(expandedInfo.appends));
                });
            }
            return {
                prepends: prepends,
                row: react_1.default.cloneElement(row, {
                    className: classnames_1.default(row.props.className, "tr__masterrow"),
                }),
                appends: tslib_1.__spread(appends, expands),
            };
        }; },
    };
}
exports.expandable = expandable;
//# sourceMappingURL=expandable.js.map