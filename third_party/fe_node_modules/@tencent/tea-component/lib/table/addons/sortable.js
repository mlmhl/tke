"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var text_1 = require("../../text");
var icon_1 = require("../../icon");
function sortable(options) {
    var sortablePrefer = new Map((options.columns || []).map(function (column) {
        return typeof column === "string"
            ? [column, "asc"]
            : [column.key, column.prefer];
    }));
    var sortMap = new Map((options.value || []).map(function (sort) { return [sort.by, sort.order]; }));
    return {
        onInjectColumn: function (renderColumn) { return function (record, rowKey, recordIndex, column) {
            var columnResult = renderColumn(record, rowKey, recordIndex, column);
            // recordIndex > -1 是记录行，我们只注入表头
            if (recordIndex > -1) {
                return columnResult;
            }
            // 不是可排序列，跳过
            if (!sortablePrefer.has(column.key)) {
                return columnResult;
            }
            // 获取原始渲染内容
            var children = columnResult.children;
            // 当前的排序状态：undefined | "asc" | "desc"
            var order = sortMap.get(column.key);
            // 切换排序状态
            var changeOrder = function (event) {
                if (typeof options.onChange !== "function") {
                    return;
                }
                var nextOrder = sortablePrefer.get(column.key);
                if (order === "asc") {
                    nextOrder = "desc";
                }
                if (order === "desc") {
                    nextOrder = "asc";
                }
                var sort = {
                    by: column.key,
                    order: nextOrder,
                };
                // 删除旧排序规则，保证新的在前
                sortMap.delete(column.key);
                var value = [sort].concat(Array.from(sortMap).map(function (_a) {
                    var _b = tslib_1.__read(_a, 2), by = _b[0], order = _b[1];
                    return ({ by: by, order: order });
                }));
                options.onChange(value, { event: event, sort: sort });
            };
            // 包装一个排序按钮
            children = (react_1.default.createElement(SortButton, { order: order, onClick: changeOrder }, children));
            return tslib_1.__assign({}, columnResult, { children: children });
        }; },
    };
}
exports.sortable = sortable;
function SortButton(_a) {
    var order = _a.order, className = _a.className, style = _a.style, children = _a.children, onClick = _a.onClick;
    var iconType = "sort";
    if (order === "asc") {
        iconType = "sortup";
    }
    if (order === "desc") {
        iconType = "sortdown";
    }
    return (react_1.default.createElement("span", { className: classnames_1.default("tea-table__sortbtn", { "is-active": Boolean(order) }, className), style: style, onClick: onClick },
        react_1.default.createElement(text_1.Text, { overflow: true, className: "tea-table__headerop" }, children),
        react_1.default.createElement(icon_1.Icon, { type: iconType })));
}
exports.SortButton = SortButton;
function comparer(sorts) {
    return function (a, b) {
        var e_1, _a;
        try {
            for (var sorts_1 = tslib_1.__values(sorts), sorts_1_1 = sorts_1.next(); !sorts_1_1.done; sorts_1_1 = sorts_1.next()) {
                var _b = sorts_1_1.value, by = _b.by, order = _b.order;
                var isAsc = a[by] < b[by];
                var isDesc = a[by] > b[by];
                if (isAsc || isDesc) {
                    if (order === "asc")
                        return isAsc ? -1 : 1;
                    if (order === "desc")
                        return isDesc ? -1 : 1;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sorts_1_1 && !sorts_1_1.done && (_a = sorts_1.return)) _a.call(sorts_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return 0;
    };
}
sortable.comparer = comparer;
//# sourceMappingURL=sortable.js.map