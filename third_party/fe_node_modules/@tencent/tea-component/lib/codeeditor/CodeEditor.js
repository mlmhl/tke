"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var use_last_1 = require("../_util/use-last");
var merge_style_1 = require("../_util/merge-style");
// 获取值时自增引用
var nextValueKey = 0;
function CodeEditor(props) {
    var _a = tslib_1.__read(react_1.useState(false), 2), ready = _a[0], setReady = _a[1];
    var options = props.options, autoFocus = props.autoFocus, loadingPlaceholder = props.loadingPlaceholder, className = props.className, style = props.style, onEdit = props.onEdit, onReady = props.onReady, onSave = props.onSave, _b = props.src, src = _b === void 0 ? "https://imgcache.qq.com/qcloud/vendors/monaco-editor/frame/editor.html" : _b;
    var handler = use_last_1.useLast({ onEdit: onEdit, onReady: onReady, onSave: onSave });
    var iframeRef = react_1.useRef(null);
    var valueCallbackMap = react_1.useRef(new Map());
    react_1.useEffect(function () {
        if (!iframeRef.current) {
            return function () { return null; };
        }
        var instance;
        var callHandler = function (method) {
            if (handler.current && typeof handler.current[method] === "function") {
                handler.current[method](instance);
            }
        };
        var receive = function (evt) {
            if (evt.source !== iframeRef.current.contentWindow) {
                return;
            }
            var message = decodeMessage(evt.data);
            if (!message) {
                return;
            }
            var send = function (type, payload) {
                evt.source.postMessage(encodeMessage(type, payload), src.replace(/(\w)\/(.*)/, "$1"));
            };
            var type = message.type, payload = message.payload;
            switch (type) {
                case "ready": {
                    send("create", tslib_1.__assign({ language: "javascript", autoFocus: autoFocus }, (options || null)));
                    instance = {
                        focus: function () { return send("focus"); },
                        getValue: function (option) {
                            return new Promise(function (resolve) {
                                var key = nextValueKey;
                                nextValueKey += 1;
                                send("get-value", { key: key, option: option });
                                valueCallbackMap.current.set(key.toString(), resolve);
                            });
                        },
                        setValue: function (value) { return send("set-value", { value: value }); },
                        updateOptions: function (options) { return send("update-options", { options: options }); },
                    };
                    callHandler("onReady");
                    setReady(true);
                    break;
                }
                case "value": {
                    var key = payload.key, value = payload.value;
                    var resolve = valueCallbackMap.current.get(String(key));
                    if (resolve) {
                        valueCallbackMap.current.delete(String(key));
                        resolve(value);
                    }
                    break;
                }
                case "edit": {
                    callHandler("onEdit");
                    break;
                }
                case "save": {
                    callHandler("onSave");
                    break;
                }
            }
        };
        window.addEventListener("message", receive);
        return function () { return window.removeEventListener("message", receive); };
    }, []); // eslint-disable-line react-hooks/exhaustive-deps
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-code-editor", className), style: merge_style_1.mergeStyle({ position: "relative" }, style) },
        react_1.default.createElement("iframe", { title: "code-editor", ref: iframeRef, src: src, className: "tea-code-editor-frame", style: { width: "100%", height: "100%" }, frameBorder: "no" }),
        !ready && (react_1.default.createElement("div", { className: "tea-code-editor-loading", style: { position: "absolute", left: 0, top: 0, bottom: 0, right: 0 } }, typeof loadingPlaceholder === "string" ? (react_1.default.createElement("div", { style: {
                height: 30,
                lineHeight: 30,
                textAlign: "center",
                opacity: 0.5,
            } }, loadingPlaceholder)) : (loadingPlaceholder)))));
}
exports.CodeEditor = CodeEditor;
function decodeMessage(message) {
    try {
        var _a = JSON.parse(message), type = _a.type, payload = _a.payload;
        if (type) {
            return { type: type, payload: payload };
        }
    }
    catch (err) {
        // continue
    }
    return null;
}
function encodeMessage(type, payload) {
    return JSON.stringify({ type: type, payload: payload });
}
function useCommunication(iframeRef) { }
//# sourceMappingURL=CodeEditor.js.map