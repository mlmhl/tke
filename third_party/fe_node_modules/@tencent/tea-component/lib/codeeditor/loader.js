"use strict";
/* eslint-disable-next-line */
/// <reference path="../../node_modules/monaco-editor/monaco.d.ts" />
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bundle = process.env.NODE_ENV === "development" ? "dev" : "min";
var bundlePath = "https://imgcache.qq.com/qcloud/main/scripts/release/common/vendors/monaco-editor/" + bundle + "/";
var loaderPath = bundlePath + "/vs/loader.js";
var prepared = null;
/* eslint-disable dot-notation */
// eslint-disable-next-line no-undef
function prepareMonaco() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var workerCode, worker;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (prepared)
                        return [2 /*return*/, prepared];
                    if (!(typeof window["AMDLoader"] !== "object")) return [3 /*break*/, 2];
                    return [4 /*yield*/, prepareLoader()];
                case 1:
                    if (_a.sent()) {
                        return [2 /*return*/, prepareMonaco()];
                    }
                    throw new Error("Can not load monaco editor");
                case 2:
                    workerCode = "\n\t\tself.MonacoEnvironment = {\n\t\t\tbaseUrl: '" + bundlePath + "'\n\t\t};\n\t\timportScripts('" + bundlePath + "/vs/base/worker/workerMain.js');\n\t";
                    worker = URL.createObjectURL(new Blob([workerCode], {
                        type: "text/javascript",
                    }));
                    // eslint-disable-next-line no-undef
                    prepared = new Promise(function (resolve, reject) {
                        window["_amdreq"].config({
                            paths: {
                                vs: "https://imgcache.qq.com/qcloud/main/scripts/release/common/vendors/monaco-editor/" + bundle + "/vs",
                            },
                            "vs/nls": {
                                availableLanguages: {
                                    "vs/editor/editor.main": "zh-cn",
                                },
                            },
                        });
                        var timer = setTimeout(function () {
                            reject(new Error("Load editor script timeout"));
                        }, 5 * 1000);
                        // 手动指定worker路径为一个blob url
                        window["MonacoEnvironment"] = {
                            getWorkerUrl: function () { return worker; },
                        };
                        window["_amdreq"](["vs/editor/editor.main"], function () {
                            clearTimeout(timer);
                            if (window["monaco"]) {
                                var editorCss = document.querySelector('link[data-name="vs/editor/editor.main"]');
                                if (editorCss) {
                                    editorCss.setAttribute("data-role", "global");
                                }
                                resolve(window["monaco"]);
                            }
                            else {
                                reject(new Error("Init script error! global.monaco not found"));
                            }
                        });
                    });
                    return [2 /*return*/, prepared];
            }
        });
    });
}
exports.prepareMonaco = prepareMonaco;
var preparingLoader = null;
function prepareLoader() {
    preparingLoader =
        preparingLoader ||
            new Promise(function (resolve, reject) {
                var callback = function () {
                    if (typeof window["AMDLoader"] === "object" && window["AMDLoader"]) {
                        resolve(window["AMDLoader"]);
                    }
                    else {
                        reject(new Error("Cannot load AMDLoader"));
                    }
                };
                if (typeof window["seajs"] === "object" &&
                    window["seajs"] &&
                    window["seajs"].use) {
                    window["seajs"].use(loaderPath, callback);
                }
                else {
                    var script = document.createElement("script");
                    script.onload = callback;
                    script.onerror = callback;
                    script.src = loaderPath;
                    document.head.appendChild(script);
                }
            });
    return preparingLoader;
}
/* eslint-enable dot-notation */
//# sourceMappingURL=loader.js.map