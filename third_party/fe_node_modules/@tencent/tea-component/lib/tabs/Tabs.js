"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var is_child_of_type_1 = require("../_util/is-child-of-type");
var TabBar_1 = require("./TabBar");
var TabPanel_1 = require("./TabPanel");
var getHiddenPanelStyle = function (vertical) { return ({
    height: 0,
    width: 0,
    overflow: "hidden",
    opacity: 0,
    padding: 0,
    margin: 0,
    pointerEvents: "none",
    display: "block",
    transform: vertical ? "translate3d(10px, 0, 0)" : "translate3d(0, 10px, 0)",
}); };
var animatedPanelStyle = {
    transition: "opacity .45s ease, transform .45s ease",
    transformOrigin: "center",
};
var defaultTabBarRender = function (c) { return react_1.default.createElement("a", null, c); };
function Tabs(_a) {
    var _b;
    var _c = _a.tabs, tabs = _c === void 0 ? [] : _c, _d = _a.destroyInactiveTabPanel, destroyInactiveTabPanel = _d === void 0 ? true : _d, activeId = _a.activeId, onActive = _a.onActive, defaultActiveId = _a.defaultActiveId, children = _a.children, _e = _a.animated, animated = _e === void 0 ? true : _e, placement = _a.placement, ceiling = _a.ceiling, addon = _a.addon, maxHeight = _a.maxHeight, className = _a.className, style = _a.style, _f = _a.tabBarRender, tabBarRender = _f === void 0 ? defaultTabBarRender : _f;
    // 如果都没有定义，获取第一个没被禁用的选项卡 id
    if (typeof activeId === "undefined" &&
        typeof defaultActiveId === "undefined") {
        var firstAvaliable = tabs.find(function (x) { return !x.disabled; });
        // eslint-disable-next-line no-param-reassign
        defaultActiveId = firstAvaliable ? firstAvaliable.id : null;
    }
    // 注意 useState 是个 Hooks，不能写在 if 里面
    var _g = tslib_1.__read(react_1.useState(defaultActiveId), 2), internalActiveId = _g[0], setInternalActiveId = _g[1];
    // 非受控模式下，使用内部状态
    if (typeof activeId === "undefined") {
        // eslint-disable-next-line no-param-reassign
        activeId = internalActiveId;
        // eslint-disable-next-line no-param-reassign
        onActive = (function (onActive) { return function (tab, evt) {
            setInternalActiveId(tab.id);
            if (typeof onActive === "function") {
                onActive(tab, evt);
            }
        }; })(onActive);
    }
    var panelRenderedSetRef = react_1.useRef(new Set());
    function getTabPanels() {
        var panelRenderedSet = panelRenderedSetRef.current;
        var panelChildren = [];
        react_1.default.Children.forEach(children, function (child, index) {
            if (is_child_of_type_1.isChildOfType(child, TabPanel_1.TabPanel)) {
                var props = child.props, key = child.key;
                var _a = props.style, style_1 = _a === void 0 ? {} : _a, id = props.id;
                var active = activeId === props.id;
                if (active && !panelRenderedSet.has(activeId)) {
                    panelRenderedSet.add(activeId);
                }
                if (!active) {
                    Object.assign(style_1, getHiddenPanelStyle(placement === "left"));
                }
                if (animated) {
                    Object.assign(style_1, animatedPanelStyle);
                }
                if (child.props.forceRender ||
                    (destroyInactiveTabPanel && active) ||
                    (!destroyInactiveTabPanel && panelRenderedSet.has(props.id))) {
                    panelChildren.push(react_1.default.cloneElement(child, { key: key || id, style: style_1 }));
                }
                else {
                    panelChildren.push(react_1.default.createElement(TabPanel_1.TabPanel, { id: id, key: key || id, style: style_1 }));
                }
            }
            else if (react_1.default.isValidElement(child)) {
                panelChildren.push(react_1.default.cloneElement(child, { key: index }));
            }
            else {
                panelChildren.push(react_1.default.createElement("div", { key: index }, child));
            }
        });
        return panelChildren;
    }
    var containerClassName = classnames_1.default("tea-tabs", (_b = {
            // 垂直布局
            "tea-tabs--vertical": placement === "left",
            "tea-tabs--ceiling": ceiling
        },
        _b[className] = className,
        _b));
    return (react_1.default.createElement("div", { className: containerClassName, style: style },
        react_1.default.createElement(TabBar_1.TabBar, { tabs: tabs, activeId: activeId, onActive: onActive, addon: addon, vertical: placement === "left", maxHeight: maxHeight, tabBarRender: tabBarRender }),
        getTabPanels()));
}
exports.Tabs = Tabs;
//# sourceMappingURL=Tabs.js.map