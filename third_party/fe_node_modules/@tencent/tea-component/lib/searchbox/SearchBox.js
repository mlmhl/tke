"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var input_1 = require("../input");
var button_1 = require("../button");
var controlled_1 = require("../form/controlled");
var transition_1 = require("../transition");
var noop = function () { };
exports.SearchBox = react_1.forwardRef(function SearchBox(props, ref) {
    var _a, _b;
    var multiline = props.multiline, simple = props.simple, _c = props.onSearch, onSearch = _c === void 0 ? noop : _c, _d = props.onClear, onClear = _d === void 0 ? noop : _d, className = props.className, style = props.style, size = props.size, _inputProps = tslib_1.__rest(props, ["multiline", "simple", "onSearch", "onClear", "className", "style", "size"]);
    var inputBoxClassNames = classnames_1.default((_a = {
            "tea-search": true,
            "tea-search--multi": multiline,
            "tea-search--simple": simple
        },
        _a[className] = className,
        _a));
    var inputProps = controlled_1.useDefaultValue(_inputProps, "");
    // 需要使用到 inputRef，同时向外部暴露
    var inputRef = react_1.useRef(null);
    react_1.useImperativeHandle(ref, function () { return inputRef.current; });
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-form--search", (_b = {},
            _b["size-" + (size === "full" ? size + "-width" : size)] = size,
            _b)) },
        react_1.default.createElement("div", { className: inputBoxClassNames, style: style },
            react_1.default.createElement("div", { className: "tea-search__inner" },
                react_1.default.createElement(input_1.Input, tslib_1.__assign({ type: "search", multiline: multiline, baseClassName: "tea-input", className: "tea-input--search", onKeyDown: function (event) {
                        var keyCode = event.keyCode, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
                        if (keyCode === 27) {
                            event.preventDefault();
                            inputProps.onChange("", { event: event });
                            onClear();
                        }
                        // 回车处理 onSearch 逻辑
                        if (keyCode !== 13) {
                            return;
                        }
                        // 多行模式下，要按下 ctrl 或者 command
                        if (multiline && !metaKey && !ctrlKey) {
                            return;
                        }
                        event.preventDefault();
                        onSearch(inputProps.value);
                    } }, inputProps, { ref: inputRef }))),
            react_1.default.createElement(transition_1.ScaleTransition, { in: /\S/.test(inputProps.value) },
                react_1.default.createElement(button_1.Button, { icon: "dismiss", className: "tea-btn--dismiss", onClick: function (event) {
                        event.preventDefault();
                        inputProps.onChange("", { event: event });
                        onClear();
                        if (inputRef.current) {
                            inputRef.current.focus();
                        }
                    } })),
            react_1.default.createElement(button_1.Button, { icon: "search", className: "tea-btn--search", onClick: function (event) {
                    event.preventDefault();
                    onSearch(inputProps.value);
                } }))));
});
//# sourceMappingURL=SearchBox.js.map