"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_dropzone_1 = require("react-dropzone");
var uploadFile_1 = require("./uploadFile");
var uuid_1 = require("../_util/uuid");
var inject_value_1 = require("../_util/inject-value");
var is_callable_1 = require("../_util/is-callable");
function Upload(_a) {
    var action = _a.action, accept = _a.accept, maxSize = _a.maxSize, _b = _a.multiple, multiple = _b === void 0 ? false : _b, headers = _a.headers, data = _a.data, _c = _a.name, name = _c === void 0 ? "file" : _c, withCredentials = _a.withCredentials, _d = _a.beforeUpload, beforeUpload = _d === void 0 ? function () { return true; } : _d, _e = _a.onStart, onStart = _e === void 0 ? function () { return null; } : _e, onProgress = _a.onProgress, onSuccess = _a.onSuccess, onError = _a.onError, children = _a.children, className = _a.className, style = _a.style;
    var _f = tslib_1.__read(react_1.useState(false), 2), dragging = _f[0], setDragging = _f[1];
    var _g = react_dropzone_1.useDropzone({
        accept: accept,
        maxSize: maxSize,
        multiple: multiple,
        noClick: true,
        noKeyboard: true,
        onDrop: uploadFiles,
        onDragEnter: function () { return setDragging(true); },
        onDragLeave: function () { return setDragging(false); },
    }), getInputProps = _g.getInputProps, getRootProps = _g.getRootProps, open = _g.open;
    function uploadFiles(acceptedFiles, rejectedFiles) {
        var fileList = tslib_1.__spread(acceptedFiles, rejectedFiles);
        acceptedFiles.forEach(function (file) {
            file["id"] = uuid_1.uuid(); // eslint-disable-line dot-notation
            uploadFile(file, fileList, true);
        });
        rejectedFiles.forEach(function (file) {
            file["id"] = uuid_1.uuid(); // eslint-disable-line dot-notation
            uploadFile(file, fileList, false);
        });
        setDragging(false);
    }
    function uploadFile(file, fileList, isAccepted) {
        var couldUpload = beforeUpload(file, fileList, isAccepted);
        if (!couldUpload) {
            return;
        }
        setTimeout(function () { return request(file); }, 0);
    }
    function request(file) {
        var xhr = uploadFile_1.upload({
            action: action,
            filename: name,
            file: file,
            data: inject_value_1.injectValue(data)(file),
            headers: inject_value_1.injectValue(headers)(file),
            withCredentials: withCredentials,
            onProgress: onProgress,
            onSuccess: onSuccess,
            onError: onError,
        });
        onStart(file, { xhr: xhr });
    }
    return (react_1.default.createElement("span", { className: className, style: style },
        react_1.default.createElement("input", tslib_1.__assign({}, getInputProps())),
        is_callable_1.isCallable(children) ? (children({
            open: open,
            getDraggerProps: getRootProps,
            isDragging: dragging,
        })) : (react_1.default.createElement("span", { onClick: open }, children))));
}
exports.Upload = Upload;
Upload.defaultLabelAlign = "middle";
//# sourceMappingURL=Upload.js.map