"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var moment_1 = tslib_1.__importStar(require("moment"));
var BaseTable_1 = tslib_1.__importStar(require("./BaseTable"));
var i18n_1 = require("../../i18n");
function MonthTable(_a) {
    var current = _a.current, _b = _a.onCurrentChange, onCurrentChange = _b === void 0 ? function () { return null; } : _b, range = _a.range, _c = _a.onSelect, onSelect = _c === void 0 ? function () { return null; } : _c, _d = _a.onTypeChange, onTypeChange = _d === void 0 ? function () { return null; } : _d, _e = _a.cellStatus, cellStatus = _e === void 0 ? function () { return BaseTable_1.CellStatus.Common; } : _e, hideCaption = _a.hideCaption;
    var t = i18n_1.useTranslation();
    var year = current.year();
    function genTable() {
        return [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]];
    }
    function renderYear() {
        return (react_1.default.createElement("a", { className: "op-item", onClick: function () { return onTypeChange("year"); } }, current.format(t.yearFormat)));
    }
    var _f = tslib_1.__read(range || [null, null], 2), rangeMin = _f[0], rangeMax = _f[1];
    function isValid(date) {
        if (moment_1.isMoment(rangeMin) && rangeMin.isAfter(date, "month")) {
            return false;
        }
        if (moment_1.isMoment(rangeMax) && rangeMax.isBefore(date, "month")) {
            return false;
        }
        return true;
    }
    return (react_1.default.createElement(BaseTable_1.default, { type: "month", caption: !hideCaption && renderYear(), jumperOptions: {
            onNext: function () { return onCurrentChange(moment_1.default(current).add(1, "year")); },
            onPrev: function () { return onCurrentChange(moment_1.default(current).subtract(1, "year")); },
            onCurrent: function () { return onCurrentChange(moment_1.default()); },
            isCurrent: current.isSame(moment_1.default(), "year"),
            nextDisabled: moment_1.isMoment(rangeMax) &&
                rangeMax.isBefore(moment_1.default({ year: year, month: 0, date: 1 }).add(1, "year"), "month"),
            prevDisabled: moment_1.isMoment(rangeMin) &&
                rangeMin.isAfter(moment_1.default({ year: year, month: 0, date: 1 }).subtract(1, "day"), "month"),
            nextTitle: t.nextYear,
            prevTitle: t.prevYear,
            curTitle: t.curYear,
        } }, genTable().map(function (row, index) { return (react_1.default.createElement(BaseTable_1.default.Row, { key: index }, row.map(function (month) {
        var m = moment_1.default({ year: year, month: month });
        return (react_1.default.createElement(BaseTable_1.default.Cell, { key: month, name: moment_1.default.monthsShort(month), value: m, onSelect: onSelect, isNow: m.isSame(moment_1.default(), "month"), status: cellStatus(m), disabled: !isValid(m) }));
    }))); })));
}
exports.MonthTable = MonthTable;
//# sourceMappingURL=MonthTable.js.map