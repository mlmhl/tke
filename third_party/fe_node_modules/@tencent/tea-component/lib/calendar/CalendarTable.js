"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var moment_1 = tslib_1.__importStar(require("moment"));
var DateTable_1 = require("./tables/DateTable");
var BaseTable_1 = require("./tables/BaseTable");
var MonthTable_1 = require("./tables/MonthTable");
var ScaleTransition_1 = require("../transition/ScaleTransition");
var YearTable_1 = require("./tables/YearTable");
var TimeTable_1 = require("../timepicker/TimeTable");
var i18n_1 = require("../i18n");
/**
 * 动画参数
 */
var ZOMM_OUT = 1.04;
var ZOOM_IN = 1 / ZOMM_OUT;
/**
 * 获取当前时间选择范围
 */
function getTimeRange(value, range) {
    if (range === void 0) { range = [null, null]; }
    if (!Array.isArray(range) || !value) {
        return undefined;
    }
    var _a = tslib_1.__read(range, 2), min = _a[0], max = _a[1];
    var timeRange = [
        moment_1.default().startOf("day"),
        moment_1.default().endOf("day"),
    ];
    if (moment_1.isMoment(min) && value.isSame(min, "day")) {
        timeRange[0] = min;
    }
    if (moment_1.isMoment(max) && value.isSame(max, "day")) {
        timeRange[1] = max;
    }
    return timeRange;
}
exports.getTimeRange = getTimeRange;
function CalendarTable(_a) {
    var value = _a.value, onChange = _a.onChange, type = _a.type, onTypeChange = _a.onTypeChange, _b = _a.curViewMoment, curViewMoment = _b === void 0 ? moment_1.default() : _b, onCurViewMomentChange = _a.onCurViewMomentChange, range = _a.range, _c = _a.disabledDate, disabledDate = _c === void 0 ? function () { return true; } : _c, _d = _a.disabledTime, disabledTime = _d === void 0 ? function () { return ({}); } : _d, showTime = _a.showTime, rangeType = _a.rangeType, monthOnly = _a.monthOnly;
    var t = i18n_1.useTranslation();
    // 记录 Table 切换
    var prevTypeRef = react_1.useRef(null);
    var prevType = prevTypeRef.current;
    if (type === "month" || type === "date") {
        prevTypeRef.current = type;
    }
    var tableProps = {
        range: range,
        onTypeChange: onTypeChange,
        current: curViewMoment,
        onCurrentChange: onCurViewMomentChange,
    };
    var timeProps = typeof showTime === "object" ? showTime : {};
    function getValue() {
        if (!Array.isArray(value)) {
            return value;
        }
        if (rangeType === "start") {
            return value[0];
        }
        return value[1];
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(ScaleTransition_1.ScaleTransition, { in: type === "year", exit: false, from: ZOMM_OUT },
            react_1.default.createElement(YearTable_1.YearTable, tslib_1.__assign({}, tableProps, { onSelect: function (value) {
                    onCurViewMomentChange(moment_1.default(curViewMoment).year(value.year()));
                    onTypeChange(prevType || (monthOnly ? "date" : "month"));
                }, cellStatus: function (date) {
                    if (!Array.isArray(value)) {
                        if (moment_1.isMoment(value) && date.isSame(value, "year")) {
                            return BaseTable_1.CellStatus.Selected;
                        }
                    }
                    return BaseTable_1.CellStatus.Common;
                } }))),
        react_1.default.createElement(ScaleTransition_1.ScaleTransition, { in: type === "month", exit: false, from: prevType !== "date" ? ZOOM_IN : ZOMM_OUT },
            react_1.default.createElement(MonthTable_1.MonthTable, tslib_1.__assign({}, tableProps, { onSelect: function (value, context) {
                    onCurViewMomentChange(moment_1.default(curViewMoment).month(value.month()));
                    if (monthOnly) {
                        onChange(value, context);
                        return;
                    }
                    onTypeChange("date");
                }, cellStatus: function (date) {
                    if (!Array.isArray(value)) {
                        if (moment_1.isMoment(value) && date.isSame(value, "month")) {
                            return BaseTable_1.CellStatus.Selected;
                        }
                    }
                    return BaseTable_1.CellStatus.Common;
                } }))),
        react_1.default.createElement(ScaleTransition_1.ScaleTransition, { in: type === "date", exit: false, from: ZOOM_IN },
            react_1.default.createElement(DateTable_1.DateTable, tslib_1.__assign({}, tableProps, { value: getValue(), disabledDate: function (date) {
                    // 范围选择已选择 start，未选择 end
                    if (Array.isArray(value) &&
                        moment_1.isMoment(value[0]) &&
                        !moment_1.isMoment(value[1])) {
                        return disabledDate(date, value[0]);
                    }
                    return disabledDate(date);
                }, onSelect: function (v, context) {
                    // 单日选择
                    context.type = "date";
                    if (!Array.isArray(value)) {
                        return onChange(v, context);
                    }
                    // 范围选择
                    if (moment_1.isMoment(value[0]) && !moment_1.isMoment(value[1])) {
                        if (value[0].isBefore(v)) {
                            return onChange([value[0], v], context);
                        }
                        return onChange([v, value[0]], context);
                    }
                    return onChange([v, null], context);
                }, cellStatus: function (date) {
                    // 单日选择
                    if (!Array.isArray(value)) {
                        if (moment_1.isMoment(value) && date.isSame(value, "day")) {
                            return BaseTable_1.CellStatus.Selected;
                        }
                        return BaseTable_1.CellStatus.Common;
                    }
                    // 范围选择
                    if (moment_1.isMoment(value[0]) && date.isSame(value[0], "day")) {
                        // 只选中了开始或开始结束在同一天返回 Selected
                        if (!moment_1.isMoment(value[1])) {
                            return BaseTable_1.CellStatus.Selected;
                        }
                        if (value[0].isSame(value[1], "day")) {
                            return BaseTable_1.CellStatus.Selected;
                        }
                        return BaseTable_1.CellStatus.RangeStart;
                    }
                    if (moment_1.isMoment(value[1]) && date.isSame(value[1], "day")) {
                        return BaseTable_1.CellStatus.RangeEnd;
                    }
                    if (moment_1.isMoment(value[0]) && moment_1.isMoment(value[1])) {
                        if (value[0].isBefore(date) && value[1].isAfter(date)) {
                            return BaseTable_1.CellStatus.InRange;
                        }
                    }
                    return BaseTable_1.CellStatus.Common;
                } }))),
        react_1.default.createElement(ScaleTransition_1.ScaleTransition, { in: type === "time", exit: false, from: ZOMM_OUT },
            react_1.default.createElement(TimeTable_1.TimeTable, tslib_1.__assign({ caption: moment_1.isMoment(getValue()) ? getValue().format("L") : t.selectTime, value: getValue(), onChange: function (v, context) {
                    context.type = "time";
                    // 日期选择完才可选择时间，所以 value 必定合法
                    if (!Array.isArray(value)) {
                        return onChange(v, context);
                    }
                    if (rangeType === "start") {
                        return onChange([v, value[1]], context);
                    }
                    return onChange([value[0], v], context);
                }, range: getTimeRange(getValue(), range) }, disabledTime(value, rangeType) || {}, timeProps)))));
}
exports.CalendarTable = CalendarTable;
//# sourceMappingURL=CalendarTable.js.map