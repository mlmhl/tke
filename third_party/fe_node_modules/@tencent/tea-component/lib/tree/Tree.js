"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var TreeNode_1 = require("./TreeNode");
var checktree_1 = require("../checktree");
var TreeContext_1 = require("./TreeContext");
var use_default_1 = require("../_util/use-default");
var is_child_of_type_1 = require("../_util/is-child-of-type");
/**
 * CheckTree 转换
 *
 * 叶节点 -> 全部选中节点
 */
function getAllIds(selectedIds, relations, childrenMap) {
    var e_1, _a, e_2, _b;
    var nodes = tslib_1.__spread(selectedIds);
    try {
        // 插入缺失的父节点
        for (var nodes_1 = tslib_1.__values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
            var id = nodes_1_1.value;
            var pid = relations[id];
            var childrenSet = childrenMap.get(pid);
            // 加入子节点全部选中的父节点
            if (pid &&
                childrenSet &&
                !nodes.includes(pid) &&
                !tslib_1.__spread(childrenSet).find(function (cid) { return !nodes.includes(cid); })) {
                nodes.push(pid);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        // 插入缺失的子节点
        for (var nodes_2 = tslib_1.__values(nodes), nodes_2_1 = nodes_2.next(); !nodes_2_1.done; nodes_2_1 = nodes_2.next()) {
            var id = nodes_2_1.value;
            var children = tslib_1.__spread((childrenMap.get(id) || []));
            children.forEach(function (cid) {
                if (!nodes.includes(cid)) {
                    nodes.push(cid);
                }
            });
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (nodes_2_1 && !nodes_2_1.done && (_b = nodes_2.return)) _b.call(nodes_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return nodes;
}
/**
 * CheckTree 转换
 *
 * 全部选中节点 -> 叶节点
 */
function getLeafIds(selectedIds, relations, childrenMap) {
    var all = getAllIds(selectedIds, relations, childrenMap);
    var nodes = [];
    all.forEach(function (id) {
        if (!childrenMap.get(id)) {
            nodes.push(id);
        }
    });
    return nodes;
}
function isTreeNode(node) {
    return is_child_of_type_1.isChildOfType(node, TreeNode_1.TreeNode);
}
exports.isTreeNode = isTreeNode;
/**
 * 遍历子节点
 */
function traverse(rootId, children, tree) {
    if (!children) {
        return;
    }
    var relations = tree.relations, childrenMap = tree.childrenMap, disabledIds = tree.disabledIds;
    react_1.default.Children.forEach(children, function (child) {
        if (isTreeNode(child)) {
            var _a = child.props, id = _a.id, selectable = _a.selectable, disableSelect = _a.disableSelect;
            if (selectable !== false) {
                // 非最外层根
                if (rootId) {
                    relations[id] = rootId;
                    if (!childrenMap.has(rootId)) {
                        childrenMap.set(rootId, new Set());
                    }
                    childrenMap.get(rootId).add(id);
                }
                // 禁用
                if (disableSelect) {
                    disabledIds.push(id);
                }
            }
            // 当前结点不可选时其子结点 rootId 为当前 rootId
            traverse(selectable !== false ? id : rootId, child.props.children, tree);
        }
        else if (react_1.default.isValidElement(child)) {
            // eslint-disable-next-line dot-notation
            traverse(rootId, child.props["children"], tree);
        }
    });
}
/**
 * 构造树节点
 */
function renderTreeNodes(data) {
    return data.map(function (_a) {
        var children = _a.children, id = _a.id, props = tslib_1.__rest(_a, ["children", "id"]);
        if (children) {
            return (react_1.default.createElement(TreeNode_1.TreeNode, tslib_1.__assign({ key: id, id: id }, props), renderTreeNodes(children)));
        }
        return react_1.default.createElement(TreeNode_1.TreeNode, tslib_1.__assign({ key: id, id: id }, props));
    });
}
function Tree(_a) {
    var data = _a.data, children = _a.children, props = tslib_1.__rest(_a, ["data", "children"]);
    var nodes = data ? renderTreeNodes(data) : children;
    return react_1.default.createElement(TreeView, tslib_1.__assign({}, props), nodes);
}
exports.Tree = Tree;
function TreeView(_a) {
    var selectable = _a.selectable, selectStrictly = _a.selectStrictly, selectedIds = _a.selectedIds, _b = _a.defaultSelectedIds, defaultSelectedIds = _b === void 0 ? [] : _b, onSelect = _a.onSelect, activable = _a.activable, activeIds = _a.activeIds, _c = _a.defaultActiveIds, defaultActiveIds = _c === void 0 ? [] : _c, onActive = _a.onActive, expandedIds = _a.expandedIds, _d = _a.defaultExpandedIds, defaultExpandedIds = _d === void 0 ? [] : _d, _e = _a.onExpand, onExpand = _e === void 0 ? function () { return null; } : _e, onLoad = _a.onLoad, onLoadError = _a.onLoadError, switcherIcon = _a.switcherIcon, className = _a.className, style = _a.style, children = _a.children;
    var childrenMap = react_1.useRef(new Map());
    var _f = tslib_1.__read(react_1.useState({}), 2), relations = _f[0], setRelations = _f[1];
    var _g = tslib_1.__read(react_1.useState([]), 2), disabledIds = _g[0], setDisabledIds = _g[1];
    var _h = tslib_1.__read(use_default_1.useDefault(selectedIds, defaultSelectedIds, onSelect), 2), selectedNodes = _h[0], setSelectedNodes = _h[1];
    var _j = tslib_1.__read(use_default_1.useDefault(activeIds, defaultActiveIds, onActive), 2), activeNodes = _j[0], setActiveNodes = _j[1];
    var _k = tslib_1.__read(use_default_1.useDefault(expandedIds, defaultExpandedIds, onExpand), 2), expandedNodes = _k[0], setExpandedNodes = _k[1];
    react_1.useEffect(function () {
        var relations = {};
        var disabledIds = [];
        childrenMap.current = new Map();
        if (selectable && !selectStrictly) {
            traverse(undefined, children, {
                relations: relations,
                childrenMap: childrenMap.current,
                disabledIds: disabledIds,
            });
            setRelations(relations);
            setDisabledIds(disabledIds);
        }
    }, [children, selectStrictly, selectable]);
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-tree", className), style: style },
        react_1.default.createElement(TreeContext_1.TreeContext.Provider, { value: {
                selectable: selectable,
                activable: activable,
                activeIds: activeNodes,
                expandedIds: expandedNodes,
                onActive: function (activeId) {
                    return setActiveNodes([activeId], { active: true, nodeId: activeId });
                },
                onExpand: function (nodeId, expanded) {
                    return setExpandedNodes(expanded
                        ? tslib_1.__spread(expandedNodes, [nodeId]) : expandedNodes.filter(function (id) { return id !== nodeId; }), { nodeId: nodeId, expanded: expanded });
                },
                onLoad: onLoad,
                onLoadError: onLoadError,
                switcherIcon: switcherIcon,
            } },
            react_1.default.createElement("ul", null, selectable ? (react_1.default.createElement(checktree_1.CheckTree, { relations: relations, value: getLeafIds(selectedNodes, relations, childrenMap.current), onChange: function (value, _a) {
                    var check = _a.check;
                    return setSelectedNodes(getAllIds(value, relations, childrenMap.current), { nodeId: check.name, selected: check.value });
                }, disabledNames: disabledIds }, children)) : (children)))));
}
exports.TreeView = TreeView;
Tree.Node = TreeNode_1.TreeNode;
//# sourceMappingURL=Tree.js.map