"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var EmptyTip_1 = require("../tips/EmptyTip");
var _chart_1 = tslib_1.__importDefault(require("../_chart"));
var use_resize_1 = require("../_util/use-resize");
function BasicBar(props) {
    var height = props.height, width = props.width, tips = props.tips, dataSource = props.dataSource, position = props.position, size = props.size, scale = props.scale, _a = props.tooltip, tooltip = _a === void 0 ? true : _a, color = props.color, _b = props.legend, legend = _b === void 0 ? !!color : _b, _c = props.xAxis, xAxis = _c === void 0 ? true : _c, _d = props.yAxis, yAxis = _d === void 0 ? true : _d, _e = props.tipsStyle, tipsStyle = _e === void 0 ? {} : _e;
    var container = react_1.useRef(null);
    var chartRef = react_1.useRef();
    var barRef = react_1.useRef();
    react_1.useEffect(function () {
        chartRef.current = new _chart_1.default(container.current);
        barRef.current = chartRef.current.bar();
        return function () {
            chartRef.current.destroy();
        };
    }, []);
    react_1.useEffect(function () {
        var xAxes = typeof xAxis === "boolean" ? { enable: xAxis } : xAxis;
        var yAxes = typeof yAxis === "boolean" ? { enable: yAxis } : yAxis;
        chartRef.current
            .source(dataSource)
            .scale(scale)
            .tooltip(tooltip)
            .legend(legend);
        barRef.current
            .position(position)
            .color(color)
            .size(size)
            .axis({ xAxes: xAxes, yAxes: yAxes });
        chartRef.current.render();
    }, [color, dataSource, legend, position, scale, size, tooltip, xAxis, yAxis]);
    use_resize_1.useResize(function () {
        chartRef.current.resize();
    });
    var showStatus = tips || !Array.isArray(dataSource) || dataSource.length === 0;
    return (react_1.default.createElement("div", { style: { height: height, width: width, position: "relative" } },
        showStatus && (react_1.default.createElement("div", { className: "tea-chart-status", style: tslib_1.__assign({ position: "absolute", top: 0, left: 0, right: 0, bottom: 0, textAlign: "center", lineHeight: height + "px", background: "#F2F2F2", zIndex: 999 }, tipsStyle) }, tips || react_1.default.createElement(EmptyTip_1.EmptyTip, null))),
        react_1.default.createElement("div", { style: { height: "100%", width: "100%", position: "relative" }, ref: container })));
}
exports.BasicBar = BasicBar;
//# sourceMappingURL=BasicBar.js.map