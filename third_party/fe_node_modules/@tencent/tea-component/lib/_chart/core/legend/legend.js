"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var svg_helper_1 = require("../lib/svg-helper");
var Legend = /** @class */ (function () {
    function Legend(ctx) {
        /**
         * 不显示的数据系列
         */
        this.disabledKeys = [];
        this.ctx = ctx;
        var _a = this.ctx.plot, height = _a.height, _b = _a.padding, top = _b.top, bottom = _b.bottom;
        this.legend = this.ctx.view
            .append("g")
            .classed("legend", true)
            .attr("transform", "translate(0," + (height + top + bottom + 20) + ")");
        this.ctx.on("coordinate-updated", this.updateLegendData.bind(this));
    }
    Legend.prototype.updateLegendData = function (nestData, yKey) {
        var e_1, _a;
        if (!this.ctx.legend.enable)
            return;
        var alias = this.ctx.scale[yKey] && this.ctx.scale[yKey].alias;
        var legendData = [];
        try {
            for (var _b = tslib_1.__values(nestData.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = tslib_1.__read(_c.value, 2), i = _d[0], d = _d[1];
                var label = alias || (d.key === "undefined" ? yKey : d.key);
                legendData.push({
                    label: label,
                    color: d.value,
                    index: i,
                    raw: d,
                    key: d.key,
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.draw(legendData);
    };
    /**
     * 绘制图例
     * @param nestData 结构化数据
     * @param yKey Y 轴映射字段名
     */
    Legend.prototype.draw = function (legendData) {
        var _this = this;
        var _a = this.ctx.theme.legend, rect = _a.rect, text = _a.text;
        this.legend.selectAll(".legend-item").remove();
        var items = this.legend
            .selectAll(".legend-item")
            .data(legendData, function (d) { return d.label; });
        var enter = items
            .enter()
            .append("g")
            .attr("class", "legend-item")
            .style("cursor", "pointer")
            .call(function (g) {
            g.append("rect")
                .attr("width", rect.width)
                .attr("height", rect.height)
                .attr("y", -text.fontSize / 2);
            g.append("text")
                .attr("x", rect.width + 5)
                .attr("font-size", text.fontSize + "px")
                .text(function (d, i) {
                var formatter = _this.ctx.legend.formatter;
                var text = d.label;
                if (formatter) {
                    text = formatter(d.label, i, legendData.length - 1 === i);
                }
                return text;
            });
        });
        var offset = 0; // 每个图例的 X 偏移量
        items
            .merge(enter)
            .attr("transform", function setItemOffset() {
            var x = offset;
            offset += svg_helper_1.nodeWidth(this) + 30;
            return "translate(" + x + ", 0)";
        })
            .on("mouseenter", this.onLegendItemHover.bind(this))
            .on("mouseleave", this.onLegendItemLeft.bind(this))
            .on("click", this.onLegendItemClick.bind(this))
            .call(function (g) {
            g.selectAll("rect").attr("fill", function (d) {
                return _this.disabledKeys.find(function (k) { return k === d.key; })
                    ? text.disabledColor
                    : d.color;
            });
            g.selectAll("text").attr("fill", function (d) {
                return _this.disabledKeys.find(function (k) { return k === d.key; })
                    ? text.disabledColor
                    : text.color;
            });
        });
        this.setPosition();
    };
    /**
     * 当绘图区渲染完成之后，再定位 Legend 坐标
     */
    Legend.prototype.setPosition = function () {
        var _this = this;
        this.legend.attr("transform", function () {
            var _a = _this.ctx.plot, width = _a.width, height = _a.height;
            var _b = _this.ctx.plot.padding, top = _b.top, bottom = _b.bottom;
            var legendWidth = svg_helper_1.nodeWidth(_this.legend.node());
            var x = Math.floor(width / 2) - Math.floor(legendWidth / 2);
            return "translate(" + x + ", " + (height + top + bottom + 20) + ")";
        });
    };
    Legend.prototype.onLegendItemHover = function (legendData) {
        // 被禁用的元素不需要触发 Hover 事件
        if (this.disabledKeys.includes(legendData.key))
            return;
        this.ctx.emit("legend.hover", legendData);
    };
    Legend.prototype.onLegendItemLeft = function (legendData) {
        this.ctx.emit("legend.left", legendData);
    };
    Legend.prototype.onLegendItemClick = function (legendData) {
        var key = legendData.key;
        var disabled = this.disabledKeys.findIndex(function (k) { return k === key; }) !== -1;
        var data = this.legend.selectAll(".legend-item").data();
        var index = data.findIndex(function (d) { return d.key === key; });
        if (disabled) {
            this.disabledKeys = this.disabledKeys.filter(function (k) { return k !== key; });
        }
        else {
            this.disabledKeys.push(key);
        }
        this.draw(data);
        this.ctx.emit("legend.clicked", data[index], !disabled);
        this.onLegendItemLeft(legendData);
    };
    return Legend;
}());
exports.Legend = Legend;
//# sourceMappingURL=legend.js.map