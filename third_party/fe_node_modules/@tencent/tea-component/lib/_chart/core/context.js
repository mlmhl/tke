"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var eventemitter3_1 = tslib_1.__importDefault(require("eventemitter3"));
var d3_1 = require("d3");
var theme_1 = require("../theme");
var Context = /** @class */ (function (_super) {
    tslib_1.__extends(Context, _super);
    function Context(root, cfg) {
        if (cfg === void 0) { cfg = {}; }
        var _this = _super.call(this) || this;
        /**
         * 主题
         */
        _this.theme = theme_1.Tea();
        /**
         * 数据表
         */
        _this.dataSource = [];
        /**
         * 绘图区
         */
        _this.plot = {};
        /**
         * 图例区
         */
        _this.legend = {
            enable: true,
        };
        /**
         * 自定义轴操作
         */
        _this.axis = {
            xAxes: { enable: true },
            yAxes: { enable: true },
        };
        /**
         * 比例尺，比例尺用以限定值域范围等
         */
        _this.scale = {};
        /**
         * 提示框
         */
        _this.tooltip = {
            enable: true,
        };
        if (typeof cfg === "object") {
            for (var key in cfg) {
                if (Object.prototype.hasOwnProperty.call(cfg, key)) {
                    _this.theme[key] = cfg[key];
                }
            }
        }
        _this.root = root;
        _this.view = d3_1.select(_this.root).append("svg");
        // 创建绘图区
        _this.plot.selection = _this.view
            .append("g")
            .classed("plot", true)
            .style("position", "relative");
        _this.plot.padding = _this.theme.padding;
        _this.setSize();
        return _this;
    }
    Context.prototype.setSize = function () {
        var _a = window.getComputedStyle(this.root), width = _a.width, height = _a.height;
        var _b = this.plot.padding, left = _b.left, right = _b.right, top = _b.top, bottom = _b.bottom;
        var plotWidthOffset = left + right;
        var plotHeightOffset = this.legend.enable
            ? top + bottom + this.theme.legend.height
            : top + bottom;
        this.view.attr("viewBox", "0, 0, " + parseInt(width, 10) + ", " + parseInt(height, 10));
        this.plot.width = parseInt(width, 10) - plotWidthOffset;
        this.plot.height = parseInt(height, 10) - plotHeightOffset - 5;
        this.plot.selection.attr("transform", "translate(" + left + "," + top + ")");
    };
    Context.prototype.setScale = function (scale) {
        this.scale = scale;
    };
    Context.prototype.setSource = function (dataSource) {
        this.dataSource = dataSource;
    };
    Context.prototype.setTooltip = function (cfg) {
        for (var key in cfg) {
            if (Object.prototype.hasOwnProperty.call(cfg, key)) {
                this.tooltip[key] = cfg[key];
            }
        }
    };
    Context.prototype.setAxis = function (axis) {
        this.axis = axis;
    };
    Context.prototype.setLegend = function (cfg) {
        for (var key in cfg) {
            if (Object.prototype.hasOwnProperty.call(cfg, key)) {
                this.legend[key] = cfg[key];
            }
        }
    };
    Context.prototype.getColor = function (key, index, isLast) {
        if (typeof this.theme.color === "function") {
            return this.theme.color(key, index, isLast);
        }
        var len = this.theme.color.length;
        return this.theme.color[index % len];
    };
    return Context;
}(eventemitter3_1.default));
exports.Context = Context;
//# sourceMappingURL=context.js.map