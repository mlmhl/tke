"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var d3_1 = require("d3");
var shape_1 = require("../shape");
var Line = /** @class */ (function (_super) {
    tslib_1.__extends(Line, _super);
    function Line(ctx, coordinate) {
        var _this = _super.call(this, ctx) || this;
        /**
         * 线的粗细
         */
        _this.lineWidth = 3;
        _this.coordinate = coordinate;
        _this.line = _this.ctx.plot.selection.append("g").lower();
        _this.coordinate.xAxis.lower();
        _this.coordinate.yAxis.lower();
        _this.ctx.on("coordinate.helper.show", _this.showHoverPoint.bind(_this));
        _this.ctx.on("coordinate.helper.hide", _this.hideHoverPoint.bind(_this));
        _this.ctx.on("legend.hover", _this.onLegendItemHover.bind(_this));
        _this.ctx.on("legend.left", _this.onLegendItemLeft.bind(_this));
        return _this;
    }
    /**
     * 设置数据映射
     * @param pos 同 chart.position
     */
    Line.prototype.position = function (pos) {
        if (typeof pos === "string") {
            var _a = tslib_1.__read(pos.split("*"), 2), xName = _a[0], yName = _a[1];
            this.coordinate.setPosition(xName, yName);
        }
        return this;
    };
    /**
     * 以颜色来作为数据映射
     * @param color 字段名
     */
    Line.prototype.color = function (color) {
        if (color) {
            if (typeof color === "string") {
                this.coordinate.setSerie(color);
            }
            else if (typeof color === "object" && color.key) {
                var key = color.key, formatter = color.formatter, colors = color.colors;
                this.coordinate.setSerie(key);
                if (formatter || colors) {
                    this.ctx.theme.color = formatter || colors;
                }
            }
        }
        return this;
    };
    /**
     * 设置线条的粗细
     * @param size 粗细值
     */
    Line.prototype.size = function (size) {
        this.lineWidth = size;
        return this;
    };
    /**
     * 设置坐标轴配置
     * @param axis 坐标轴配置
     */
    Line.prototype.axis = function (axis) {
        var newCfg = {};
        for (var axisName in axis) {
            if (Object.prototype.hasOwnProperty.call(axis, axisName)) {
                var cfg = axis[axisName];
                newCfg[axisName] = Object.assign({}, this.ctx.axis[axisName], cfg);
            }
        }
        this.ctx.setAxis(newCfg);
        return this;
    };
    /**
     * 开始绘图
     *
     * @param highlightIndex 高亮的索引值
     */
    Line.prototype.draw = function (highlightIndex) {
        var _a = this.coordinate, xScale = _a.xScale, yScale = _a.yScale, xKey = _a.xKey, yKey = _a.yKey, nestedData = _a.nestedData;
        // @ts-ignore
        var lineInstance = d3_1.line()
            .defined(function (d) { return typeof d[yKey] === "number"; })
            .y(function (d) { return yScale(d[yKey]); })
            .x(function (d) { return xScale(d[xKey]); });
        this.line
            .attr("fill", "none")
            .attr("stroke-linejoin", "round")
            .attr("stroke-linecap", "round")
            .selectAll("path")
            .data(nestedData)
            .join("path")
            .attr("stroke", function (d, i) {
            if (highlightIndex === undefined || highlightIndex === i) {
                return d.value;
            }
            return "#ECECEC";
        })
            .attr("stroke-width", this.lineWidth)
            .attr("d", function (d) { return lineInstance(d.values); })
            .call(function (g) {
            // 将高亮的线放置最前端
            g.each(function order(_, index) {
                if (index === highlightIndex) {
                    d3_1.select(this).raise();
                }
            });
        });
        this.drawHoverPoint();
        return this;
    };
    /**
     * 绘制辅助点
     */
    Line.prototype.drawHoverPoint = function () {
        var _a = this.coordinate, helperLayout = _a.helperLayout, nestedData = _a.nestedData;
        helperLayout
            .append("path")
            .attr("class", "hover-line")
            .style("stroke", "#ECECEC")
            .style("stroke-width", 1)
            .style("opacity", "0");
        var hoverHelper = helperLayout
            .selectAll(".line-hover-helper")
            .data(nestedData)
            .join("g")
            .attr("class", "line-hover-helper");
        hoverHelper.selectAll("circle").remove();
        hoverHelper
            .append("circle")
            .attr("r", 4)
            .style("stroke", function (d) { return d.value; })
            .style("fill", "#FFF")
            .style("stroke-width", 2)
            .style("opacity", "0");
    };
    /**
     * 显示辅助点
     * @param xPos x 坐标
     * @param index 行索引
     */
    Line.prototype.showHoverPoint = function (_a) {
        var _this = this;
        var xPos = _a.xPos, index = _a.index;
        var _b = this.coordinate, helperLayout = _b.helperLayout, yScale = _b.yScale, yKey = _b.yKey;
        helperLayout
            .select(".hover-line")
            .attr("d", function () {
            return "M" + xPos + "," + _this.ctx.plot.height + " " + xPos + ",0";
        })
            .style("opacity", "1");
        helperLayout
            .selectAll(".line-hover-helper circle")
            .style("opacity", function (d) {
            var value = d.values[index][yKey];
            return value === null ? "0" : "1";
        });
        helperLayout
            .selectAll(".line-hover-helper")
            .attr("transform", function (d) {
            var yPos = yScale(d.values[index][yKey]);
            return "translate(" + xPos + "," + yPos + ")";
        });
    };
    /**
     * 隐藏辅助点
     */
    Line.prototype.hideHoverPoint = function () {
        this.coordinate.helperLayout
            .selectAll(".line-hover-helper circle")
            .style("opacity", "0");
        this.coordinate.helperLayout.select(".hover-line").style("opacity", "0");
    };
    Line.prototype.onLegendItemHover = function (legendData) {
        var index = legendData.index;
        this.draw(index);
    };
    Line.prototype.onLegendItemLeft = function () {
        this.draw();
    };
    return Line;
}(shape_1.Shape));
exports.Line = Line;
//# sourceMappingURL=line.js.map