"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var d3_1 = require("d3");
var shape_1 = require("../shape");
var Bar = /** @class */ (function (_super) {
    tslib_1.__extends(Bar, _super);
    function Bar(ctx, coordinate) {
        var _this = _super.call(this, ctx) || this;
        _this.coordinate = coordinate;
        _this.bar = _this.ctx.plot.selection
            .append("g")
            .attr("class", "shape-bar")
            .lower();
        _this.coordinate.xAxis.lower();
        _this.coordinate.yAxis.lower();
        _this.coordinate.setXScaleType("Band");
        _this.coordinate.helperLayout
            .append("rect")
            .attr("class", "hover-band")
            .style("fill", "#000")
            .style("opacity", "0");
        _this.ctx.on("coordinate.helper.show", _this.showHoverBand.bind(_this));
        _this.ctx.on("coordinate.helper.hide", _this.hideHoverBand.bind(_this));
        _this.ctx.on("legend.hover", _this.onLegendItemHover.bind(_this));
        _this.ctx.on("legend.left", _this.onLegendItemLeft.bind(_this));
        return _this;
    }
    Bar.prototype.position = function (pos) {
        if (typeof pos === "string") {
            var _a = tslib_1.__read(pos.split("*"), 2), xName = _a[0], yName = _a[1];
            this.coordinate.setPosition(xName, yName);
        }
        return this;
    };
    Bar.prototype.size = function (size) {
        this.barWidth = size;
        return this;
    };
    Bar.prototype.color = function (color) {
        if (color) {
            if (typeof color === "string") {
                this.coordinate.setSerie(color);
            }
            else if (typeof color === "object" && color.key) {
                var key = color.key, formatter = color.formatter, colors = color.colors;
                this.coordinate.setSerie(key);
                if (formatter || colors) {
                    this.ctx.theme.color = formatter || colors;
                }
            }
        }
        return this;
    };
    Bar.prototype.axis = function (axis) {
        var newCfg = {};
        for (var axisName in axis) {
            if (Object.prototype.hasOwnProperty.call(axis, axisName)) {
                var cfg = axis[axisName];
                newCfg[axisName] = Object.assign({}, this.ctx.axis[axisName], cfg);
            }
        }
        this.ctx.setAxis(newCfg);
        return this;
    };
    Bar.prototype.draw = function (highlightIndex) {
        var _this = this;
        var _a = this.coordinate, xScale = _a.xScale, yScale = _a.yScale, xKey = _a.xKey, yKey = _a.yKey, nestedData = _a.nestedData;
        var axisScale = xScale[0];
        var serieScale = xScale[1];
        var data = this.ctx.dataSource;
        var cats = this.bar
            .selectAll("g")
            .data(data)
            .join("g")
            .attr("transform", function (d) { return "translate(" + (axisScale(d[xKey]) || 0) + ",0)"; });
        cats.nodes().forEach(function (cat, index) {
            d3_1.select(cat)
                .selectAll("rect")
                .data(nestedData)
                .join("rect")
                .attr("fill", function (d, i) {
                if (highlightIndex === undefined || highlightIndex === i) {
                    return d.value;
                }
                return "#ECECEC";
            })
                .attr("width", _this.barWidth || serieScale.bandwidth())
                .attr("x", function (d) { return serieScale(d.key); })
                .attr("y", function (d) {
                var row = d.values[index] || {};
                return yScale(row[yKey] || 0);
            })
                .attr("height", function (d) {
                var row = d.values[index] || {};
                return yScale(0) - yScale(row[yKey] || 0);
            });
        });
        return this;
    };
    Bar.prototype.showHoverBand = function (_a) {
        var xPos = _a.xPos;
        var height = this.ctx.plot.height;
        var _b = this.coordinate, xScale = _b.xScale, helperLayout = _b.helperLayout;
        var _c = tslib_1.__read(xScale, 1), axisScale = _c[0];
        var bandwidth = axisScale.bandwidth();
        var padding = axisScale.padding() * bandwidth;
        var width = bandwidth < padding ? bandwidth : bandwidth + padding;
        var x = bandwidth < padding ? xPos : xPos - padding / 2;
        helperLayout
            .select(".hover-band")
            .attr("width", width)
            .attr("height", height)
            .attr("transform", "translate(" + x + ",0)")
            .style("opacity", "0.05");
    };
    Bar.prototype.hideHoverBand = function () {
        this.coordinate.helperLayout.selectAll(".hover-band").style("opacity", "0");
    };
    Bar.prototype.onLegendItemHover = function (legendData) {
        var index = legendData.index;
        this.draw(index);
    };
    Bar.prototype.onLegendItemLeft = function () {
        this.draw();
    };
    return Bar;
}(shape_1.Shape));
exports.Bar = Bar;
//# sourceMappingURL=bar.js.map