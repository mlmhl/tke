"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var context_1 = require("./context");
var rect_1 = require("./coordinate/rect");
var shape_1 = require("./shape");
var unique_id_1 = tslib_1.__importDefault(require("./lib/unique-id"));
var event_1 = require("./event");
var tooltip_1 = require("./tooltip/tooltip");
var legend_1 = require("./legend/legend");
var Chart = /** @class */ (function () {
    function Chart(root) {
        /**
         * 图形实例
         */
        this.shapes = {};
        this.ctx = new context_1.Context(root);
        this.rectCoordinate = new rect_1.RectCoordinate(this.ctx);
        this.event = new event_1.EventListener(this.ctx);
        this.tooltipInstance = new tooltip_1.Tooltip(this.ctx);
        this.legendInstance = new legend_1.Legend(this.ctx);
    }
    /**
     * 设置数据源，转化为标准数据对象 MetaData
     * @param dataSource 原始数据源
     * @param scaleConfig 列定义设置
     */
    Chart.prototype.source = function (dataSource) {
        this.ctx.setSource(dataSource);
        return this;
    };
    /**
     * 设置数据源的列
     * @param scale 列定义
     */
    Chart.prototype.scale = function (scale) {
        if (scale) {
            this.ctx.setScale(scale);
        }
        return this;
    };
    /**
     * 设置提示框
     * @param enable 是否显示提示框
     * @param tooltipCfg 提示框配置
     */
    Chart.prototype.tooltip = function (enable, tooltipCfg) {
        if (tooltipCfg === void 0) { tooltipCfg = {}; }
        var cfg = typeof enable === "boolean" ? tslib_1.__assign({ enable: enable }, tooltipCfg) : enable;
        cfg.enable = typeof cfg.enable === "boolean" ? cfg.enable : true;
        this.ctx.setTooltip(cfg);
        return this;
    };
    /**
     * 设置图例
     * @param enable 是否显示图例
     * @param legendCfg 图例配置
     */
    Chart.prototype.legend = function (enable, legendCfg) {
        if (legendCfg === void 0) { legendCfg = {}; }
        var cfg = typeof enable === "boolean" ? tslib_1.__assign({ enable: enable }, legendCfg) : enable;
        cfg.enable = typeof cfg.enable === "boolean" ? cfg.enable : true;
        this.ctx.setLegend(cfg);
        return this;
    };
    /**
     * 创建折线图实例
     */
    Chart.prototype.line = function () {
        var name = unique_id_1.default("shape_line_");
        this.shapes[name] = new shape_1.Line(this.ctx, this.rectCoordinate);
        return this.shapes[name];
    };
    Chart.prototype.bar = function () {
        var name = unique_id_1.default("shape_bar_");
        this.shapes[name] = new shape_1.Bar(this.ctx, this.rectCoordinate);
        return this.shapes[name];
    };
    /**
     * 开始渲染
     */
    Chart.prototype.render = function () {
        var e_1, _a;
        this.ctx.setSize();
        this.rectCoordinate.update();
        try {
            for (var _b = tslib_1.__values(Object.values(this.shapes)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var shape = _c.value;
                shape.draw();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * 重置尺寸
     */
    Chart.prototype.resize = function () {
        var _this = this;
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(function () {
            _this.ctx.setSize();
            _this.render();
        }, 500);
    };
    /**
     * 销毁图表实例
     */
    Chart.prototype.destroy = function () {
        this.ctx.removeAllListeners();
    };
    return Chart;
}());
exports.Chart = Chart;
//# sourceMappingURL=chart.js.map