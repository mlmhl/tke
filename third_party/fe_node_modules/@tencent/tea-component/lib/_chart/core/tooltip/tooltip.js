"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var d3_1 = require("d3");
var tooltip_helper_1 = require("./tooltip-helper");
var escape_1 = require("../lib/escape");
var Tooltip = /** @class */ (function () {
    function Tooltip(ctx) {
        this.ctx = ctx;
        this.tooltip = d3_1.select(this.ctx.root)
            .append("div")
            .classed("tea-chart-tooltip", true)
            .style("position", "absolute")
            .style("display", "none")
            .style("padding", "15px")
            .style("z-index", 99)
            .style("background", "#FFF")
            .style("white-space", "nowrap")
            .style("box-shadow", "0px 4px 8px 0px rgba(0, 0, 0, 0.15)");
        this.ctx.on("coordinate.helper.show", this.show.bind(this));
        this.ctx.on("coordinate.helper.hide", this.hide.bind(this));
    }
    /**
     * 显示提示框
     */
    Tooltip.prototype.show = function (_a) {
        var x = _a.x, y = _a.y, xPos = _a.xPos, metaData = _a.metaData, index = _a.index, type = _a.type;
        var formatter = this.ctx.tooltip.formatter;
        var _b = tslib_1.__read(metaData, 1), title = _b[0].title;
        var content = tooltip_helper_1.getTooltipContent(title, metaData);
        if (typeof formatter === "function") {
            var formatted = formatter(metaData, index);
            if (typeof formatted === "string") {
                content = formatted;
            }
            else {
                var _c = tslib_1.__read(formatted, 1), title_1 = _c[0].title;
                content = tooltip_helper_1.getTooltipContent(title_1, formatted);
            }
        }
        this.tooltip
            .html(escape_1.escapeHTML(content))
            .style("display", "block")
            .transition()
            .duration(60);
        var offset = 10;
        var fixedX = type === "Band" ? x : xPos;
        var _d = window.getComputedStyle(this.tooltip.node()), height = _d.height, width = _d.width;
        var w = parseInt(width, 10);
        var h = parseInt(height, 10);
        var plot = this.ctx.plot;
        // 设置水平方向位置
        if (fixedX + w > plot.width) {
            this.tooltip.style("right", plot.width - fixedX + 2 * offset + "px");
            this.tooltip.style("left", "unset");
        }
        else {
            this.tooltip.style("right", "unset");
            this.tooltip.style("left", fixedX + plot.padding.left + offset + "px");
        }
        this.tooltip.style("top", y + offset + "px");
    };
    /**
     * 隐藏提示框
     */
    Tooltip.prototype.hide = function () {
        this.tooltip.style("display", "none");
    };
    return Tooltip;
}());
exports.Tooltip = Tooltip;
//# sourceMappingURL=tooltip.js.map