"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var moment_1 = tslib_1.__importStar(require("moment"));
var controlled_1 = require("../form/controlled");
var CalendarPart_1 = tslib_1.__importDefault(require("../calendar/CalendarPart"));
var CalendarTable_1 = require("../calendar/CalendarTable");
var Input_1 = require("../input/Input");
var i18n_1 = require("../i18n");
var util_1 = require("./util");
var dropdown_1 = require("../dropdown");
var with_statics_1 = require("../_util/with-statics");
var button_1 = require("../button");
var Popover_1 = require("../popover/Popover");
var util_2 = require("../datepicker/util");
var use_default_1 = require("../_util/use-default");
var getDefaultMoment = function (range, disabledTime) {
    return util_1.getValidTimeValue(moment_1.default("00:00:00", "HH:mm:ss"), tslib_1.__assign({ range: range }, disabledTime));
};
function isValidRangeValue(value) {
    return Array.isArray(value) && moment_1.isMoment(value[0]) && moment_1.isMoment(value[1]);
}
exports.TimeRangePicker = with_statics_1.withStatics(function TimeRangePicker(props) {
    var t = i18n_1.useTranslation(moment_1.default);
    var _a = controlled_1.useDefaultValue(props, [null, null]), className = _a.className, style = _a.style, value = _a.value, onChange = _a.onChange, disabled = _a.disabled, _b = _a.separator, separator = _b === void 0 ? "~" : _b, _c = _a.format, format = _c === void 0 ? "HH:mm:ss" : _c, _d = _a.placeholder, placeholder = _d === void 0 ? t.selectTime : _d, _e = _a.defaultOpen, defaultOpen = _e === void 0 ? false : _e, open = _a.open, _f = _a.onOpenChange, onOpenChange = _f === void 0 ? function () { return null; } : _f, _g = _a.placement, placement = _g === void 0 ? "bottom-start" : _g, _h = _a.placementOffset, placementOffset = _h === void 0 ? 5 : _h, _j = _a.closeOnScroll, closeOnScroll = _j === void 0 ? true : _j, range = _a.range, _k = _a.disabledTime, disabledTime = _k === void 0 ? function () { return ({}); } : _k, _l = _a.hourStep, hourStep = _l === void 0 ? 1 : _l, _m = _a.minuteStep, minuteStep = _m === void 0 ? 1 : _m, _o = _a.secondStep, secondStep = _o === void 0 ? 1 : _o;
    // 当前选中时间
    var _p = tslib_1.__read(react_1.useState(isValidRangeValue(value)
        ? [value[0].clone(), value[1].clone()]
        : [null, null]), 2), curValue = _p[0], setCurValue = _p[1];
    // 选择器是否展开
    var _q = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), active = _q[0], setActive = _q[1];
    // 输入框显示值
    var inputRef = react_1.useRef(null);
    var getInputValue = react_1.useCallback(function (value) {
        var _a = tslib_1.__read(value || [null, null], 2), start = _a[0], end = _a[1];
        if (moment_1.isMoment(start) && moment_1.isMoment(end)) {
            return start
                .locale(t.locale)
                .format(format) + " " + separator + " " + end
                .locale(t.locale)
                .format(format);
        }
        return "";
    }, [format, separator, t.locale]);
    var _r = tslib_1.__read(react_1.useState(getInputValue(curValue)), 2), inputValue = _r[0], setInputValue = _r[1];
    react_1.useEffect(function () {
        var _a = tslib_1.__read(value, 2), start = _a[0], end = _a[1];
        setCurValue([
            moment_1.isMoment(start)
                ? start.clone()
                : getDefaultMoment(range, disabledTime(value, "start")),
            moment_1.isMoment(end)
                ? end.clone()
                : getDefaultMoment(range, disabledTime(value, "end")),
        ]);
        setInputValue(getInputValue(value));
    }, [format, separator, value]); // eslint-disable-line react-hooks/exhaustive-deps
    function handleChange(value
    // context: DateChangeContext
    ) {
        var _a = tslib_1.__read(value, 2), start = _a[0], end = _a[1];
        var fullValue = [
            start || getDefaultMoment(range, disabledTime(value, "start")),
            end || getDefaultMoment(range, disabledTime(value, "end")),
        ];
        setCurValue(fullValue);
        // moment 更改后直接获取值（format）可能拿到是之前值
        setTimeout(function () { return setInputValue(getInputValue(fullValue)); }, 0);
    }
    function handleOk(event) {
        var value = curValue;
        if (isValidRangeValue(curValue) && curValue[0].isAfter(curValue[1])) {
            value = [curValue[1], curValue[0]];
            setCurValue(value);
        }
        onChange(value, { event: event });
        handleClose();
    }
    function handleOpen() {
        if (disabled) {
            return;
        }
        setActive(true);
    }
    function handleClose() {
        setInputValue(getInputValue(value));
        setActive(false);
    }
    var timeProps = {
        hourStep: hourStep,
        minuteStep: minuteStep,
        secondStep: secondStep,
        format: format,
        caption: t.selectTime,
    };
    return (react_1.default.createElement(Popover_1.Popover, { trigger: [
            util_2.DatePickerTrigger,
            { onOpen: handleOpen, onClose: handleClose },
        ], visible: active, onVisibleChange: setActive, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, overlay: react_1.default.createElement(dropdown_1.DropdownBox, null,
            react_1.default.createElement(CalendarPart_1.default.Panel, { rangeMode: true, timeMode: true },
                react_1.default.createElement(CalendarPart_1.default.Body, null,
                    react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { rangeType: "start", type: "time", showTime: timeProps, value: curValue, onChange: handleChange })),
                    react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { rangeType: "end", type: "time", showTime: timeProps, value: curValue, onChange: handleChange }))),
                react_1.default.createElement(CalendarPart_1.default.Footer, { right: react_1.default.createElement(button_1.Button, { type: "primary", onClick: handleOk }, t.okText) }))) },
        react_1.default.createElement("div", { className: classnames_1.default("tea-timepicker", className), style: style },
            react_1.default.createElement("div", { className: "tea-timepicker__input size-l" },
                react_1.default.createElement(Input_1.Input, { ref: inputRef, maxLength: 8, disabled: disabled, placeholder: placeholder, value: inputValue, onFocus: function () { return inputRef.current.blur(); } })))));
}, { defaultLabelAlign: "middle" });
//# sourceMappingURL=TimeRangePicker.js.map