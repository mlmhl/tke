"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/camelcase */
var react_1 = require("react");
var zh_cn_1 = require("./locale/zh_cn");
var en_us_1 = require("./locale/en_us");
var ja_1 = require("./locale/ja");
var ko_1 = require("./locale/ko");
// 约定中语言名不规范
var lngs = {
    zh: "zh_cn",
    en: "en_us",
    jp: "ja",
};
/* eslint-disable @typescript-eslint/no-object-literal-type-assertion */
var translationMap = {
    zh_cn: zh_cn_1.zh_cn,
    zh: zh_cn_1.zh_cn,
    en_us: tslib_1.__assign({}, zh_cn_1.zh_cn, en_us_1.en_us),
    en: tslib_1.__assign({}, zh_cn_1.zh_cn, en_us_1.en_us),
    ja: tslib_1.__assign({}, zh_cn_1.zh_cn, en_us_1.en_us, ja_1.ja),
    jp: tslib_1.__assign({}, zh_cn_1.zh_cn, en_us_1.en_us, ja_1.ja),
    ko: tslib_1.__assign({}, zh_cn_1.zh_cn, en_us_1.en_us, ko_1.ko),
};
/* eslint-enable @typescript-eslint/no-object-literal-type-assertion */
var currentTranslation = zh_cn_1.zh_cn;
function setLocale(locale, moment) {
    if (moment) {
        moment.locale(lngs[locale] || locale);
    }
    currentTranslation = translationMap[locale];
}
exports.setLocale = setLocale;
function useTranslation(moment) {
    var t = currentTranslation || zh_cn_1.zh_cn;
    var locale = lngs[t.locale] || t.locale;
    react_1.useState(function () {
        if (moment) {
            moment.locale(locale);
        }
    });
    react_1.useEffect(function () {
        if (moment) {
            moment.locale(locale);
        }
    }, [locale]); // eslint-disable-line react-hooks/exhaustive-deps
    return t;
}
exports.useTranslation = useTranslation;
function getTranslation() {
    return currentTranslation || zh_cn_1.zh_cn;
}
exports.getTranslation = getTranslation;
/* eslint-enable @typescript-eslint/camelcase */
//# sourceMappingURL=translation.js.map