"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable */
var react_1 = tslib_1.__importDefault(require("react"));
var PureInput_1 = require("./PureInput");
var SingleValueSelect_1 = require("./SingleValueSelect");
var MultipleValueSelect_1 = require("./MultipleValueSelect");
var Loading_1 = require("./Loading");
var Empty_1 = require("./Empty");
var ValueSelect = /** @class */ (function (_super) {
    tslib_1.__extends(ValueSelect, _super);
    function ValueSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mount = false;
        _this.state = {
            values: _this.props.values,
        };
        _this.handleKeyDown = function (keyCode) {
            if (_this["select"] && _this["select"].handleKeyDown) {
                return _this["select"].handleKeyDown(keyCode);
            }
            return true;
        };
        return _this;
    }
    ValueSelect.prototype.componentDidMount = function () {
        var _this = this;
        this.mount = true;
        var propsValues = this.props.values;
        if (typeof propsValues === "function") {
            var res = propsValues();
            // Promise
            if (res && res.then) {
                res.then(function (values) {
                    _this.mount && _this.setState({ values: values });
                });
            }
            else {
                this.mount && this.setState({ values: res });
            }
        }
    };
    ValueSelect.prototype.componentWillUnmount = function () {
        this.mount = false;
    };
    // handleKeyUp = (keyCode: number): boolean => {
    //   if (this['select'] && this['select'].handleKeyUp) {
    //     return this['select'].handleKeyUp(keyCode);
    //   }
    //   return true;
    // }
    ValueSelect.prototype.render = function () {
        var _this = this;
        var _a, _b;
        var values = this.state.values;
        var _c = this.props, type = _c.type, inputValue = _c.inputValue, onChange = _c.onChange, onSelect = _c.onSelect, onCancel = _c.onCancel, offset = _c.offset, maxHeight = _c.maxHeight;
        var props = {
            values: values,
            inputValue: inputValue,
            onChange: onChange,
            onSelect: onSelect,
            onCancel: onCancel,
            offset: offset,
            maxHeight: maxHeight,
        };
        var componentName = type;
        var componentOptions = {};
        if (Array.isArray(type)) {
            _a = tslib_1.__read(type, 2), componentName = _a[0], _b = _a[1], componentOptions = _b === void 0 ? {} : _b;
        }
        switch (componentName) {
            case "input":
                return (react_1.default.createElement(PureInput_1.PureInput, tslib_1.__assign({ ref: function (select) { return (_this["select"] = select); } }, props)));
            case "single":
                if (!Array.isArray(values)) {
                    return react_1.default.createElement(Loading_1.Loading, { offset: offset });
                }
                if (!values.length) {
                    return (react_1.default.createElement(Empty_1.Empty, tslib_1.__assign({}, componentOptions, { offset: offset, onCancel: onCancel })));
                }
                return (react_1.default.createElement(SingleValueSelect_1.SingleValueSelect, tslib_1.__assign({}, props, { ref: function (select) { return (_this["select"] = select); }, values: values })));
            case "multiple":
                if (!Array.isArray(values)) {
                    return react_1.default.createElement(Loading_1.Loading, { offset: offset });
                }
                if (!values.length) {
                    return (react_1.default.createElement(Empty_1.Empty, tslib_1.__assign({}, componentOptions, { offset: offset, onCancel: onCancel })));
                }
                return (react_1.default.createElement(MultipleValueSelect_1.MultipleValueSelect, tslib_1.__assign({}, props, componentOptions, { ref: function (select) { return (_this["select"] = select); }, values: values })));
        }
        return null;
    };
    return ValueSelect;
}(react_1.default.Component));
exports.ValueSelect = ValueSelect;
//# sourceMappingURL=ValueSelect.js.map