"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable */
var react_1 = tslib_1.__importDefault(require("react"));
var AttributeSelect_1 = require("./AttributeSelect");
var ValueSelect_1 = require("./valueselect/ValueSelect");
var overlay_1 = require("../overlay");
var merge_refs_1 = require("../_util/merge-refs");
var keys = {
    "8": "backspace",
    "9": "tab",
    "13": "enter",
    "27": "esc",
    "37": "left",
    "38": "up",
    "39": "right",
    "40": "down",
};
var INPUT_MIN_SIZE = 0;
var SELECT_MIN_HEIGHT = 242;
var TagInput = /** @class */ (function (_super) {
    tslib_1.__extends(TagInput, _super);
    function TagInput(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            inputWidth: INPUT_MIN_SIZE,
            inputValue: "",
            attribute: null,
            values: [],
            showAttrSelect: false,
            showValueSelect: false,
            ValueSelectOffset: 0,
        };
        /**
         * 刷新下拉列表位置
         */
        _this.scheduleUpdate = function () { return _this._scheduleUpdate(); };
        /**
         * 刷新选择组件显示
         */
        _this.refreshShow = function () {
            var _a = _this.state, inputValue = _a.inputValue, attribute = _a.attribute;
            var input = _this["input"];
            var start = input.selectionStart, end = input.selectionEnd;
            var pos = _this.getAttrStrAndValueStr(inputValue).pos;
            if (pos < 0 || start <= pos) {
                _this.setState({ showAttrSelect: true, showValueSelect: false });
                return;
            }
            if (attribute && end > pos) {
                _this.setState({ showAttrSelect: false, showValueSelect: true });
            }
        };
        _this.focusInput = function () {
            if (!_this["input"])
                return;
            var input = _this["input"];
            input.focus();
        };
        _this.moveToEnd = function () {
            var input = _this["input"];
            input.focus();
            var value = _this.state.inputValue;
            setTimeout(function () { return input.setSelectionRange(value.length, value.length); }, 0);
        };
        _this.selectValue = function () {
            var input = _this["input"];
            input.focus();
            var value = _this.state.inputValue;
            var pos = _this.getAttrStrAndValueStr(value).pos;
            if (pos < 0)
                pos = -2;
            setTimeout(function () {
                input.setSelectionRange(pos + 2, value.length);
                _this.refreshShow();
            }, 0);
        };
        _this.selectAttr = function () {
            var input = _this["input"];
            input.focus();
            var value = _this.state.inputValue;
            var pos = _this.getAttrStrAndValueStr(value).pos;
            if (pos < 0)
                pos = 0;
            setTimeout(function () {
                input.setSelectionRange(0, pos);
                _this.refreshShow();
            }, 0);
        };
        _this.setInputValue = function (value, callback) {
            if (_this.props.type === "edit" && value.trim().length <= 0) {
                _this.props.dispatchTagEvent("del", "edit");
            }
            var attributes = _this.props.attributes;
            var attribute = null, valueStr = value;
            var input = _this["input"];
            var mirror = _this["input-mirror"];
            // attribute 是否存在
            for (var i = 0; i < attributes.length; ++i) {
                if (value.indexOf(attributes[i].name + ":") === 0 ||
                    value.indexOf(attributes[i].name + "：") === 0) {
                    // 获取属性/值
                    attribute = attributes[i];
                    valueStr = value.substr(attributes[i].name.length + 1);
                    // 计算 offset
                    mirror.innerText = attribute.name + ": ";
                    var width_1 = mirror.clientWidth;
                    if (_this.props.inputOffset)
                        width_1 += _this.props.inputOffset;
                    _this.setState({ ValueSelectOffset: width_1 });
                    break;
                }
            }
            // 处理前导空格
            if (attribute && valueStr.replace(/^\s+/, "").length > 0) {
                value = attribute.name + ": " + valueStr.replace(/^\s+/, "");
            }
            else if (attribute) {
                value = attribute.name + ":" + valueStr;
            }
            _this.setState({ attribute: attribute }, _this.refreshShow);
            if (_this.props.type === "edit") {
                _this.props.dispatchTagEvent("editing", { attr: attribute });
            }
            mirror.innerText = value;
            var width = mirror.clientWidth > INPUT_MIN_SIZE ? mirror.clientWidth : INPUT_MIN_SIZE;
            _this.setState({ inputValue: value, inputWidth: width }, function () {
                if (callback)
                    callback();
            });
        };
        _this.resetInput = function (callback) {
            _this.setInputValue("", callback);
            _this.setState({ inputWidth: INPUT_MIN_SIZE });
        };
        _this.getInputValue = function () {
            return _this.state.inputValue;
        };
        _this.addTagByInputValue = function () {
            var _a = _this.state, attribute = _a.attribute, values = _a.values, inputValue = _a.inputValue;
            var type = _this.props.type || "add";
            // 属性值搜索
            if (attribute &&
                _this.props.attributes.filter(function (item) { return item.key === attribute.key; }).length >
                    0) {
                if (values.length <= 0) {
                    return false;
                }
                _this.props.dispatchTagEvent(type, { attr: attribute, values: values });
            }
            else {
                // 关键字搜索
                if (inputValue.trim().length <= 0) {
                    return false;
                }
                var list = inputValue
                    .split("|")
                    .filter(function (item) { return item.trim().length > 0; })
                    .map(function (item) {
                    return { name: item.trim() };
                });
                _this.props.dispatchTagEvent(type, { attr: null, values: list });
            }
            _this.setState({ showAttrSelect: false, showValueSelect: false });
            if (_this.props.type !== "edit") {
                _this.resetInput();
            }
            return true;
        };
        _this.handleInputChange = function (e) {
            _this.setInputValue(e.target.value);
        };
        _this.handleInputClick = function (e) {
            _this.props.dispatchTagEvent("click-input", _this.props.type);
            e.stopPropagation();
            _this.focusInput();
        };
        _this.handleAttrSelect = function (attr) {
            if (attr && attr.key) {
                var str = attr.name + ": ";
                var inputValue = _this.state.inputValue;
                if (inputValue.indexOf(str) >= 0) {
                    _this.selectValue();
                }
                else {
                    _this.setInputValue(str);
                }
                _this.setState({ values: [] });
            }
            _this.focusInput();
        };
        _this.handleValueChange = function (values) {
            _this.setState({ values: values }, function () {
                _this.setInputValue(_this.state.attribute.name + ": " + values
                    .map(function (item) { return item.name; })
                    .join(" | "));
                _this.focusInput();
            });
        };
        /**
         * 值选择组件完成选择
         */
        _this.handleValueSelect = function (values) {
            _this.setState({ values: values });
            var inputValue = _this.state.inputValue;
            if (values.length <= 0) {
                _this.setInputValue(_this.state.attribute.name + ": ");
                return;
            }
            if (values.length > 0) {
                var key_1 = _this.state.attribute.key;
                if (_this.props.attributes.filter(function (item) { return item.key === key_1; }).length > 0) {
                    var type = _this.props.type || "add";
                    _this.props.dispatchTagEvent(type, {
                        attr: _this.state.attribute,
                        values: values,
                    });
                }
                _this.focusInput();
            }
            if (_this.props.type !== "edit") {
                _this.resetInput();
            }
        };
        /**
         * 值选择组件取消选择
         */
        _this.handleValueCancel = function () {
            if (_this.props.type === "edit") {
                var _a = _this.state, attribute = _a.attribute, values = _a.values;
                _this.props.dispatchTagEvent("edit-cancel", {
                    attr: attribute,
                    values: values,
                });
            }
            else {
                _this.resetInput(function () {
                    _this.focusInput();
                });
            }
        };
        /**
         * 处理粘贴事件
         */
        _this.handlePaste = function (e) {
            var attribute = _this.state.attribute;
            if (!attribute || attribute.type === "input") {
                _this["textarea"].focus();
                setTimeout(function () {
                    var value = _this["textarea"].value;
                    if (/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/.test(value)) {
                        value = value.replace(/[\r\n\t,，\s]+/g, "|");
                    }
                    else {
                        value = value.replace(/[\r\n\t,，]+/g, "|");
                    }
                    value = value
                        .split("|")
                        .map(function (item) { return item.trim(); })
                        .filter(function (item) { return item.length > 0; })
                        .join(" | ");
                    var input = _this["input"];
                    var start = input.selectionStart, end = input.selectionEnd;
                    var inputValue = _this.state.inputValue;
                    // 覆盖选择区域
                    var curValue = inputValue.substring(0, start) +
                        value +
                        inputValue.substring(end, inputValue.length);
                    // input 属性情况
                    _this["textarea"].value = "";
                    if (attribute && attribute.type === "input") {
                        _this.setInputValue(curValue, _this.focusInput);
                        return;
                    }
                    if (inputValue.length > 0) {
                        _this.setInputValue(curValue, _this.focusInput);
                    }
                    else {
                        _this.setInputValue(curValue, _this.addTagByInputValue);
                    }
                }, 100);
            }
        };
        _this.handlekeyDown = function (e) {
            if (!keys[e.keyCode])
                return;
            if (_this.props.hidden) {
                return _this.props.handleKeyDown(e);
            }
            var inputValue = _this.state.inputValue;
            if (keys[e.keyCode] === "backspace" && inputValue.length > 0)
                return;
            if ((keys[e.keyCode] === "left" || keys[e.keyCode] === "right") &&
                inputValue.length > 0) {
                setTimeout(_this.refreshShow, 0);
                return;
            }
            if (keys[e.keyCode] === "esc") {
                return _this.handleValueCancel();
            }
            e.preventDefault();
            // 事件下传
            if (_this["attr-select"]) {
                if (_this["attr-select"].handleKeyDown(e.keyCode) === false)
                    return;
            }
            if (_this["value-select"]) {
                if (_this["value-select"].handleKeyDown(e.keyCode) === false)
                    return;
            }
            switch (keys[e.keyCode]) {
                case "enter":
                case "tab":
                    if (!_this.props.isFocused) {
                        _this.props.dispatchTagEvent("click-input");
                    }
                    _this.addTagByInputValue();
                    break;
                case "backspace":
                    _this.props.dispatchTagEvent("del", "keyboard");
                    break;
                case "up":
                    break;
                case "down":
                    break;
            }
        };
        _this.getAttrStrAndValueStr = function (str) {
            var attrStr = str, valueStr = "", pos = -1;
            var attributes = _this.props.attributes;
            for (var i = 0; i < attributes.length; ++i) {
                if (str.indexOf(attributes[i].name + ":") === 0) {
                    // 获取属性/值
                    attrStr = attributes[i].name;
                    valueStr = str.substr(attrStr.length + 1);
                    pos = attributes[i].name.length;
                }
            }
            return { attrStr: attrStr, valueStr: valueStr, pos: pos };
        };
        _this._scheduleUpdate = function () { return null; };
        _this.wrapperRef = react_1.default.createRef();
        return _this;
    }
    TagInput.prototype.componentDidMount = function () { };
    TagInput.prototype.setInfo = function (info, callback) {
        var _this = this;
        var attribute = info.attr;
        var values = info.values;
        this.setState({ attribute: attribute, values: values }, function () {
            if (attribute) {
                _this.setInputValue(attribute.name + ": " + values.map(function (item) { return item.name; }).join(" | "), callback);
            }
            else {
                _this.setInputValue("" + values.map(function (item) { return item.name; }).join(" | "), callback);
            }
        });
    };
    TagInput.prototype.render = function () {
        var _this = this;
        var _a = this.state, inputWidth = _a.inputWidth, inputValue = _a.inputValue, showAttrSelect = _a.showAttrSelect, showValueSelect = _a.showValueSelect, attribute = _a.attribute, ValueSelectOffset = _a.ValueSelectOffset;
        var _b = this.props, active = _b.active, attributes = _b.attributes, isFocused = _b.isFocused, hidden = _b.hidden, maxWidth = _b.maxWidth, type = _b.type;
        var _c = this.getAttrStrAndValueStr(inputValue), attrStr = _c.attrStr, valueStr = _c.valueStr;
        var wrapper = this.wrapperRef.current;
        var maxHeight = !wrapper
            ? SELECT_MIN_HEIGHT
            : window.innerHeight - wrapper.getBoundingClientRect().bottom - 60;
        maxHeight = Math.max(maxHeight, SELECT_MIN_HEIGHT);
        var input = type !== "edit" ? (react_1.default.createElement("input", { ref: function (input) { return (_this["input"] = input); }, type: "text", className: "tea-input tea-input--tag", placeholder: "", style: {
                width: hidden ? 0 : inputWidth + 6,
                display: active ? "" : "none",
                maxWidth: maxWidth ? maxWidth - 36 : 435,
            }, value: inputValue, onChange: this.handleInputChange, onKeyDown: this.handlekeyDown, onFocus: this.refreshShow, onClick: this.refreshShow, onPaste: this.handlePaste })) : (react_1.default.createElement("div", { style: { display: hidden ? "none" : "" } },
            react_1.default.createElement("pre", { style: { display: "block", visibility: "hidden" } },
                react_1.default.createElement("div", { style: {
                        fontSize: 12,
                        width: hidden ? 0 : inputWidth + 36,
                        maxWidth: maxWidth ? maxWidth - 36 : 435,
                        whiteSpace: "normal",
                        fontFamily: "Roboto,\"San Francisco\",\"Helvetica Neue\",Helvetica,Arial,PingFangSC-Light,\"Hiragina Sans GB\",\"WenQuanYi Micro Hei\",'microsoft yahei ui',\"microsoft yahei\",sans-serif",
                    } }, inputValue),
                react_1.default.createElement("br", { style: { clear: "both" } })),
            react_1.default.createElement("textarea", { ref: function (input) { return (_this["input"] = input); }, className: "tea-input tea-input--tag", placeholder: "", style: {
                    width: hidden ? 0 : inputWidth + 30,
                    display: active ? "" : "none",
                    maxWidth: maxWidth ? maxWidth - 36 : 435,
                    position: "absolute",
                    top: 0,
                    left: 0,
                    height: "100%",
                    resize: "none",
                    minHeight: 20,
                    marginTop: 4,
                }, value: inputValue, onChange: this.handleInputChange, onKeyDown: this.handlekeyDown, onFocus: this.refreshShow, onClick: this.refreshShow, onPaste: this.handlePaste })));
        return (react_1.default.createElement(overlay_1.Overlay, { layers: [
                react_1.default.createElement(overlay_1.Overlay.Layer, { key: "edit", placementOffset: type === "edit" ? 12 : 2, transitionTimeout: { enter: 50, exit: 0 }, overlayProps: {
                        className: "ignore-react-onclickoutside",
                    }, visible: active &&
                        isFocused &&
                        (showAttrSelect ||
                            (showValueSelect && !!attribute && !!attribute.type)), content: function (_a) {
                        var scheduleUpdate = _a.scheduleUpdate;
                        _this._scheduleUpdate = scheduleUpdate;
                        return (react_1.default.createElement(react_1.default.Fragment, null,
                            showAttrSelect && (react_1.default.createElement(AttributeSelect_1.AttributeSelect, { ref: function (select) { return (_this["attr-select"] = select); }, attributes: attributes, inputValue: attrStr, onSelect: _this.handleAttrSelect, maxHeight: maxHeight })),
                            showValueSelect && !!attribute && !!attribute.type && (react_1.default.createElement(ValueSelect_1.ValueSelect, { type: attribute.type, ref: function (select) { return (_this["value-select"] = select); }, values: attribute.values, inputValue: valueStr.trim(), offset: ValueSelectOffset, onChange: _this.handleValueChange, onSelect: _this.handleValueSelect, onCancel: _this.handleValueCancel, maxHeight: maxHeight }))));
                    } }),
            ] }, function (ref) { return (react_1.default.createElement("div", { ref: merge_refs_1.mergeRefs(ref, _this.wrapperRef), style: {
                display: "inline-block",
                verticalAlign: type === "edit" ? "" : "top",
                position: "relative",
                width: hidden ? 0 : active ? inputWidth + 6 : 6,
                maxWidth: maxWidth ? maxWidth - 36 : 435,
                padding: type === "edit" && !hidden ? "0 8px" : "",
            }, onClick: _this.handleInputClick },
            input,
            react_1.default.createElement("span", { ref: function (input) { return (_this["input-mirror"] = input); }, style: {
                    position: "absolute",
                    top: -9999,
                    left: 0,
                    whiteSpace: "pre",
                    fontSize: 12,
                } }),
            react_1.default.createElement("textarea", { ref: function (textarea) { return (_this["textarea"] = textarea); }, style: {
                    position: "absolute",
                    top: -9999,
                    left: 0,
                    whiteSpace: "pre",
                    fontSize: 12,
                } }))); }));
    };
    return TagInput;
}(react_1.default.Component));
exports.TagInput = TagInput;
//# sourceMappingURL=TagInput.js.map