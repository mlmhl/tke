"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var moment_1 = tslib_1.__importStar(require("moment"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var i18n_1 = require("../i18n");
var controlled_1 = require("../form/controlled");
var CalendarPart_1 = tslib_1.__importDefault(require("../calendar/CalendarPart"));
var CalendarTable_1 = require("../calendar/CalendarTable");
var TimeSupportWrapper_1 = require("./TimeSupportWrapper");
var Input_1 = require("../input/Input");
var RangePicker_1 = require("./RangePicker");
var util_1 = require("../timepicker/util");
var dropdown_1 = require("../dropdown");
var MonthPicker_1 = require("./MonthPicker");
var util_2 = require("./util");
var with_statics_1 = require("../_util/with-statics");
var popover_1 = require("../popover");
var use_default_1 = require("../_util/use-default");
var getFormat = function (showTime) { return (showTime ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD"); };
exports.DatePicker = with_statics_1.withStatics(function DatePicker(props) {
    var t = i18n_1.useTranslation(moment_1.default);
    var _a = controlled_1.useDefaultValue(props), header = _a.header, className = _a.className, style = _a.style, showTime = _a.showTime, value = _a.value, onChange = _a.onChange, disabled = _a.disabled, _format = _a.format, _b = _a.placeholder, placeholder = _b === void 0 ? showTime ? t.selectTime : t.selectDate : _b, _c = _a.defaultOpen, defaultOpen = _c === void 0 ? false : _c, open = _a.open, _d = _a.onOpenChange, onOpenChange = _d === void 0 ? function () { return null; } : _d, _e = _a.placement, placement = _e === void 0 ? "bottom-start" : _e, _f = _a.placementOffset, placementOffset = _f === void 0 ? 5 : _f, _g = _a.closeOnScroll, closeOnScroll = _g === void 0 ? true : _g, restProps = tslib_1.__rest(_a, ["header", "className", "style", "showTime", "value", "onChange", "disabled", "format", "placeholder", "defaultOpen", "open", "onOpenChange", "placement", "placementOffset", "closeOnScroll"]);
    var format = _format || getFormat(showTime);
    // 当前面板类型
    var _h = tslib_1.__read(react_1.useState("date"), 2), type = _h[0], setType = _h[1];
    // 当前面板展示时间
    var _j = tslib_1.__read(react_1.useState(moment_1.isMoment(value) ? value : getDefaultViewMoment()), 2), curViewMoment = _j[0], setCurViewMoment = _j[1];
    // 当前选中日期
    var _k = tslib_1.__read(react_1.useState(value), 2), curValue = _k[0], setCurValue = _k[1];
    // 上次选中日期
    var preValidValueRef = react_1.useRef(value);
    // 选择器是否展开
    var _l = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), active = _l[0], setActive = _l[1];
    // 输入框显示值
    var inputRef = react_1.useRef(null);
    var getInputValue = react_1.useCallback(function (value) {
        return moment_1.isMoment(value) ? value.locale(t.locale).format(format) : "";
    }, [t.locale, format]);
    var _m = tslib_1.__read(react_1.useState(getInputValue(curValue)), 2), inputValue = _m[0], setInputValue = _m[1];
    react_1.useEffect(function () {
        setCurValue(value);
        setInputValue(getInputValue(value));
    }, [format, value, getInputValue]);
    function handleChange(value, context) {
        // 同步日期/时间
        if (showTime && moment_1.isMoment(value)) {
            value = syncDate(value, context.type); // eslint-disable-line no-param-reassign
        }
        setCurValue(value);
        setInputValue(getInputValue(value));
        // 没有时间选择时没有二次确认选中
        if (!showTime) {
            onChange(value, context);
            handleClose();
        }
    }
    function handleOk(event) {
        onChange(curValue, { event: event });
        handleClose();
    }
    function handleOpen() {
        if (disabled) {
            return;
        }
        setActive(true);
        setType("date");
    }
    function handleClose() {
        setInputValue(getInputValue(value));
        setActive(false);
    }
    /**
     * 同步日期/时间
     * 如果当前修改为日期，则同步上次时间并修正；
     * 如果当前修改为时间，则同步上次日期；
     */
    function syncDate(value, type) {
        var preValidValue = preValidValueRef.current;
        var range = props.range, _a = props.disabledTime, disabledTime = _a === void 0 ? function () { return ({}); } : _a;
        // 如果包含上次选择，则以上次选择为基准同步
        if (moment_1.isMoment(preValidValue)) {
            if (type === "date") {
                var time = util_1.getValidTimeValue(preValidValue, tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value, range) }, disabledTime(value)));
                value.set(util_1.getHourMinuteSecond(time));
            }
            if (type === "time") {
                value.set(util_2.getYearMonthDate(preValidValue));
            }
            // 如果是首次选择，则将当前时间进行修正
        }
        else if (type === "date") {
            var time = util_1.getValidTimeValue(value, tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value, range) }, disabledTime(value)));
            value.set(util_1.getHourMinuteSecond(time));
        }
        preValidValueRef.current = value;
        return value;
    }
    /**
     * 获取面板默认展示时间
     */
    function getDefaultViewMoment() {
        var time = showTime && typeof showTime === "object"
            ? showTime.defaultValue
            : undefined;
        if (!time) {
            return moment_1.default();
        }
        return moment_1.default(util_1.getHourMinuteSecond(time));
    }
    return (react_1.default.createElement(popover_1.Popover, { trigger: [
            util_2.DatePickerTrigger,
            { onOpen: handleOpen, onClose: handleClose },
        ], visible: active, onVisibleChange: setActive, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, overlay: react_1.default.createElement(dropdown_1.DropdownBox, null,
            react_1.default.createElement(CalendarPart_1.default.Panel, { timeMode: type === "time" },
                !!header && react_1.default.createElement(CalendarPart_1.default.Header, null, header),
                react_1.default.createElement(TimeSupportWrapper_1.TimeSupportWrapper, tslib_1.__assign({}, restProps, { showTime: showTime, value: curValue, onChange: handleChange, onOk: handleOk, type: type, onTypeChange: function (type) { return setType(type); } }), function (props) { return (react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { curViewMoment: curViewMoment, onCurViewMomentChange: setCurViewMoment }))); }))) },
        react_1.default.createElement("div", { className: classnames_1.default("tea-datepicker", className), style: style },
            react_1.default.createElement("div", { className: "tea-datepicker__input" },
                react_1.default.createElement(Input_1.Input, { ref: inputRef, disabled: disabled, placeholder: placeholder, value: inputValue, onFocus: function () { return inputRef.current.blur(); } })))));
}, {
    RangePicker: RangePicker_1.RangePicker,
    MonthPicker: MonthPicker_1.MonthPicker,
    defaultLabelAlign: "middle",
});
//# sourceMappingURL=DatePicker.js.map