"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var moment_1 = tslib_1.__importStar(require("moment"));
var controlled_1 = require("../form/controlled");
var CalendarPart_1 = tslib_1.__importDefault(require("../calendar/CalendarPart"));
var CalendarTable_1 = require("../calendar/CalendarTable");
var TimeSupportWrapper_1 = require("./TimeSupportWrapper");
var Input_1 = require("../input/Input");
var i18n_1 = require("../i18n");
var util_1 = require("./util");
var util_2 = require("../timepicker/util");
var dropdown_1 = require("../dropdown");
var with_statics_1 = require("../_util/with-statics");
var use_default_1 = require("../_util/use-default");
var Popover_1 = require("../popover/Popover");
var getFormat = function (showTime) { return (showTime ? "YYYY-MM-DD HH:mm:ss" : "YYYY-MM-DD"); };
function isValidRangeValue(value) {
    return Array.isArray(value) && moment_1.isMoment(value[0]) && moment_1.isMoment(value[1]);
}
exports.isValidRangeValue = isValidRangeValue;
exports.RangePicker = with_statics_1.withStatics(function RangePicker(props) {
    var t = i18n_1.useTranslation(moment_1.default);
    var _a = controlled_1.useDefaultValue(props, [null, null]), header = _a.header, className = _a.className, style = _a.style, value = _a.value, onChange = _a.onChange, showTime = _a.showTime, disabled = _a.disabled, _b = _a.separator, separator = _b === void 0 ? "~" : _b, _format = _a.format, _c = _a.placeholder, placeholder = _c === void 0 ? showTime ? t.selectTime : t.selectDate : _c, _d = _a.defaultOpen, defaultOpen = _d === void 0 ? false : _d, open = _a.open, _e = _a.onOpenChange, onOpenChange = _e === void 0 ? function () { return null; } : _e, _f = _a.placement, placement = _f === void 0 ? "bottom-start" : _f, _g = _a.placementOffset, placementOffset = _g === void 0 ? 5 : _g, _h = _a.closeOnScroll, closeOnScroll = _h === void 0 ? true : _h, restProps = tslib_1.__rest(_a, ["header", "className", "style", "value", "onChange", "showTime", "disabled", "separator", "format", "placeholder", "defaultOpen", "open", "onOpenChange", "placement", "placementOffset", "closeOnScroll"]);
    var format = _format || getFormat(showTime);
    // 当前面板类型
    var _j = tslib_1.__read(react_1.useState([
        "date",
        "date",
    ]), 2), type = _j[0], setType = _j[1];
    // 当前左/右面板展示时间
    var _k = tslib_1.__read(react_1.useState(getDefaultViewMoment(0)), 2), curStartView = _k[0], setStartCurView = _k[1];
    var _l = tslib_1.__read(react_1.useState(getDefaultViewMoment(1)), 2), curEndView = _l[0], setEndCurView = _l[1];
    // 当前选中日期
    var _m = tslib_1.__read(react_1.useState(isValidRangeValue(value)
        ? [value[0].clone(), value[1].clone()]
        : [null, null]), 2), curValue = _m[0], setCurValue = _m[1];
    // 上次选中日期
    var preValidValueRef = react_1.useRef(value || [null, null]);
    // 选择器是否展开
    var _o = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), active = _o[0], setActive = _o[1];
    // 输入框显示值
    var inputRef = react_1.useRef(null);
    var getInputValue = react_1.useCallback(function (value) {
        var _a = tslib_1.__read(value || [null, null], 2), start = _a[0], end = _a[1];
        if (moment_1.isMoment(start) && moment_1.isMoment(end)) {
            return start
                .locale(t.locale)
                .format(format) + " " + separator + " " + end
                .locale(t.locale)
                .format(format);
        }
        return "";
    }, [format, separator, t.locale]);
    var _p = tslib_1.__read(react_1.useState(getInputValue(curValue)), 2), inputValue = _p[0], setInputValue = _p[1];
    react_1.useEffect(function () {
        setCurValue(isValidRangeValue(value)
            ? [value[0].clone(), value[1].clone()]
            : [null, null]);
        setInputValue(getInputValue(value));
    }, [format, separator, value, getInputValue]);
    function handleChange(value, context) {
        // 同步日期/时间
        if (showTime && isValidRangeValue(value)) {
            value = syncDate(value, context.type); // eslint-disable-line no-param-reassign
        }
        setCurValue(value);
        // moment 更改后直接获取值（format）可能拿到是之前值
        setTimeout(function () { return setInputValue(getInputValue(value)); }, 0);
        // 没有时间选择时没有二次确认选中
        if (!showTime && isValidRangeValue(value)) {
            onChange(value, context);
            handleClose();
        }
    }
    function handleOk(event) {
        var value = curValue;
        if (isValidRangeValue(curValue) && curValue[0].isAfter(curValue[1])) {
            value = [curValue[1], curValue[0]];
            setCurValue(value);
        }
        onChange(value, { event: event });
        handleClose();
    }
    function handleOpen() {
        if (disabled) {
            return;
        }
        setActive(true);
        setType(["date", "date"]);
    }
    function handleClose() {
        setInputValue(getInputValue(value));
        setActive(false);
    }
    /**
     * 同步日期/时间
     * 如果当前修改为日期，则同步上次时间并修正；
     * 如果当前修改为时间，则同步上次日期；
     */
    function syncDate(value, type) {
        var preValidValue = preValidValueRef.current;
        var range = props.range, _a = props.disabledTime, disabledTime = _a === void 0 ? function () { return ({}); } : _a;
        // 如果包含上次选择，则以上次选择为基准同步
        if (isValidRangeValue(preValidValue)) {
            if (type === "date") {
                var timeStart = util_2.getValidTimeValue(preValidValue[0], tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value[0], range) }, disabledTime(value, "start")));
                var timeEnd = util_2.getValidTimeValue(preValidValue[1], tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value[1], range) }, disabledTime(value, "end")));
                value[0].set(util_2.getHourMinuteSecond(timeStart));
                value[1].set(util_2.getHourMinuteSecond(timeEnd));
            }
            if (type === "time") {
                value[0].set(util_1.getYearMonthDate(preValidValue[0]));
                value[1].set(util_1.getYearMonthDate(preValidValue[1]));
            }
            // 如果是首次选择，则将当前时间进行修正
        }
        else if (type === "date") {
            var timeStart = util_2.getValidTimeValue(value[0], tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value[0], range) }, disabledTime(value, "start")));
            var timeEnd = util_2.getValidTimeValue(value[1], tslib_1.__assign({ range: CalendarTable_1.getTimeRange(value[1], range) }, disabledTime(value, "end")));
            value[0].set(util_2.getHourMinuteSecond(timeStart));
            value[1].set(util_2.getHourMinuteSecond(timeEnd));
        }
        preValidValueRef.current = value;
        return value;
    }
    /**
     * 获取 ShowTime 参数
     * @param index 左/右面板 - 0/1
     */
    function getShowTime(index) {
        if (typeof showTime === "object") {
            if (Array.isArray(showTime.defaultValue)) {
                return tslib_1.__assign({}, showTime, { defaultValue: showTime.defaultValue[index] });
            }
            return showTime;
        }
        return !!showTime;
    }
    /**
     * 获取左右面板 range
     */
    function getRange(range) {
        var _a = tslib_1.__read(range || [null, null], 2), rangeMin = _a[0], rangeMax = _a[1];
        var endPreEnd = moment_1.default(curEndView)
            .subtract(1, "month")
            .endOf("month");
        var startNxtStart = moment_1.default(curStartView)
            .add(1, "month")
            .startOf("month");
        return [
            [rangeMin, endPreEnd.isAfter(rangeMax) ? rangeMax : endPreEnd],
            [startNxtStart.isBefore(rangeMin) ? rangeMin : startNxtStart, rangeMax],
        ];
    }
    /**
     * 获取面板默认展示时间
     * @param index 左/右面板 - 0/1
     */
    function getDefaultViewMoment(index) {
        var showTime = getShowTime(index);
        var time = showTime && typeof showTime === "object"
            ? showTime.defaultValue
            : undefined;
        // 没有初始值
        if (!isValidRangeValue(value)) {
            var m = void 0;
            if (!time) {
                m = moment_1.default();
            }
            else {
                m = moment_1.default(util_2.getHourMinuteSecond(time));
            }
            return index === 0 ? moment_1.default(m).subtract(1, "month") : m;
        }
        // 初始值在同个月
        if (value[0].isSame(value[1], "month")) {
            return index === 0 ? moment_1.default(value[1]).subtract(1, "month") : value[1];
        }
        return value[index];
    }
    return (react_1.default.createElement(Popover_1.Popover, { trigger: [
            util_1.DatePickerTrigger,
            { onOpen: handleOpen, onClose: handleClose },
        ], visible: active, onVisibleChange: setActive, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, overlay: react_1.default.createElement(dropdown_1.DropdownBox, null,
            react_1.default.createElement(CalendarPart_1.default.Panel, { rangeMode: true, timeMode: type[0] === "time" },
                !!header && react_1.default.createElement(CalendarPart_1.default.Header, null, header),
                react_1.default.createElement(TimeSupportWrapper_1.TimeSupportWrapper, tslib_1.__assign({}, restProps, { showTime: showTime, value: curValue, onChange: handleChange, onOk: handleOk, type: type, onTypeChange: function (types) {
                        return setType(types);
                    } }), function (_a) {
                    var type = _a.type, onTypeChange = _a.onTypeChange, range = _a.range, props = tslib_1.__rest(_a, ["type", "onTypeChange", "range"]);
                    var _b = tslib_1.__read(getRange(range), 2), startRange = _b[0], EndRange = _b[1];
                    return (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { rangeType: "start", range: startRange, type: type[0], onTypeChange: function (t) { return onTypeChange([t, type[1]]); }, showTime: getShowTime(0), curViewMoment: curStartView, onCurViewMomentChange: function (date) {
                                if (!curEndView.isAfter(date, "month")) {
                                    setEndCurView(moment_1.default(date).add(1, "month"));
                                }
                                setStartCurView(date);
                            } })),
                        react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { rangeType: "end", range: EndRange, type: type[1], onTypeChange: function (t) { return onTypeChange([type[0], t]); }, showTime: getShowTime(1), curViewMoment: curEndView, onCurViewMomentChange: function (date) {
                                if (!curStartView.isBefore(date, "month")) {
                                    setStartCurView(moment_1.default(date).subtract(1, "month"));
                                }
                                setEndCurView(date);
                            } }))));
                }))) },
        react_1.default.createElement("div", { className: classnames_1.default("tea-date" + (showTime ? "time" : "") + "picker", className), style: style },
            react_1.default.createElement("div", { className: "tea-date" + (showTime ? "time" : "") + "picker__input" },
                react_1.default.createElement(Input_1.Input, { ref: inputRef, disabled: disabled, placeholder: placeholder, value: inputValue, onFocus: function () { return inputRef.current.blur(); } })))));
}, { defaultLabelAlign: "middle" });
//# sourceMappingURL=RangePicker.js.map