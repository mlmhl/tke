"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var controlled_1 = require("../form/controlled");
var button_1 = require("../button");
var SegmentGroup_1 = require("./SegmentGroup");
function SegmentMultiple(props) {
    var _a = controlled_1.useDefaultValue(props), value = _a.value, onChange = _a.onChange, groups = _a.groups, options = _a.options;
    var valueSet = new Set(value);
    if (groups) {
        return (react_1.default.createElement(SegmentGroup_1.SegmentGroup, null, Object.entries(groups).map(function (_a) {
            var _b = tslib_1.__read(_a, 2), key = _b[0], name = _b[1];
            var subOptions = options.filter(function (i) { return i.groupKey === key; });
            return (react_1.default.createElement(SegmentGroup_1.SegmentGroupItem, { name: name, key: key },
                react_1.default.createElement(SegmentMain, tslib_1.__assign({}, props, { valueSet: valueSet, options: subOptions, allOptions: options, value: value, onChange: onChange }))));
        })));
    }
    return (react_1.default.createElement(SegmentMain, tslib_1.__assign({}, props, { valueSet: valueSet, value: value, onChange: onChange })));
}
exports.SegmentMultiple = SegmentMultiple;
function SegmentMain(_a) {
    var onChange = _a.onChange, rimless = _a.rimless, options = _a.options, style = _a.style, className = _a.className, 
    // 兼容分组
    valueSet = _a.valueSet, _b = _a.allOptions, allOptions = _b === void 0 ? options : _b;
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-segment", className, {
            "tea-segment--rimless": rimless,
        }), style: style }, options.map(function (option) { return (react_1.default.createElement(button_1.Button, { key: option.value, disabled: option.disabled, tooltip: option.tooltip, className: classnames_1.default({
            "is-selected": valueSet.has(option.value),
        }), onClick: option.disabled
            ? null
            : function (event) {
                var newValue;
                // 之前已经选中，新值排除此值
                if (valueSet.has(option.value)) {
                    newValue = allOptions
                        .filter(function (x) { return x !== option && valueSet.has(x.value); })
                        .map(function (x) { return x.value; });
                }
                // 之前没有选中，新值包含次值
                else {
                    newValue = allOptions
                        .filter(function (x) { return x === option || valueSet.has(x.value); })
                        .map(function (x) { return x.value; });
                }
                onChange(newValue, { event: event });
            } }, option.text || option.value)); })));
}
SegmentMultiple.defaultLabelAlign = "middle";
//# sourceMappingURL=SegmentMultiple.js.map