"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var Dropdown_1 = require("../dropdown/Dropdown");
var tabs_1 = require("../tabs");
var CascaderLoading_1 = require("./CascaderLoading");
function getOptions(data, valueList) {
    var options = [];
    var curLevel = data;
    valueList.forEach(function (value) {
        var option = curLevel.options.find(function (option) { return option.value === value; });
        options.push(option);
        if (option && option.child) {
            curLevel = option.child;
        }
    });
    return options;
}
exports.getOptions = getOptions;
function CascaderBox(_a) {
    var data = _a.data, value = _a.value, onChange = _a.onChange, onLoad = _a.onLoad, onClose = _a.onClose, changeOnSelect = _a.changeOnSelect, className = _a.className, style = _a.style, scheduleUpdate = _a.scheduleUpdate;
    // 内部状态
    var _b = tslib_1.__read(react_1.useState(value), 2), internalValue = _b[0], setInternalValue = _b[1];
    react_1.useLayoutEffect(function () {
        setInternalValue(value);
    }, [value]);
    // 面板
    var panels = react_1.useMemo(function () {
        var panels = [data];
        internalValue.forEach(function (value) {
            var option = panels[panels.length - 1].options.find(function (option) { return option.value === value; });
            if (option && option.child) {
                panels.push(option.child);
            }
        });
        return panels;
    }, [data, internalValue]);
    var _c = tslib_1.__read(react_1.useState(panels.length - 1), 2), curPanelIndex = _c[0], setCurPanelIndex = _c[1];
    react_1.useLayoutEffect(function () {
        if (scheduleUpdate) {
            scheduleUpdate();
        }
    }, [curPanelIndex, scheduleUpdate]);
    function handleSelect(index, value, _a) {
        var event = _a.event, hasChild = _a.hasChild;
        var newValue = tslib_1.__spread(internalValue.slice(0, index), [value]);
        if (changeOnSelect) {
            onChange(newValue, { event: event, options: getOptions(data, newValue) });
        }
        else {
            setInternalValue(newValue);
            if (!hasChild) {
                onChange(newValue, { event: event, options: getOptions(data, newValue) });
            }
        }
        if (hasChild) {
            setCurPanelIndex(index + 1);
        }
        else {
            onClose();
        }
    }
    return (react_1.default.createElement(Dropdown_1.DropdownBox, { className: className, style: style },
        react_1.default.createElement("div", { className: classnames_1.default("tea-cascader-menu", "tea-cascader-menu__col" + ((panels[curPanelIndex] &&
                panels[curPanelIndex].col) ||
                4)) },
            react_1.default.createElement(tabs_1.Tabs, { className: "tea-tabs--bordered", animated: false, activeId: String(curPanelIndex), onActive: function (_a) {
                    var id = _a.id;
                    return setCurPanelIndex(+id);
                }, tabs: panels.map(function (_a, index) {
                    var title = _a.title;
                    return ({
                        id: String(index),
                        label: title,
                    });
                }) }, panels.map(function (_a, index) {
                var options = _a.options;
                return (react_1.default.createElement(tabs_1.TabPanel, { id: String(index), key: index }, options ? (react_1.default.createElement("ul", { className: "tea-cascader-menu__list" }, options.map(function (_a) {
                    var value = _a.value, label = _a.label, child = _a.child;
                    return (react_1.default.createElement("li", { key: value },
                        react_1.default.createElement("div", { className: classnames_1.default("tea-cascader-menu__label", {
                                "is-selected": internalValue[index] === value,
                            }), onClick: function (event) {
                                return handleSelect(index, value, {
                                    event: event,
                                    hasChild: Boolean(child),
                                });
                            } }, label || value)));
                }))) : (react_1.default.createElement("ul", { className: "tea-cascader-menu__list", style: { margin: 0 } },
                    react_1.default.createElement(CascaderLoading_1.CascaderLoading, { onLoad: function () {
                            return onLoad(internalValue, getOptions(data, internalValue));
                        } })))));
            })))));
}
exports.CascaderBox = CascaderBox;
//# sourceMappingURL=CascaderBox.js.map