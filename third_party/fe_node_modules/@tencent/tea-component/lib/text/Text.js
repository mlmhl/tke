"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var tooltip_1 = require("../tooltip");
function TextRaw(props, ref) {
    var _a;
    var parent = props.parent, align = props.align, verticalAlign = props.verticalAlign, overflow = props.overflow, nowrap = props.nowrap, tooltip = props.tooltip, className = props.className, style = props.style, theme = props.theme, bgTheme = props.bgTheme, float = props.float, reset = props.reset, children = props.children, htmlProps = tslib_1.__rest(props, ["parent", "align", "verticalAlign", "overflow", "nowrap", "tooltip", "className", "style", "theme", "bgTheme", "float", "reset", "children"]);
    var element = react_1.default.createElement(parent || "span", tslib_1.__assign({ ref: ref, className: classnames_1.default(className, (_a = {},
            _a["tea-bg-" + bgTheme] = bgTheme,
            _a["tea-text"] = theme === "text",
            _a["tea-text-" + theme] = theme && theme !== "text",
            _a["tea-text-" + align] = align,
            _a["tea-align-" + verticalAlign] = verticalAlign,
            _a["tea-text-overflow"] = overflow,
            _a["tea-text-nowrap"] = nowrap,
            _a["tea-float-" + float] = float && float !== "clear",
            _a["tea-fz-reset"] = reset,
            _a["clearfix"] = float === "clear",
            _a)), style: style }, htmlProps), children);
    // 提供快捷 tooltip 使用方式
    if (tooltip) {
        element = react_1.default.createElement(tooltip_1.Tooltip, { title: tooltip }, element);
    }
    return element;
}
exports.Text = react_1.forwardRef(TextRaw);
//# sourceMappingURL=Text.js.map