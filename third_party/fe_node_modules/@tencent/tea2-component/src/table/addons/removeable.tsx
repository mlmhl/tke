import React from "react";
import { TableAddon, TableProps, RowRenderContext } from "../TableProps";
import { Icon } from "../../icon";
import { Button } from "../../button";

/**
 * `removeable` 插件用于支持表格可删除行的样式及操作。
 */
export interface RemoveableOptions<Record = any> {
  /**
   * 删除操作回调
   */
  onRemove?: (
    rowKey: string,
    context: { event: React.SyntheticEvent; record: Record }
  ) => void;

  /**
   * 列宽度，可以指定 CSS 属性或数字 (单位：px)
   * @default 46
   */
  width?: string | number;

  /**
   * 参考 Icon 组件[图标类型](/component/icon)
   *
   * @default "dismiss"
   */
  icon?: string;
}

const fallbackColumnKey = "__removeable_addon__";

let rowDisabled: TableProps["rowDisabled"] = null;

export function removeable({
  onRemove = () => null,
  width = 46,
  icon = "dismiss",
}: RemoveableOptions): TableAddon {
  return {
    onInjectProps: props => {
      rowDisabled = props.rowDisabled || (() => false);

      const columns = [
        ...props.columns,
        {
          key: fallbackColumnKey,
          header: "",
          width,
          render: () => null,
        },
      ];
      return { ...props, columns };
    },
    onInjectColumn: previous => (
      record,
      rowKey,
      recordIndex,
      column,
      columnIndex
    ) => {
      // 不是目标列
      if (column.key !== fallbackColumnKey) {
        return previous(record, rowKey, recordIndex, column, columnIndex);
      }

      const { children: preChildren, props, ...result } = previous(
        record,
        rowKey,
        recordIndex,
        column,
        columnIndex
      );

      let children = preChildren;

      // 非表头
      if (recordIndex !== -1 && !rowDisabled(record)) {
        children = (
          <Button
            type="icon"
            icon={icon}
            htmlType="button"
            onClick={event => onRemove(rowKey, { event, record })}
          />
        );
      }
      return { ...result, props, children };
    },
  };
}
