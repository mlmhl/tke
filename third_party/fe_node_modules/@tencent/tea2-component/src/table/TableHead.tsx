import React, { forwardRef, useContext } from "react";
import classNames from "classnames";
import { Text } from "../text";
import { TableBox } from "./TableBox";
import { TableProps } from "./TableProps";
import { useMiddleware } from "./util/use-middleware";
import { isCallable } from "../_util/is-callable";
import { useConfig } from "../_util/config-context";
import { TableVirtualizedBodyProps } from "./TableVirtualizedBody";
import { getFixedOffset, getFixedEndColumn } from "./TableBody";
import { TableContext } from "./TableContext";

export const TableHead = forwardRef(function TableHead(
  props: TableProps & {
    tableBoxStyle?: React.CSSProperties;
    // `scrollable` 开启虚拟滚动式注入该 props
    virtualizedOptions?: TableVirtualizedBodyProps;
  },
  ref: React.Ref<HTMLDivElement>
) {
  const { classPrefix } = useConfig();
  const { scrollStatus, columnsWidths } = useContext(TableContext);
  const {
    columns,
    addons,
    tableBoxStyle,
    disableTextOverflow,
    hideHeader,
    virtualizedOptions,
  } = props;

  const renderColumn = useMiddleware(
    addons,
    "onInjectColumn"
  )((record, rowKey, recordIndex, column, columnIndex) => {
    const { key, header } = column;
    let children: React.ReactNode = header;

    // pass a render function
    if (isCallable(header)) {
      children = header(column);
    }

    // forgot to pass, use a key as a reminder
    if (header === undefined) {
      children = key;
    }

    // plain values
    if (typeof header === "string" || typeof header === "number") {
      children = (
        <Text
          overflow={!disableTextOverflow}
          title={disableTextOverflow ? undefined : String(header)}
        >
          {header}
        </Text>
      );
    }
    return {
      props: {},
      children,
    };
  });

  const tableHeaders = columns.map((column, index) => {
    const { props, children } = renderColumn(null, null, -1, column, index);
    if (props.colSpan === 0) {
      return null;
    }
    if (virtualizedOptions) {
      props.style = {
        ...(props.style || {}),
        display: "inline-block",
        overflow: "hidden",
        boxSizing: "border-box",
        flex: column.width ? undefined : 1,
        flexBasis: column.width || 1,
      };
    }
    // 固定列
    if (
      (column.fixed === "left" || column.fixed === "right") &&
      column.fixed !== scrollStatus &&
      scrollStatus !== "no-scroll"
    ) {
      const end = getFixedEndColumn(columns);
      props.className = classNames(
        props.className,
        `${classPrefix}-table__td--fixed`,
        {
          [`${classPrefix}-table__td--fixed-${column.fixed}`]:
            end[column.fixed] === index,
        }
      );
      props.style = {
        ...(props.style || {}),
        position: "sticky",
        [column.fixed]: getFixedOffset(
          columns,
          index,
          columnsWidths,
          column.fixed
        ),
      };
    }

    return (
      <Text key={column.key} parent="th" {...props} align={column.align}>
        <div>{children}</div>
      </Text>
    );
  });

  return useMiddleware(
    addons,
    "onInjectHead"
  )(props => (
    <div
      className={`${classPrefix}-table__header`}
      ref={ref}
      style={hideHeader ? { display: "none" } : undefined}
    >
      <TableBox
        columns={columns}
        style={{
          ...(tableBoxStyle || {}),
          display: virtualizedOptions ? "block" : undefined,
        }}
        classPrefix={classPrefix}
      >
        <thead style={virtualizedOptions ? { display: "block" } : undefined}>
          <tr style={virtualizedOptions ? { display: "flex" } : undefined}>
            {tableHeaders}
          </tr>
        </thead>
      </TableBox>
    </div>
  ))(props);
});
