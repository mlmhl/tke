import React, { useMemo, forwardRef } from "react";
import {
  FixedSizeList,
  ListChildComponentProps,
  ListItemKeySelector,
} from "react-window";
import { useConfig } from "../util";
import { VirtualizedOptions } from "./addons/scrollable";

export interface TableVirtualizedBodyProps extends VirtualizedOptions {
  itemKey?: ListItemKeySelector;
  tableBoxStyle: React.CSSProperties;
  children?: React.ReactNode;
  onScrollCapture?: React.DOMAttributes<HTMLDivElement>["onScrollCapture"];
}

function Row({ data, index, style }: ListChildComponentProps) {
  return React.cloneElement(data[index], {
    style: { ...style, display: "flex" },
  });
}

export const TableVirtualizedBody = forwardRef(function TableVirtualizedBody(
  {
    tableBoxStyle,
    onScrollCapture,
    height,
    itemHeight,
    children,
  }: TableVirtualizedBodyProps,
  ref: React.Ref<HTMLDivElement>
) {
  const { classPrefix } = useConfig();

  const OuterElement = useMemo(
    () =>
      forwardRef((props, ref: React.Ref<HTMLDivElement>) => {
        return (
          <div
            className={`${classPrefix}-table__body`}
            ref={ref}
            onScrollCapture={onScrollCapture}
            {...props}
          />
        );
      }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );

  const InnerElement = useMemo(
    () =>
      forwardRef(
        (
          { style = {}, children }: React.HTMLAttributes<HTMLTableElement>,
          ref: React.Ref<HTMLTableElement>
        ) => (
          <table
            ref={ref}
            className={`${classPrefix}-table__box`}
            style={{ ...(tableBoxStyle || {}), ...style, maxHeight: undefined }}
          >
            <tbody>{children}</tbody>
          </table>
        )
      ),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );

  const items = useMemo(() => {
    const items = [];
    React.Children.forEach(children, chlid => {
      if (React.isValidElement(chlid) && chlid.type === React.Fragment) {
        items.push(...React.Children.toArray(chlid.props.children));
      } else {
        items.push(chlid);
      }
    });
    return items.filter(Boolean);
  }, [children]);

  return (
    <FixedSizeList
      outerRef={ref}
      outerElementType={OuterElement}
      innerElementType={InnerElement}
      height={height}
      width="100%"
      itemSize={itemHeight || 45}
      itemCount={items.length}
      itemData={items}
    >
      {Row}
    </FixedSizeList>
  );
});
