import React, {
  useEffect,
  useRef,
  useImperativeHandle,
  useLayoutEffect,
} from "react";
import classNames from "classnames";
import { useConfig } from "../util";
import { StyledProps } from "../_type";
import { useDefaultValue } from "../form";
import { forwardRefWithStatics } from "../_util/forward-ref-with-statics";
import { MonacoDiffEditor } from "./MonacoDiffEditor";

export interface MonacoEditorProps extends StyledProps {
  /**
   * [monaco-editor](https://microsoft.github.io/monaco-editor/index.html)
   *
   * @docType typeof monaco
   */
  monaco: typeof import("monaco-editor");

  /**
   * 编辑器高度
   *
   * @default "100%"
   */
  height?: React.CSSProperties["height"];

  /**
   * 编辑器宽度
   *
   * @default "100%"
   */
  width?: React.CSSProperties["width"];

  /**
   * 编辑器初始语言
   */
  language?: string;

  /**
   * 编辑器初始设置，详见 [IStandaloneEditorConstructionOptions](https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html)
   *
   * @docType IStandaloneEditorConstructionOptions
   */
  options?: import("monaco-editor").editor.IStandaloneEditorConstructionOptions;

  /**
   * 编辑器默认文本
   */
  defaultValue?: string;

  /**
   * 编辑器文本
   */
  value?: string;

  /**
   * 编辑器文本变化回调
   */
  onChange?: (
    value: string,
    context: { event: import("monaco-editor").editor.IModelContentChangedEvent }
  ) => void;
}

export const MonacoEditor = forwardRefWithStatics(
  function MonacoEditor(
    {
      monaco,
      options = {},
      language,
      className,
      style,
      width,
      height,
      ...props
    }: MonacoEditorProps,
    ref: React.Ref<{
      editor: import("monaco-editor").editor.IStandaloneCodeEditor;
    }>
  ) {
    const { classPrefix } = useConfig();
    const { value, onChange } = useDefaultValue(props as any, "");

    const containerRef = useRef<HTMLDivElement>(null);
    const editorRef = useRef<
      import("monaco-editor").editor.IStandaloneCodeEditor
    >(null);
    const changeEventRef = useRef<import("monaco-editor").IDisposable>(null);

    // https://github.com/react-monaco-editor/react-monaco-editor/blob/master/src/editor.js
    const preventTriggerChangeEvent = useRef<boolean>(false);

    useEffect(() => {
      if (editorRef.current) {
        editorRef.current.layout();
      }
    }, [width, height]);

    useEffect(() => {
      if (editorRef.current) {
        const model = editorRef.current.getModel();
        monaco.editor.setModelLanguage(model, language);
      }
    }, [language, monaco]);

    useEffect(() => {
      if (editorRef.current) {
        const editor = editorRef.current;
        const model = editor.getModel();
        if (value != null && value !== model.getValue()) {
          preventTriggerChangeEvent.current = true;
          editor.pushUndoStop();
          model.pushEditOperations(
            [],
            [
              {
                range: model.getFullModelRange(),
                text: value,
              },
            ],
            undefined
          );
          editor.pushUndoStop();
          preventTriggerChangeEvent.current = false;
        }
      }
    }, [value, monaco]);

    useLayoutEffect(() => {
      const editor = monaco.editor.create(containerRef.current, {
        ...options,
        value,
        language,
      });
      editorRef.current = editor;
      changeEventRef.current = editor.onDidChangeModelContent(event => {
        if (!preventTriggerChangeEvent.current) {
          onChange(editor.getValue(), { event });
        }
      });

      return () => {
        editorRef.current.dispose();
        const model = editorRef.current.getModel();
        if (model) {
          model.dispose();
        }
        if (changeEventRef.current) {
          changeEventRef.current.dispose();
        }
      };
    }, []); // eslint-disable-line react-hooks/exhaustive-deps

    useImperativeHandle(ref, () => ({
      editor: editorRef.current,
    }));

    return (
      <div
        className={classNames(
          `${classPrefix}-monaco-editor-container`,
          className
        )}
        style={{
          ...(style || {}),
          height: height || "100%",
          width: width || "100%",
        }}
        ref={containerRef}
      />
    );
  },
  {
    DiffEditor: MonacoDiffEditor,
  }
);
