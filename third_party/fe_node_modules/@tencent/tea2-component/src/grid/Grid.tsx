import React, { useContext } from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { useConfig } from "../_util/config-context";

export interface RowProps extends StyledProps {
  /**
   * 列之间的间隙
   * @default 20
   */
  gap?: number;

  /**
   * 栅格对齐方式，不传则栅格等高
   */
  verticalAlign?: "top" | "middle" | "bottom";

  /**
   * 是否展示分割线
   * @default false
   */
  showSplitLine?: boolean;

  /**
   * 包括的栅格列，请使用 <Col /> 作为子节点
   */
  children?: ColChild | ColChild[];
}

export interface ColProps extends StyledProps {
  /**
   * 栅格占位格数
   */
  span?: number;

  /**
   * 栅格单元中内容
   */
  children?: React.ReactNode;
}

type ColChild = React.ReactElement<ColProps, typeof Col>;

interface GridContextValue {
  gap: number;
}

const GridContext = React.createContext<GridContextValue>({ gap: 20 });

export function Row({
  gap,
  verticalAlign,
  showSplitLine,
  children,
  className,
  style,
}: RowProps) {
  const { classPrefix } = useConfig();
  let grid: GridContextValue = null;
  let rowStyle: React.CSSProperties = null;

  // 定义了 gap 的，才生成一个 grid 上下文，否则使用默认样式即可
  if (typeof gap === "number") {
    grid = { gap };
    rowStyle = {
      marginLeft: -gap / 2,
      marginRight: -gap / 2,
    };
  }

  rowStyle = {
    ...(rowStyle || {}),
    ...(style || {}),
  };

  const rowClassName = classNames(`${classPrefix}-grid`, className, {
    [`${classPrefix}-grid--split-line`]: showSplitLine,
    [`${classPrefix}-vertical--${verticalAlign}`]: verticalAlign,
  });

  return (
    <div className={rowClassName} style={rowStyle}>
      <GridContext.Provider value={grid}>{children}</GridContext.Provider>
    </div>
  );
}

export function Col({ span, className, style, children }: ColProps) {
  const { classPrefix } = useConfig();
  const grid = useContext(GridContext);

  let colStyle: React.CSSProperties = null;
  if (grid) {
    colStyle = {
      paddingLeft: grid.gap / 2,
      paddingRight: grid.gap / 2,
    };
  }

  const colClassName = classNames(
    `${classPrefix}-grid__item${span ? `-${span}` : ""}`,
    className
  );

  colStyle = {
    ...(colStyle || {}),
    ...(style || {}),
  };

  return (
    <div className={colClassName} style={colStyle}>
      <div className={`${classPrefix}-grid__box`}>{children}</div>
    </div>
  );
}
