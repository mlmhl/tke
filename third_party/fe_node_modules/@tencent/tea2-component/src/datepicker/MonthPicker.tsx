import React, { useState, useEffect, useRef, useCallback } from "react";
import classNames from "classnames";
import moment, { Moment, isMoment } from "moment";
import CalendarPart from "../calendar/CalendarPart";
import { ControlledProps, useDefaultValue } from "../form/controlled";
import { CalendarTable } from "../calendar/CalendarTable";
import { Combine } from "../_type";
import { Input } from "../input/Input";
import { DropdownBox } from "../dropdown";
import { CommonDatePickerProps } from "./DatePickerProps";
import { useTranslation } from "../i18n";
import { CalendarTableType, DateChangeContext } from "../calendar/DateProps";
import { withStatics } from "../_util/with-statics";
import { Popover } from "../popover/Popover";
import { DatePickerTrigger } from "./util";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";
import { Icon } from "../icon";
import { noop } from "../_util/noop";

export interface MonthPickerProps
  extends Combine<CommonDatePickerProps, ControlledProps<Moment>> {
  /**
   * 不可选的日期
   */
  // disabledMonth?: (date: Moment) => boolean;
}

export const MonthPicker = withStatics(
  function MonthPicker(props: MonthPickerProps) {
    const t = useTranslation(moment);
    const { classPrefix } = useConfig();
    const {
      header,
      className,
      style,
      value,
      onChange,
      disabled,
      format = "YYYY-MM",
      placeholder = t.selectDate,
      defaultOpen = false,
      open,
      onOpenChange = noop,
      placement = "bottom-start",
      placementOffset = 5,
      closeOnScroll = true,
      escapeWithReference,
      overlayClassName,
      overlayStyle,
      clearable,
    } = useDefaultValue(props);

    const [hover, setHover] = useState<boolean>(false);

    // 当前面板类型
    const [type, setType] = useState<CalendarTableType>("month");

    // 当前面板展示时间
    const [curViewMoment, setCurViewMoment] = useState<Moment>(
      isMoment(value) ? value : getDefaultViewMoment()
    );

    // 当前选中日期
    const [curValue, setCurValue] = useState<Moment>(value);

    // 选择器是否展开
    const [active, setActive] = useDefault(open, defaultOpen, onOpenChange);

    // 输入框显示值
    const inputRef = useRef<HTMLInputElement>(null);
    const getInputValue = useCallback(
      value => {
        return isMoment(value) ? value.locale(t.locale).format(format) : "";
      },
      [t.locale, format]
    );
    const [inputValue, setInputValue] = useState<string>(
      getInputValue(curValue)
    );

    useEffect(() => {
      setCurValue(value);
      setInputValue(getInputValue(value));
    }, [format, value, getInputValue]);

    function getDefaultViewMoment(): Moment {
      const { range } = props;
      const m = moment();
      // range 判断
      if (Array.isArray(range)) {
        let [start, end] = range;
        if (!isMoment(start)) {
          start = moment(0);
        }
        if (!isMoment(end)) {
          end = moment(2 ** 52);
        }
        if (end.isBefore(m, "year")) {
          return end;
        }
        if (start.isAfter(m, "year")) {
          return start;
        }
      }
      return m;
    }

    function handleChange(value: Moment, context: DateChangeContext) {
      setCurValue(value);
      setInputValue(getInputValue(value));
      onChange(value, context);
      handleClose();
    }

    function handleOpen() {
      if (disabled) {
        return;
      }
      setActive(true);
      setType("month");
    }

    function handleClose() {
      setInputValue(getInputValue(value));
      setActive(false);
    }

    return (
      <Popover
        trigger={[
          DatePickerTrigger,
          { onOpen: handleOpen, onClose: handleClose },
        ]}
        visible={active}
        onVisibleChange={setActive}
        placement={placement}
        placementOffset={placementOffset}
        closeOnScroll={closeOnScroll}
        escapeWithReference={escapeWithReference}
        overlayClassName={overlayClassName}
        overlayStyle={overlayStyle}
        overlay={
          <DropdownBox>
            <CalendarPart.Panel>
              {!!header && <CalendarPart.Header>{header}</CalendarPart.Header>}
              <CalendarTable
                {...props}
                monthOnly
                value={curValue}
                onChange={handleChange}
                type={type}
                onTypeChange={setType}
                curViewMoment={curViewMoment}
                onCurViewMomentChange={setCurViewMoment}
              />
            </CalendarPart.Panel>
          </DropdownBox>
        }
      >
        <div
          className={classNames(`${classPrefix}-monthpicker`, className)}
          style={style}
        >
          <div
            className={classNames(`${classPrefix}-monthpicker__input`, {
              "is-hover": hover && value && clearable,
            })}
            onMouseEnter={() => setHover(true)}
            onMouseLeave={() => setHover(false)}
          >
            <Input
              ref={inputRef}
              disabled={disabled}
              placeholder={placeholder}
              value={inputValue}
              onFocus={() => inputRef.current.blur()}
            />
            {clearable && (
              <Icon
                type="dismiss"
                onClick={event => {
                  event.stopPropagation();
                  onChange(null, { event });
                }}
              />
            )}
          </div>
        </div>
      </Popover>
    );
  },
  {
    defaultLabelAlign: "middle",
  }
);
