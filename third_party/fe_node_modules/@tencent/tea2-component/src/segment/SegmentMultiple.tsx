import React from "react";
import classNames from "classnames";
import { ControlledProps, useDefaultValue } from "../form/controlled";
import { SegmentOption } from "./SegmentOption";
import { Combine, StyledProps } from "../_type";
import { Button } from "../button";
import { useConfig } from "../_util/config-context";
import { SegmentGroup, SegmentGroupItem } from "./SegmentGroup";

export interface SegmentMultipleProps
  extends Combine<StyledProps, ControlledProps<string[]>> {
  options?: SegmentOption[];

  /**
   * 分组
   */
  groups?: {
    [groupKey: string]: React.ReactNode;
  };

  /**
   * 是否为无边框样式
   * @default false
   */
  rimless?: boolean;
}

export function SegmentMultiple(props: SegmentMultipleProps) {
  const { value, onChange, groups, options } = useDefaultValue(props);
  const valueSet = new Set<string>(value);
  if (groups) {
    return (
      <SegmentGroup>
        {Object.entries(groups).map(([key, name]) => {
          const subOptions = options.filter(i => i.groupKey === key);
          return (
            <SegmentGroupItem name={name} key={key}>
              <SegmentMain
                {...props}
                valueSet={valueSet}
                options={subOptions}
                allOptions={options}
                value={value}
                onChange={onChange}
              />
            </SegmentGroupItem>
          );
        })}
      </SegmentGroup>
    );
  }
  return (
    <SegmentMain
      {...props}
      valueSet={valueSet}
      value={value}
      onChange={onChange}
    />
  );
}

function SegmentMain({
  onChange,
  rimless,
  options,
  style,
  className,
  // 兼容分组
  valueSet,
  allOptions = options,
}: SegmentMultipleProps & {
  valueSet: Set<string>;
  allOptions?: SegmentMultipleProps["options"];
}) {
  const { classPrefix } = useConfig();
  return (
    <div
      className={classNames(`${classPrefix}-segment`, className, {
        [`${classPrefix}-segment--rimless`]: rimless,
      })}
      style={style}
    >
      {options.map(option => (
        <Button
          key={option.value}
          disabled={option.disabled}
          tooltip={option.tooltip}
          className={classNames({
            "is-selected": valueSet.has(option.value),
          })}
          onClick={
            option.disabled
              ? null
              : event => {
                  let newValue: string[];

                  // 之前已经选中，新值排除此值
                  if (valueSet.has(option.value)) {
                    newValue = allOptions
                      .filter(x => x !== option && valueSet.has(x.value))
                      .map(x => x.value);
                  }
                  // 之前没有选中，新值包含次值
                  else {
                    newValue = allOptions
                      .filter(x => x === option || valueSet.has(x.value))
                      .map(x => x.value);
                  }
                  onChange(newValue, { event });
                }
          }
        >
          {option.text || option.value}
        </Button>
      ))}
    </div>
  );
}

SegmentMultiple.defaultLabelAlign = "middle";
