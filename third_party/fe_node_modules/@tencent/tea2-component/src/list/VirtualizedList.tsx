import React, {
  useState,
  useEffect,
  useRef,
  forwardRef,
  useMemo,
  useCallback,
  createElement,
} from "react";
import {
  VariableSizeList,
  ListOnScrollProps,
  ListChildComponentProps,
} from "react-window";
import { ListProps, List, ListItemProps } from "./List";
import { DropdownBox } from "../dropdown";
import { forwardRefWithStatics } from "../_util/forward-ref-with-statics";
import { RocketProps } from "../_util/create-rocket";
import { EmptyTip } from "../tips";
import { mergeRefs } from "../_util/merge-refs";
import { StyledProps } from "../_type";
import { noop } from "../_util/noop";

export interface VirtualizedListProps
  extends Omit<ListProps, "onScrollBottom" | "children"> {
  /**
   * 列表项
   */
  items: VirtualizedListItem[];

  /**
   * 列表高
   */
  listHeight?: number;

  /**
   * 滚动到底部事件
   */
  onScrollBottom?: (props: ListOnScrollProps) => void;

  /**
   * 虚拟滚动组件 ref
   */
  virtualizedRef?: React.Ref<VariableSizeList>;

  /**
   * 用于参照的列表容器
   * @default DropdownBox
   */
  container?:
    | React.FunctionComponent<StyledProps>
    | React.ComponentClass<StyledProps>
    | string;

  /**
   * 列表容器样式
   */
  containerStyle?: React.CSSProperties;

  /**
   * 列表容器类名
   */
  containerClassName?: string;
}

function Row({ data, index, style }: ListChildComponentProps) {
  const { type, text, props = {} } = data[index];
  if (type === "tips") {
    return (
      <VStatusTip {...props} style={style}>
        {text}
      </VStatusTip>
    );
  }
  if (type === "group") {
    return (
      <VGroupLabel {...props} style={style}>
        {text}
      </VGroupLabel>
    );
  }
  return (
    <VItem {...props} style={style}>
      {text}
    </VItem>
  );
}

export const VirtualizedList = forwardRefWithStatics(
  function VirtualizedList(
    {
      items = [],
      onScrollBottom,
      virtualizedRef,
      listHeight,
      // ListProps
      type,
      split,
      className,
      style,
      container,
      containerStyle,
      containerClassName,
    }: VirtualizedListProps,
    ref: React.Ref<HTMLUListElement>
  ) {
    const vRef = useRef<VariableSizeList>(null);
    const listRef = useRef<HTMLDivElement>(null);
    const [tipsSize, setTipsSize] = useState<number>(undefined);
    const [itemSize, setItemSize] = useState<number>(undefined);
    const [groupSize, setGroupSize] = useState<number>(undefined);
    const [listSize, setListSize] = useState<number>(listHeight);

    const innerElementType = useMemo(
      () =>
        forwardRef(
          (
            { style: innerStyle = {}, ...innerProps }: ListProps,
            ref: React.Ref<HTMLUListElement>
          ) => (
            <List
              ref={ref}
              type={type}
              split={split}
              className={className}
              {...innerProps}
              style={{
                ...style,
                ...innerStyle,
                maxHeight: "initial",
                overflowY: "initial",
              }}
            />
          )
        ),
      [type, split, className, style]
    );

    const getItemSize = useCallback(
      (index: number) => {
        switch (items[index].type) {
          case "tips":
            return tipsSize || itemSize;
          case "group":
            return groupSize || itemSize;
          default:
            return itemSize;
        }
      },
      [groupSize, itemSize, items, tipsSize]
    );

    // VariableSizeList 默认按 index 缓存 style，需手动触发重置
    useEffect(() => {
      if (vRef.current) {
        items.forEach((_, i) => vRef.current.resetAfterIndex(i, false));
      }
    }, [groupSize, itemSize, items, tipsSize]);

    const itemsSize = items.reduce((p, _, i) => p + getItemSize(i), 0);

    function handleScroll(props: ListOnScrollProps) {
      if (itemsSize > listSize && listRef.current && onScrollBottom) {
        const { scrollHeight, scrollTop, clientHeight } = listRef.current;
        if (scrollHeight <= Math.round(clientHeight + scrollTop)) {
          onScrollBottom(props);
        }
      }
    }

    const option = items.find(i => i.type === "option")?.text;
    const tips = items.find(i => i.type === "tips")?.text;
    const group = items.find(i => i.type === "group")?.text;

    return (
      <>
        {[itemSize, listSize].every(s => typeof s !== "undefined") && (
          <VariableSizeList
            ref={mergeRefs(virtualizedRef, vRef)}
            innerRef={ref}
            outerRef={listRef}
            height={Math.min(itemsSize, listSize)}
            width="100%"
            itemCount={items.length}
            itemSize={getItemSize}
            innerElementType={innerElementType}
            onScroll={handleScroll}
            itemKey={index => items[index].key}
            itemData={items}
          >
            {Row}
          </VariableSizeList>
        )}
        <MirrorList
          container={container}
          containerStyle={containerStyle}
          containerClassName={containerClassName}
          onItemSizeChange={setItemSize}
          onListSizeChange={listHeight ? noop : setListSize}
          onTipsSizeChange={setTipsSize}
          onGroupSizeChange={setGroupSize}
          tipsReference={tips}
          itemReference={option}
          groupReference={group}
          type={type}
          split={split}
          className={className}
          style={style}
        />
      </>
    );
  },
  {
    displayName: "VirtualizedList",
  }
);

function MirrorList({
  itemReference,
  tipsReference,
  groupReference,
  onTipsSizeChange,
  onItemSizeChange,
  onGroupSizeChange,
  onListSizeChange,
  container = DropdownBox,
  containerStyle = {},
  containerClassName,
  ...props
}: ListProps & {
  container: VirtualizedListProps["container"];
  containerClassName: VirtualizedListProps["containerClassName"];
  containerStyle: VirtualizedListProps["containerStyle"];
  tipsReference?: React.ReactNode;
  itemReference?: React.ReactNode;
  groupReference?: React.ReactNode;
  onTipsSizeChange: (size: number) => void;
  onItemSizeChange: (size: number) => void;
  onGroupSizeChange: (size: number) => void;
  onListSizeChange: (size: number) => void;
}) {
  const tipsRef = useRef<HTMLUListElement>(null);
  const listRef = useRef<HTMLUListElement>(null);
  const groupRef = useRef<HTMLUListElement>(null);
  const itemRef = useRef<HTMLLIElement>(null);

  useEffect(() => {
    if (itemRef.current) {
      onItemSizeChange(itemRef.current.clientHeight);
    }
    // tipsRef / groupRef 存在时才取高度
    if (tipsRef.current && tipsReference) {
      onTipsSizeChange(tipsRef.current.clientHeight);
    }
    if (groupRef.current && groupReference) {
      onGroupSizeChange(groupRef.current.clientHeight);
    }
    if (listRef.current) {
      onListSizeChange(listRef.current.clientHeight);
    }
  }, [
    tipsReference,
    itemReference,
    groupReference,
    onTipsSizeChange,
    onItemSizeChange,
    onGroupSizeChange,
    onListSizeChange,
  ]);

  return createElement(
    container,
    {
      style: {
        ...containerStyle,
        position: "absolute",
        top: -9999,
        left: 0,
      },
      className: containerClassName,
    },
    <List {...props} ref={listRef}>
      <List.StatusTip ref={tipsRef}>
        {tipsReference || <EmptyTip />}
      </List.StatusTip>
      <List.GroupLabel ref={groupRef}>
        {groupReference || "MirrorGroup"}
      </List.GroupLabel>
      <List.Item ref={itemRef}>{itemReference || "MirrorItem"}</List.Item>
      <li style={{ height: 3000 }}>Holder</li>
    </List>
  );
}

export type VirtualizedListItemType = "tips" | "option" | "group";

/**
 * 虚拟滚动列表项
 */
export interface VirtualizedListItem<T = any> {
  /**
   * 列表项类型
   */
  type: VirtualizedListItemType;

  /**
   * 列表项标识
   */
  key: string;

  /**
   * 列表项展示内容
   */
  text: React.ReactNode;

  /**
   * 列表项附加内容
   */
  props?: ListItemProps;

  /**
   * 列表项属性
   */
  option?: T;
}

function VItem({ style = {}, ...props }: ListItemProps) {
  return (
    <List.Item
      {...props}
      style={{
        ...style,
        boxSizing: "border-box",
      }}
    />
  );
}

function VGroupLabel({ style = {}, ...props }: RocketProps) {
  return (
    <List.GroupLabel
      {...props}
      style={{
        ...style,
        boxSizing: "border-box",
      }}
    />
  );
}

function VStatusTip({ style = {}, ...props }: RocketProps) {
  return (
    <List.StatusTip
      {...props}
      style={{
        ...style,
        boxSizing: "border-box",
      }}
    />
  );
}
