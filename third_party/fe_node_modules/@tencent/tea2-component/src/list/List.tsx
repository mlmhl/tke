import React, { forwardRef, useEffect, useState } from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { createRocket } from "../_util/create-rocket";
import { Tooltip } from "../tooltip";
import { DropdownBox } from "../dropdown";
import { forwardRefWithStatics } from "../_util/forward-ref-with-statics";
import { useConfig } from "../_util/config-context";
import { isChildOfType } from "../_util/is-child-of-type";

export interface ListItemProps extends StyledProps {
  /**
   * 是否处于激活态
   */
  current?: boolean;

  /**
   * 是否处于选中态
   */
  selected?: boolean;

  /**
   * 是否处于禁用态
   */
  disabled?: boolean;

  /**
   * 点击时回调
   */
  onClick?: (evt: React.MouseEvent) => void;

  /**
   * Tooltip 说明文本
   */
  tooltip?: React.ReactNode;

  /**
   * 菜单项
   */
  children?: React.ReactNode;
}

export const ListItem = forwardRef(function ListItem(
  {
    children,
    className,
    current,
    disabled,
    selected,
    onClick,
    tooltip,
    ...props
  }: ListItemProps,
  ref: React.Ref<HTMLLIElement>
) {
  return (
    <Tooltip title={tooltip}>
      <li
        {...props}
        ref={ref}
        className={classNames(className, {
          "is-current": current,
          "is-disabled": disabled,
          "is-selected": selected,
        })}
        onClick={disabled ? null : onClick}
      >
        {children}
      </li>
    </Tooltip>
  );
});

export interface ListSubMenuProps extends StyledProps {
  /**
   * 子菜单名
   */
  label?: React.ReactNode;

  /**
   * 菜单项
   */
  children?: React.ReactNode;

  /**
   * 弹出方向
   * @default "right"
   */
  placement?: "right" | "left" | "right-end" | "left-end";
}

export function SubMenu({
  label,
  children,
  placement = "right",
  className,
  ...props
}: ListSubMenuProps) {
  const { classPrefix } = useConfig();
  const dropdownStyle = { position: undefined };
  const [basePlacement, placementModifier] = placement.split("-");

  if (basePlacement === "left") {
    Object.assign(dropdownStyle, {
      left: "auto",
      right: "100%",
    });
  }

  if (placementModifier === "end") {
    Object.assign(dropdownStyle, {
      top: undefined,
      transform: "translateY(-100%)",
      marginTop: 6,
    });
  }

  return (
    <li
      className={classNames(`${classPrefix}-list__submenu`, className)}
      {...props}
    >
      {label}
      <DropdownBox style={dropdownStyle}>{children}</DropdownBox>
    </li>
  );
}

export interface ListProps extends StyledProps {
  /**
   * 列表内容。使用 `<List.Item>` 来表示列表项
   */
  children?: React.ReactNode;

  /**
   * 列表类型
   *
   * - 可以不传，表示简单平铺的列表
   * - `bullet` 列表项以点号开头
   * - `number` 列表项以列表序号开头
   * - `option` 列表以菜单的形式渲染
   * - `option-group` 列表以分组菜单的形式渲染
   */
  type?: "bullet" | "number" | "option" | "option-group";

  /**
   * 列表项之间的分割方式
   *
   * - `divide` 表示使用分割线分割
   * - `stripe` 表示使用条纹背景色分割
   */
  split?: "divide" | "stripe";

  /**
   * 列表项滚动至底部的回调
   */
  onScrollBottom?: (event: React.UIEvent) => void;
}

export const List = forwardRefWithStatics(
  function List(
    {
      className,
      style,
      children,
      type,
      split,
      onScrollBottom = () => null,
    }: ListProps,
    ref: React.Ref<HTMLUListElement | HTMLOListElement>
  ) {
    const { classPrefix } = useConfig();

    const [hasSubMenu, setHasSubMenu] = useState<boolean>(false);

    useEffect(() => {
      React.Children.forEach(children, child => {
        if (isChildOfType(child, SubMenu)) {
          setHasSubMenu(true);
        }
      });
    }, []); // eslint-disable-line react-hooks/exhaustive-deps

    function handleBodyScroll(event: React.UIEvent<HTMLElement>) {
      const list = event.target as HTMLElement;
      const { scrollHeight, scrollTop, clientHeight } = list;
      if (scrollHeight <= Math.round(clientHeight + scrollTop)) {
        onScrollBottom(event);
      }
    }

    const digits = String(React.Children.count(children)).length;

    const listClassName = classNames({
      [`${classPrefix}-list`]: true,
      [`${classPrefix}-list--bullet`]: type === "bullet",
      [`${classPrefix}-list--number`]: type === "number",
      [`${classPrefix}-list--option`]:
        type === "option" || type === "option-group",
      [`${classPrefix}-list--group`]: type === "option-group",
      [`${classPrefix}-list--divider`]: split === "divide",
      [`${classPrefix}-list--striped`]: split === "stripe",
      "is-2digits": type === "number" && digits === 2,
      "is-3digits": type === "number" && digits === 3,
      "is-4digits": type === "number" && digits > 3,
      [className]: className,
    });

    const Parent = type === "number" ? "ol" : "ul";

    return (
      <Parent
        ref={ref as any}
        className={listClassName}
        style={{
          // 多级菜单展开
          maxHeight: hasSubMenu ? "none" : undefined,
          ...(style || {}),
        }}
        onScroll={handleBodyScroll}
      >
        {children}
      </Parent>
    );
  },
  {
    GroupLabel: createRocket("GroupLabel", "li.@{prefix}-list__label"),
    StatusTip: createRocket("TipItem", "li.@{prefix}-list__status"),
    SubMenu,
    Item: ListItem,
  }
);
