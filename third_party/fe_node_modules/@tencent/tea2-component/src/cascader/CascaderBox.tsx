import React, { useMemo, useState, useLayoutEffect } from "react";
import classNames from "classnames";
import { DropdownBox } from "../dropdown/Dropdown";
import {
  CascaderBoxProps,
  CascaderData,
  CascaderOption,
} from "./CascaderProps";
import { Tabs, TabPanel } from "../tabs";
import { CascaderLoading } from "./CascaderLoading";

export function getOptions(
  data: CascaderData,
  valueList: CascaderBoxProps["value"]
): CascaderOption[] {
  const options = [];

  let curLevel = data;
  valueList.forEach(value => {
    const option = curLevel.options.find(option => option.value === value);
    options.push(option);
    if (option && option.child) {
      curLevel = option.child;
    }
  });

  return options;
}

export function CascaderBox({
  data,
  value,
  onChange,
  onLoad,
  onClose,
  changeOnSelect,
  className,
  style,
  scheduleUpdate,
  classPrefix,
  multiple,
  isSelected,
  onDeselect,
}: CascaderBoxProps & { scheduleUpdate: () => void }) {
  // 内部状态
  const [internalValue, setInternalValue] = useState(value || []);
  useLayoutEffect(() => {
    setInternalValue(value || []);
  }, [value]);

  // 面板
  const panels = useMemo(() => {
    const panels = [data];
    internalValue.forEach(value => {
      const option = panels[panels.length - 1].options.find(
        option => option.value === value
      );
      if (option && option.child) {
        panels.push(option.child);
      }
    });
    return panels;
  }, [data, internalValue]);
  const [curPanelIndex, setCurPanelIndex] = useState(panels.length - 1);

  useLayoutEffect(() => {
    if (scheduleUpdate) {
      scheduleUpdate();
    }
  }, [curPanelIndex, scheduleUpdate]);

  function handleSelect(index, value, { event, hasChild }) {
    const newValue = [...internalValue.slice(0, index), value];
    if (changeOnSelect) {
      onChange(newValue, { event, options: getOptions(data, newValue) });
    } else {
      setInternalValue(newValue);
      if (!hasChild) {
        onChange(newValue, { event, options: getOptions(data, newValue) });
      }
    }

    if (hasChild) {
      setCurPanelIndex(index + 1);
    } else if (!multiple) {
      onClose();
    }
  }

  return (
    <DropdownBox className={className} style={style}>
      <div
        className={classNames(
          `${classPrefix}-cascader-menu`,
          `${classPrefix}-cascader-menu__col${(panels[curPanelIndex] &&
            panels[curPanelIndex].col) ||
            4}`
        )}
      >
        <Tabs
          className={`${classPrefix}-tabs--bordered`}
          animated={false}
          activeId={String(curPanelIndex)}
          onActive={({ id }) => setCurPanelIndex(+id)}
          tabs={panels.map(({ title }, index) => ({
            id: String(index),
            label: title,
          }))}
        >
          {panels.map(({ options }, index) => {
            return (
              <TabPanel id={String(index)} key={index}>
                {options ? (
                  <ul className={`${classPrefix}-cascader-menu__list`}>
                    {options.map(({ value, label, child }) => {
                      const optionValue = [
                        ...internalValue.slice(0, index),
                        value,
                      ];
                      return (
                        <li key={value}>
                          <div
                            className={classNames(
                              `${classPrefix}-cascader-menu__label`,
                              {
                                "is-selected": multiple
                                  ? isSelected(optionValue)
                                  : internalValue[index] === value,
                              }
                            )}
                            onClick={event => {
                              if (multiple && isSelected(optionValue)) {
                                onDeselect(optionValue, {
                                  event,
                                  options: getOptions(data, optionValue),
                                });
                                return;
                              }
                              handleSelect(index, value, {
                                event,
                                hasChild: Boolean(child),
                              });
                            }}
                          >
                            {label || value}
                          </div>
                        </li>
                      );
                    })}
                  </ul>
                ) : (
                  <ul
                    className={`${classPrefix}-cascader-menu__list`}
                    style={{ margin: 0 }}
                  >
                    <CascaderLoading
                      onLoad={() =>
                        onLoad(internalValue, getOptions(data, internalValue))
                      }
                    />
                  </ul>
                )}
              </TabPanel>
            );
          })}
        </Tabs>
      </div>
    </DropdownBox>
  );
}
