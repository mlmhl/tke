import React, { useState } from "react";
import classNames from "classnames";
import { useDefaultValue } from "../form";
import { Popover } from "../popover";
import { Input } from "../input";
import { Icon } from "../icon";
import { useTranslation } from "../i18n";
import { CascaderBaseProps, CascaderSingleProps } from "./CascaderProps";
import { CascaderBox, getOptions } from "./CascaderBox";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";
import { noop } from "../_util/noop";

export function CascaderSingle(props: CascaderBaseProps & CascaderSingleProps) {
  const t = useTranslation();
  const { classPrefix } = useConfig();
  const {
    data,
    value,
    onChange,
    onLoad,
    disabled,
    changeOnSelect,
    className,
    style,
    placeholder = t.pleaseSelect,
    defaultOpen = false,
    open,
    onOpenChange = noop,
    placement = "bottom-start",
    placementOffset = 5,
    closeOnScroll = true,
    escapeWithReference,
    overlayClassName,
    overlayStyle,
    clearable,
  } = useDefaultValue(props, []);
  const [hover, setHover] = useState<boolean>(false);
  const [isOpened, setIsOpened] = useDefault(open, defaultOpen, onOpenChange);
  const options = getOptions(data, value);

  return (
    <Popover
      trigger={disabled ? "empty" : "click"}
      visible={isOpened}
      onVisibleChange={setIsOpened}
      placement={placement || "bottom-start"}
      placementOffset={placementOffset}
      closeOnScroll={closeOnScroll}
      escapeWithReference={escapeWithReference}
      overlayClassName={overlayClassName}
      overlayStyle={overlayStyle}
      overlay={({ scheduleUpdate }) => {
        return (
          <CascaderBox
            data={data}
            value={value}
            onChange={onChange}
            onLoad={onLoad}
            onClose={() => setIsOpened(false)}
            changeOnSelect={changeOnSelect}
            scheduleUpdate={scheduleUpdate}
            classPrefix={classPrefix}
          />
        );
      }}
    >
      <div
        className={classNames(`${classPrefix}-cascader`, className)}
        style={style}
        onMouseEnter={() => setHover(true)}
        onMouseLeave={() => setHover(false)}
      >
        <div className={`${classPrefix}-cascader__input`}>
          <div className={`${classPrefix}-cascader__value`}>
            {options.map(
              ({ value, label } = { value: undefined, label: undefined }) => (
                <span key={value} className={`${classPrefix}-cascader__label`}>
                  {label || value}
                </span>
              )
            )}
          </div>
          <Input
            readonly
            autoComplete="off"
            placeholder={value.length ? "" : placeholder}
          />
        </div>
        {clearable && hover && value.length ? (
          <Icon
            type="dismiss"
            onClick={event => {
              event.stopPropagation();
              onChange([], { event, options: [] });
            }}
          />
        ) : (
          <Icon type="arrowdown" />
        )}
      </div>
    </Popover>
  );
}

CascaderSingle.defaultLabelAlign = "middle";
