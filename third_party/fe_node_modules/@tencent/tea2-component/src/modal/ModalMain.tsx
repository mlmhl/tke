import React, { useEffect, ReactNode, useRef } from "react";
import { createPortal } from "react-dom";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { Button } from "../button";
import { FadeTransition, SlideTransition } from "../transition";
import { createRocket } from "../_util/create-rocket";
import { getOverlayRoot } from "../_util/get-overlay-root";
import { useVisibleTransition } from "../_util/use-visible-transition";
import { callBoth } from "../_util/call-both";
import { ModalMessage } from "./ModalMessage";
import { useOutsideClick } from "../_util/use-outside-click";
import { useConfig } from "../_util/config-context";
import { uuid } from "../_util/uuid";

let modalStack = [];

/**
 * 对话框组件配置：
 */
export interface ModalProps extends StyledProps {
  /**
   * 对话框内容
   */
  children?: ReactNode;

  /**
   * 对话框是否可见
   */
  visible?: boolean;

  /**
   * 对话框的标题
   * 如果禁用关闭图标的同时，没有传入对话框标题，则不渲染标题
   */
  caption?: string | JSX.Element;

  /**
   * 对话框尺寸，决定对话框的宽度
   *   - `"s"` 小尺寸对话框，宽度 480px
   *   - `"m"` 默认尺寸对话框，宽度 550px
   *   - `"l"` 大尺寸对话框，宽度 800px
   *   - `"xl"` 超大尺寸对话框，宽度 950px
   *   - `"auto"` 自动适应宽度
   *   - 传入数字/百分比可以自定义宽度
   */
  size?: "s" | "m" | "l" | "xl" | "auto" | number | string;

  /**
   * 对话框关闭时回掉
   */
  onClose?: () => void;

  /**
   * 对话框关闭动画结束时回调
   */
  onExited?: () => void;

  /**
   * 默认 ESC 键会触发 `onClose` 的调用，设置为 `true` 禁止该行为
   * @default false
   */
  disableEscape?: boolean;

  /**
   * 是否禁用关闭图标
   * 如果禁用关闭图标的同时，没有传入对话框标题，则不渲染标题
   * @default false
   */
  disableCloseIcon?: boolean;

  /**
   * 是启用点击遮罩关闭
   * @default false
   */
  maskClosable?: boolean;

  /**
   * 关闭时是否销毁 Modal 中元素
   * @default true
   * @version 2.3.0
   */
  destroyOnClose?: boolean;
}

// 容器们
const ModalBackDrop = createRocket("ModalBackDrop", "div.@{prefix}-backdrop");
const ModalHeader = createRocket("ModalHeader", "div.@{prefix}-dialog__header");
const ModalBody = createRocket("ModalBody", "div.@{prefix}-dialog__body");
const ModalFooter = createRocket(
  "ModalFooter",
  "div.@{prefix}-dialog__footer",
  "div.@{prefix}-dialog__btnwrap"
);

/**
 * 模态对话框组件
 */
export function Modal({
  visible,
  caption,
  size,
  onClose,
  onExited,
  disableEscape,
  disableCloseIcon,
  maskClosable,
  destroyOnClose = true,
  className,
  style,
  children,
}: ModalProps) {
  const { classPrefix } = useConfig();
  const ref = useRef(null);
  const idRef = useRef(uuid());
  const dialogRef = useRef<React.ReactNode>(null);

  const { listen, ignoreProps } = useOutsideClick(ref);
  listen(() => maskClosable && visible && onClose());

  // 监听 ESC 键
  useEffect(() => {
    if (!visible) {
      return () => null;
    }
    const handleKeydown = (evt: KeyboardEvent) => {
      if (
        evt.keyCode === 27 &&
        !disableEscape &&
        modalStack[modalStack.length - 1] === idRef.current &&
        onClose
      ) {
        onClose();
      }
    };
    window.addEventListener("keydown", handleKeydown);
    return () => window.removeEventListener("keydown", handleKeydown);
  }, [visible, disableEscape, onClose]);

  const {
    contentIn,
    shouldContentEnter,
    shouldContentRender,
    onContentExit,
  } = useVisibleTransition(visible);

  useEffect(() => {
    const id = idRef.current;
    // 等待动画及全部 esc 事件触发完毕
    setTimeout(() => {
      if (visible) {
        modalStack.push(id);
      } else {
        modalStack = modalStack.filter(i => i !== id);
      }
    }, 100);
  }, [visible]);

  if (!shouldContentRender && destroyOnClose) {
    return null;
  }

  // 有标题，或者有图标，就需要渲染 header
  const hasHeader = Boolean(caption) || !disableCloseIcon;

  // 内置尺寸名称
  let sizeClassName: string = null;
  if (typeof size === "string" && ["s", "l", "xl", "auto"].indexOf(size) > -1) {
    sizeClassName = `size-${size}`;
  }

  const dialog = (
    <div
      className={`${classPrefix}-overlay ${classPrefix}-dialog-parent`}
      style={{
        display: !destroyOnClose && !contentIn ? "none" : undefined,
      }}
    >
      <FadeTransition in={shouldContentEnter} opacity={0.5}>
        <ModalBackDrop />
      </FadeTransition>
      <SlideTransition
        unmountOnExit={destroyOnClose}
        in={shouldContentEnter}
        onExited={callBoth(onExited, onContentExit)}
      >
        <div
          className={classNames(`${classPrefix}-dialog`, className)}
          style={style}
          onClick={e => e.stopPropagation()}
        >
          <div
            ref={ref}
            className={classNames(
              `${classPrefix}-dialog__inner`,
              sizeClassName
            )}
            style={size > 0 || /%$/.test(String(size)) ? { width: size } : null}
            {...ignoreProps}
          >
            {hasHeader && (
              <ModalHeader>
                {caption && (
                  <h3 className={`${classPrefix}-dialog__headertitle`}>
                    {caption}
                  </h3>
                )}
                {!disableCloseIcon && <Button icon="close" onClick={onClose} />}
              </ModalHeader>
            )}
            {children}
          </div>
        </div>
      </SlideTransition>
    </div>
  );

  return createPortal(dialog, getOverlayRoot());
}

/**
 * 渲染对话框的主要内容
 */
Modal.Body = ModalBody;

/**
 * 渲染对话框的底部内容
 */
Modal.Footer = ModalFooter;

/**
 * 对话框消息内容，可置于 Modal.Body 中
 */
Modal.Message = ModalMessage;
