import React, { useEffect, useState, useRef } from "react";
import ReactDOM from "react-dom";
import { Modal, ModalProps } from "./ModalMain";
import { Button } from "../button";
import { ModalMessage } from "./ModalMessage";
import { Combine } from "../_type";
import { useTranslation } from "../i18n";
import { ConfigProvider } from "../configprovider";

/**
 * `Modal.confirm` 方法接收以下参数：
 */
export interface ConfirmOptions {
  /**
   * 要询问的消息
   */
  message: React.ReactNode;

  /**
   * 可选的详细解释
   */
  description?: React.ReactNode;

  /**
   * 确认按钮的文案
   */
  okText?: React.ReactNode;

  /**
   * 取消按钮的文案
   */
  cancelText?: React.ReactNode;

  /**
   * 是否禁用关闭图标。
   *
   * 默认情况下会显示，关闭对话框认为是取消操作。
   * @default false
   */
  disableCloseIcon?: boolean;

  /**
   * 对话框尺寸，决定对话框的宽度，详见 ModalProps 中 `size` 属性
   */
  size?: ModalProps["size"];
}

/**
 * API 的方式唤起一个确认对话框
 * @param options
 * @returns 异步返回布尔值，为 true 则表示用户确认，为 false 则表示用户取消
 */
export function confirm(options: ConfirmOptions) {
  return new Promise<boolean>(resolve => {
    const el = document.createElement("div");
    ReactDOM.render(
      <ConfigProvider>
        <ModalConfirmAPI
          {...options}
          onOk={() => resolve(true)}
          onCancel={() => resolve(false)}
          onExited={() => {
            ReactDOM.unmountComponentAtNode(el);
          }}
        />
      </ConfigProvider>,
      el
    );
  });
}

function ModalConfirmAPI({
  onOk,
  onCancel,
  ...confirmModalProps
}: ModalConfirmProps) {
  const [visible, setVisible] = useState(false);

  // 渲染之后，马上显示
  useEffect(() => setVisible(true), []);

  const ok = () => {
    setVisible(false);
    onOk();
  };

  const cancel = () => {
    setVisible(false);
    onCancel();
  };

  return (
    <ModalConfirm
      visible={visible}
      onOk={ok}
      onCancel={cancel}
      onClose={cancel}
      {...confirmModalProps}
    />
  );
}

export interface ModalConfirmProps extends Combine<ModalProps, ConfirmOptions> {
  onOk(): void;
  onCancel(): void;
}

/**
 * 提供原始的 ModalConfirm 组件。
 * 推荐使用 `Modal.confirm()` API 来简化用法
 */
export function ModalConfirm({
  message,
  description,
  ...modalProps
}: ModalConfirmProps) {
  useEffect(() => {
    window.focus();
  }, []);
  return (
    <Modal disableEscape {...modalProps}>
      <Modal.Body>
        <ModalMessage message={message} description={description} />
      </Modal.Body>
      <Modal.Footer>
        <ModalButton {...modalProps} />
      </Modal.Footer>
    </Modal>
  );
}

function ModalButton({
  onOk,
  okText,
  onCancel,
  cancelText,
}: Partial<ModalConfirmProps>) {
  const t = useTranslation();
  const mainButtonRef = useRef<HTMLButtonElement>(null);
  useEffect(() => {
    if (mainButtonRef.current) {
      mainButtonRef.current.focus();
    }
  }, []);
  return (
    <>
      <Button type="primary" onClick={onOk} ref={mainButtonRef}>
        {okText || t.okText}
      </Button>
      <Button onClick={onCancel}>{cancelText || t.cancelText}</Button>
    </>
  );
}
