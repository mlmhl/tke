import React, { useEffect } from "react";
import { Button } from "../button";
import { Overlay } from "../overlay";
import { MediaObject } from "../mediaobject";
import { BubbleProps, BubbleContent } from "../bubble";
import { useConfig } from "../util";
import { injectValue } from "../_util/inject-value";
import { useDefault } from "../_util/use-default";
import { useTranslation } from "../i18n";

export interface GuideStep {
  /**
   * 需要高亮的元素
   */
  element: Element | (() => Element);

  /**
   * 气泡位置
   */
  placement?: BubbleProps["placement"];

  /**
   * 标题
   */
  title?: React.ReactNode;

  /**
   * 描述
   */
  description?: React.ReactNode;

  /**
   * 配图 URL
   */
  image?: string;
}

export interface GuideProps {
  /**
   * 引导步骤
   */
  steps: GuideStep[];

  /**
   * 包含 `children` 时，在 `children` 渲染完成后展示引导
   */
  children?: JSX.Element;

  /**
   * 当前步骤
   */
  current?: number;

  /**
   * 步骤变化回调
   */
  onCurrentChange?: (current: number) => void;

  /**
   * 受控展示
   * @default true
   */
  visible?: boolean;

  /**
   * 隐藏取消按钮
   * @default false
   */
  hideCancelButton?: boolean;

  /**
   * 隐藏上一步按钮
   * @default false
   */
  showBackButton?: boolean;

  /**
   * 取消按钮文字
   * @default "跳过"
   */
  cancelText?: string;

  /**
   * 上一步按钮文字
   * @default "上一步"
   */
  backText?: string;

  /**
   * 下一步按钮文字
   * @default "下一步"
   */
  nextText?: string;

  /**
   * 完成按钮文字
   * @default "完成"
   */
  finishText?: string;

  /**
   * 是否自动滚动元素至视野范围
   * @default false
   */
  autoScrollIntoView?: boolean;
}

const borderWidth = 1;

function getOffset(element: HTMLElement) {
  if (!element) {
    return {};
  }
  const { body } = document;
  const docEl = document.documentElement;
  const scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
  const scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  const x = element.getBoundingClientRect();
  return {
    top: x.top + scrollTop,
    width: x.width,
    height: x.height,
    left: x.left + scrollLeft,
  };
}

export function Guide({
  steps = [],
  children = null,
  visible = true,
  autoScrollIntoView,
  current,
  onCurrentChange,
  showBackButton,
  hideCancelButton,
  cancelText,
  backText,
  nextText,
  finishText,
}: GuideProps) {
  const t = useTranslation();
  const { classPrefix } = useConfig();
  const [currentIndex, setCurrentIndex] = useDefault(
    current,
    -1,
    onCurrentChange
  );

  // 保证子级结点存在
  useEffect(() => {
    if (typeof current === "undefined") {
      setCurrentIndex(0);
    }
  }, [current, setCurrentIndex]);

  const step = steps[currentIndex];

  useEffect(() => {
    if (step) {
      const element = injectValue(step.element)();
      if (element) {
        element.scrollIntoView({
          behavior: "smooth",
          block: "center",
          inline: "center",
        });
      }
    }
  }, [autoScrollIntoView, step]);

  if (!visible || !step) {
    return null;
  }

  const count = steps.length;
  const element = injectValue(step.element)();
  const { title, description, image, placement } = step;
  const { height, width } = getOffset(element as HTMLElement);

  return (
    <Overlay
      layers={[
        <Overlay.Layer
          key="highlight"
          visible
          placement="top-start"
          placementOffset={0}
          modifiers={{
            flip: { enabled: false },
            preventOverflow: { enabled: false },
          }}
          content={({ style }) => {
            const left = +style.left;
            const top = +style.top;
            const p = `M ${left - borderWidth} ${top - borderWidth} H ${left +
              width +
              borderWidth} V ${top + height + borderWidth} H ${left -
              borderWidth} L ${left - borderWidth} ${top - borderWidth} Z`;
            return (
              <svg
                style={{
                  top: 0,
                  left: 0,
                  overflow: "hidden",
                  pointerEvents: "none",
                  position: "fixed",
                  width: "100vw",
                  height: "100vh",
                  zIndex: 9999,
                  fillRule: "evenodd",
                }}
              >
                <path
                  d={`${p} M 0 0 H 9999 V 9999 H 0 L 0 0 Z`}
                  fill="#000000"
                  opacity={0.5}
                />
                <path
                  d={`M ${left} ${top} H ${left + width} V ${top +
                    height} H ${left} L ${left} 0 Z ${p}`}
                  fill="#cccccc"
                  opacity={1}
                />
              </svg>
            );
          }}
        />,
        <Overlay.Layer
          key="bubble"
          visible
          placement={placement}
          placementOffset={10}
          modifiers={{
            flip: { enabled: false },
            preventOverflow: { enabled: false },
          }}
          content={({ placement }) => (
            <BubbleContent
              placement={placement}
              className={`${classPrefix}-popconfirm`}
            >
              <div className={`${classPrefix}-popconfirm__body`}>
                <MediaObject media={image && <img src={image} alt="" />}>
                  {title && (
                    <h3 className={`${classPrefix}-popconfirm__messagetitle`}>
                      {title}
                    </h3>
                  )}
                  {description && (
                    <div className={`${classPrefix}-popconfirm__messagetext`}>
                      {description}
                    </div>
                  )}
                </MediaObject>
              </div>
              <div className={`${classPrefix}-popconfirm__footer`}>
                {!hideCancelButton && current < count - 1 && (
                  <Button
                    type="text"
                    onClick={() => {
                      setCurrentIndex(-1);
                    }}
                  >
                    {cancelText || t.guideCancel}
                  </Button>
                )}
                {showBackButton && current > 0 && (
                  <Button
                    type="text"
                    onClick={() => {
                      setCurrentIndex(current - 1);
                    }}
                  >
                    {backText || t.guideBack}
                  </Button>
                )}
                {current < count - 1 ? (
                  <Button
                    type="link"
                    onClick={() => {
                      setCurrentIndex(current + 1);
                    }}
                  >
                    {nextText || t.guideNext} {current + 1}/{count}
                  </Button>
                ) : (
                  <Button
                    type="link"
                    onClick={() => {
                      setCurrentIndex(current === count - 1 ? -1 : current + 1);
                    }}
                  >
                    {finishText || t.guideFinish} {current + 1}/{count}
                  </Button>
                )}
              </div>
            </BubbleContent>
          )}
        />,
      ]}
    >
      {ref => {
        ref(element as HTMLElement);
        return children;
      }}
    </Overlay>
  );
}
