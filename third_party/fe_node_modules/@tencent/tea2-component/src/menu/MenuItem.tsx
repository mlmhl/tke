import React, { useContext, useEffect, useRef } from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { callBoth } from "../_util/call-both";
import { useConfig } from "../_util/config-context";
import { Badge } from "../badge";
import { SubMenuContext } from "./SubMenu";
import { Icon } from "../icon";
import { uuid } from "../_util/uuid";
import { MenuContext } from "./MenuContext";

export interface MenuItemProps extends StyledProps {
  /**
   * 标题
   */
  title?: React.ReactNode;

  /**
   * 菜单折叠后标题处显示的图标 URL
   *
   * **传递一组 URL 时，第一个 URL 会作为未激活态图标，第二个 URL 会作为激活态图标**
   */
  icon?: [string, string] | string;

  /**
   * 标题旁标签内容
   * @version 2.3.0
   */
  tag?: React.ReactNode;

  /**
   * 是否为外部链接（显示外部链接图标）
   * @version 2.3.0
   */
  external?: boolean;

  /**
   * 是否为选中状态
   *
   * @default false
   */
  selected?: boolean;

  /**
   * 点击回调
   */
  onClick?: (event: React.MouseEvent) => void;

  /**
   * 自定义渲染
   *
   * @default children => <a>{children}</a>
   */
  render?: (children: JSX.Element) => JSX.Element;
}

const noop = () => {};
const defaultRender = children => <a>{children}</a>;

export function MenuItem({
  title,
  icon,
  tag,
  selected,
  external,
  className,
  style,
  onClick = noop,
  render = defaultRender,
}: MenuItemProps) {
  const { classPrefix } = useConfig();
  const { setMobileCollapsed } = useContext(MenuContext);
  const { inSubMenu, onSelectedChange, setHasTag } = useContext(SubMenuContext);

  const idRef = useRef(uuid());

  useEffect(() => {
    if (tag) {
      setHasTag(true);
    }
  }, [setHasTag, tag]);

  useEffect(() => {
    onSelectedChange(idRef.current, selected);
  }, [onSelectedChange, selected]);

  let defaultIcon;
  let activeIcon;

  if (typeof icon === "string") {
    defaultIcon = icon;
    activeIcon = icon;
  }

  if (Array.isArray(icon)) {
    [defaultIcon, activeIcon] = icon;
  }

  const children = render(
    <>
      {defaultIcon && !inSubMenu && (
        <img
          className={`${classPrefix}-menu__list-icon`}
          src={defaultIcon}
          alt="icon"
        />
      )}
      {activeIcon && !inSubMenu && (
        <img
          className={`${classPrefix}-menu__list-icon is-selected`}
          src={activeIcon}
          alt="icon"
        />
      )}
      <div className={`${classPrefix}-menu__text`}>
        {title}
        {external && <Icon type="externallink"></Icon>}
      </div>
      {!!tag && <Badge>{tag}</Badge>}
    </>
  );

  return (
    <li
      className={classNames(className, { "is-selected": selected })}
      style={style}
      onClick={() => setMobileCollapsed(false)}
    >
      {React.cloneElement(children, {
        className: classNames(
          `${classPrefix}-menu__item`,
          children.props.className
        ),
        onClick: callBoth(onClick, children.props.onClick),
      })}
    </li>
  );
}
