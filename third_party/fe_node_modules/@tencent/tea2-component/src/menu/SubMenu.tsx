import React, { createContext, useState, useContext } from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { Icon } from "../icon";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";
import { MenuContext } from "./MenuContext";
import { noop } from "../_util/noop";

export interface SubMenuProps extends StyledProps {
  /**
   * 标题
   */
  title?: React.ReactNode;

  /**
   * 菜单折叠后标题处显示的图标 URL
   *
   * **传递一组 URL 时，第一个 URL 会作为未激活态图标，第二个 URL 会作为激活态图标**
   */
  icon?: string | [string, string];

  /**
   * 菜单内容（Menu.Item）
   */
  children?: React.ReactNode;

  /**
   * 是否默认展开
   *
   * @default false
   */
  defaultOpened?: boolean;

  /**
   * 是否展示
   */
  opened?: boolean;

  /**
   * 展开状态变化时回调
   */
  onOpenedChange?: (opened: boolean) => void;
}

interface SubMenuContextValue {
  inSubMenu: boolean;
  setHasTag: (value: boolean) => void;
  onSelectedChange: (id: string, selected: boolean) => void;
}

export const SubMenuContext = createContext<SubMenuContextValue>({
  inSubMenu: false,
  setHasTag: noop,
  onSelectedChange: () => {},
});

export function SubMenu({
  title,
  icon,
  children,
  defaultOpened = false,
  opened,
  onOpenedChange,
  className,
  style,
}: SubMenuProps) {
  const { classPrefix } = useConfig();
  // 子菜单中包含 Tag
  const [hasTag, setHasTag] = useState<boolean>(false);
  // 子菜单被选中项
  const [selectedId, setSelectedId] = useState<string>(null);

  const { collapsed } = useContext(MenuContext);

  // eslint-disable-next-line no-param-reassign
  [opened, onOpenedChange] = useDefault(opened, defaultOpened, onOpenedChange);

  let defaultIcon;
  let activeIcon;

  if (typeof icon === "string") {
    defaultIcon = icon;
    activeIcon = icon;
  }

  if (Array.isArray(icon)) {
    [defaultIcon, activeIcon] = icon;
  }

  return (
    <li
      className={classNames(`${classPrefix}-menu__submenu`, className, {
        [`${classPrefix}-menu__subbadge`]: hasTag && !opened,
        "is-selected": !!selectedId && (collapsed || !opened),
        "is-expanded": opened,
      })}
      style={style}
    >
      <a
        className={`${classPrefix}-menu__item`}
        onClick={() => onOpenedChange(!opened)}
      >
        {defaultIcon && (
          <img
            className={`${classPrefix}-menu__list-icon`}
            src={defaultIcon}
            alt="icon"
          />
        )}
        {activeIcon && (
          <img
            className={`${classPrefix}-menu__list-icon is-selected`}
            src={activeIcon}
            alt="icon"
          />
        )}
        <div className={`${classPrefix}-menu__text`}>{title}</div>
        <Icon type="arrowdown" />
      </a>
      <ul className={`${classPrefix}-menu__list`}>
        <SubMenuContext.Provider
          value={{
            inSubMenu: true,
            setHasTag,
            onSelectedChange: (id, selected) =>
              setSelectedId(selectedId => {
                if (selected) {
                  return id;
                }
                if (id === selectedId) {
                  return null;
                }
                return selectedId;
              }),
          }}
        >
          {children}
        </SubMenuContext.Provider>
      </ul>
    </li>
  );
}
