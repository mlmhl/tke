import React, { useState } from "react";
import classNames from "classnames";
import { Moment } from "moment";
import { useConfig } from "../../_util/config-context";
import { withStatics } from "../../_util/with-statics";
import { ChangeContext } from "../../form/controlled";
import { JumperProps, Jumper } from "../../jumper";
import { CalendarTableType } from "../DateProps";

export enum CellStatus {
  Common,
  Selected,
  InRange,
  InRangeHover,
  RangeStart,
  RangeEnd,
}

export interface TableProps extends React.Props<any> {
  /**
   * 标题渲染
   */
  caption?: React.ReactNode;

  /**
   * Jumper 配置
   */
  jumperOptions?: JumperProps;

  /**
   * table 类型
   */
  type?: CalendarTableType;
}

const Table = withStatics(
  function Table({ caption, children, jumperOptions = {}, type }: TableProps) {
    const { classPrefix } = useConfig();
    return (
      <div className={`${classPrefix}-calendar__table`}>
        <div className={`${classPrefix}-calendar__caption`}>{caption}</div>
        <Jumper {...jumperOptions} noBordered showCurrent />
        {/* 日期 */}
        <div className={`${classPrefix}-calendar__row-group`}>
          <div
            className={classNames(`${classPrefix}-calendar__type-wrap`, {
              [`${classPrefix}-calendar__type--month`]: type === "month",
              [`${classPrefix}-calendar__type--year`]: type === "year",
            })}
          >
            {children}
          </div>
        </div>
      </div>
    );
  },
  {
    Row: TableRow,
    Cell,
  }
);

export default Table;

export function TableRow({ children }: { children: React.ReactNode }) {
  const { classPrefix } = useConfig();
  return <div className={`${classPrefix}-calendar__row`}>{children}</div>;
}

export interface Cell {
  /**
   * 展示名称
   */
  name: string | number;

  /**
   * 对应日期值
   */
  value?: Moment;

  /**
   * 被选中回调
   */
  onSelect?: (value: Moment, context: ChangeContext) => void;

  /**
   * Outside 日期被选中回调
   */
  onOutsideSelect?: (current: Moment) => void;

  /**
   * Hover 日期被选中回调
   */
  onHoveredChange?: (current: Moment) => void;

  /**
   * 是否为当前时间
   */
  isNow?: boolean;

  /**
   * 是否在当前时间外
   */
  outside?: boolean;

  /**
   * 是否禁用
   */
  disabled?: boolean;

  /**
   * 状态
   */
  status?: CellStatus;
}

const noop = () => {};

export function Cell({
  name,
  value,
  onSelect = noop,
  onOutsideSelect = noop,
  onHoveredChange = noop,
  isNow = false,
  outside = false,
  disabled = false,
  status = CellStatus.Common,
}: Cell) {
  const { classPrefix } = useConfig();
  const [hovered, setHovered] = useState<boolean>(false);
  return (
    <div
      role="button"
      className={classNames({
        [`${classPrefix}-calendar__cell`]: true,
        [`${classPrefix}-calendar__cell--now`]: isNow,
        [`${classPrefix}-calendar__day--outside`]: outside,
        [`${classPrefix}-calendar__day--in-range`]:
          !outside && status === CellStatus.InRange,
        [`${classPrefix}-calendar__day--start is-selected`]:
          !outside && status === CellStatus.RangeStart,
        [`${classPrefix}-calendar__day--end is-selected`]:
          !outside && status === CellStatus.RangeEnd,
        "is-hover-current": hovered,
        "is-hover": !outside && status === CellStatus.InRangeHover,
        "is-disabled": disabled,
        "is-selected": !outside && status === CellStatus.Selected,
      })}
      onClick={event => {
        if (!disabled) {
          onSelect(value, { event });
          if (outside) {
            onOutsideSelect(value);
          }
        }
      }}
      onMouseEnter={() => {
        if (!disabled) {
          setHovered(true);
          onHoveredChange(value);
        }
      }}
      onMouseLeave={() => {
        setHovered(false);
        onHoveredChange(null);
      }}
    >
      <span>{name}</span>
    </div>
  );
}
