/* eslint-disable */
import React from "react";
import { withTranslation, WithTranslationProps } from "../../i18n";
import { List } from "../../list";
import { DropdownBox } from "../../dropdown";
import { WithConfigProps, withConfig } from "../../_util/config-context";
import { Combine } from "../../_type";

export interface SingleValueSelectProps
  extends Combine<WithTranslationProps, WithConfigProps> {
  values: any[];
  inputValue: string;
  onChange?: (value: any[]) => void;
  onSelect?: (value: any[]) => void;
  offset: number;
  maxHeight: number;
}

export interface SingleValueSelectState {
  select: number;
}

const keys = {
  "8": "backspace",
  "9": "tab",
  "13": "enter",
  "37": "left",
  "38": "up",
  "39": "right",
  "40": "down",
};

@withConfig
@withTranslation
export class SingleValueSelect extends React.Component<
  SingleValueSelectProps,
  SingleValueSelectState
> {
  constructor(props) {
    super(props);
    const { values, inputValue, onSelect } = this.props;

    let select = -1;
    values.forEach((item, index) => {
      if (item.name === inputValue) {
        select = index;
      }
    });

    this.state = {
      select,
    };
  }

  componentDidMount() {
    const { select } = this.state;
    if (select < 0 && this.props.onSelect) {
      this.props.onSelect(this.getValue(select));
    }
  }

  componentWillReceiveProps(nextProps: SingleValueSelectProps) {
    const { values, inputValue } = nextProps;
    const list = values.map(item => item.name);
    const select = list.indexOf(inputValue);
    this.setState({ select });
  }

  // 父组件调用
  handleKeyDown = (keyCode: number): boolean => {
    if (!keys[keyCode]) return;
    const { onSelect } = this.props;
    const { select } = this.state;

    switch (keys[keyCode]) {
      case "enter":
      case "tab":
        if (onSelect) {
          onSelect(this.getValue(select));
        }
        return false;

      case "up":
        this.move(-1);
        break;

      case "down":
        this.move(1);
        break;
    }
  };

  getValue(select: number): any[] {
    if (select < 0) return [];
    const { values, inputValue } = this.props;
    const list = values;
    if (select < list.length) {
      return [list[select]];
    } else {
      const select = list.map(item => item.name).indexOf(inputValue);
      this.setState({ select });
      if (select < 0) return [];
      return [list[select]];
    }
  }

  move = (step: number): void => {
    const { select } = this.state;
    const { values } = this.props;
    const list = values;
    if (list.length <= 0) return;
    this.setState({ select: (select + step + list.length) % list.length });
  };

  handleClick = (e: React.MouseEvent, index: number): void => {
    e.stopPropagation();
    if (this.props.onSelect) {
      this.props.onSelect(this.getValue(index));
    }
  };

  render() {
    const { select } = this.state;
    const {
      t,
      config: { classPrefix },
      values,
      offset,
      maxHeight,
    } = this.props;

    const list = values.map((item, index) => {
      return (
        <List.Item
          key={index}
          selected={select === index}
          onClick={e => this.handleClick(e, index)}
        >
          <span title={item.name} style={item.style || {}}>
            {item.name}
          </span>
        </List.Item>
      );
    });

    if (list.length === 0) {
      list.push(
        <li role="presentation" key={0} className="is-disabled">
          <div className={`${classPrefix}-option-list__item`} role="menuitem">
            {t.emptyText}
          </div>
        </li>
      );
    }

    return (
      <DropdownBox style={{ left: offset }} onClick={e => e.stopPropagation()}>
        <List type="option" style={{ maxHeight }}>
          {list}
        </List>
      </DropdownBox>
    );
  }
}
