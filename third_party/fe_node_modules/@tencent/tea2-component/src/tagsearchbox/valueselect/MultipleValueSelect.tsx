/* eslint-disable */
import React from "react";
import { withTranslation, WithTranslationProps } from "../../i18n";
import { List } from "../../list";
import { Dropdown, DropdownBox } from "../../dropdown";
import { Button } from "../../button";
import { WithConfigProps, withConfig } from "../../_util/config-context";
import { Combine } from "../../_type";

export interface MultipleValueSelectProps
  extends Combine<WithTranslationProps, WithConfigProps> {
  values: any[];
  inputValue: string;
  onChange: (value: any[]) => void;
  onSelect: (value: any[]) => void;
  onCancel: () => void;
  offset: number;
  maxHeight: number;

  /**
   * 是否支持全选
   *
   * @default true
   */
  all?: boolean;
}

export interface MultipleValueSelectState {
  curIndex: number;
  select: number[];
}

const keys = {
  "8": "backspace",
  "9": "tab",
  "13": "enter",
  "37": "left",
  "38": "up",
  "39": "right",
  "40": "down",
};

@withConfig
@withTranslation
export class MultipleValueSelect extends React.Component<
  MultipleValueSelectProps,
  MultipleValueSelectState
> {
  constructor(props) {
    super(props);

    const list = this.props.inputValue.split("|").map(i => i.trim());
    const select = [];
    const values = this.props.values.map(item =>
      Object.assign({}, item, { name: item.name.trim() })
    );

    values.forEach((item, index) => {
      if (list.indexOf(item.name) >= 0) {
        select.push(index);
      }
    });

    this.state = {
      curIndex: 0, // 0 全选位置
      select,
    };
  }

  componentDidMount() {
    const { select } = this.state;
    if (select.length <= 0 && this.props.onSelect) {
      this.props.onSelect(this.getValue(select));
    }
  }

  componentWillReceiveProps(nextProps: MultipleValueSelectProps) {
    if (this.props.inputValue !== nextProps.inputValue) {
      const list = nextProps.inputValue.split("|").map(i => i.trim());
      const select = [];
      const values = nextProps.values.map(item =>
        Object.assign({}, item, { name: item.name.trim() })
      );
      values.forEach((item, index) => {
        if (list.indexOf(item.name) >= 0) {
          select.push(index);
        }
      });
      this.setState({ select });
    }
  }

  // 父组件调用
  handleKeyDown = (keyCode: number): boolean => {
    if (!keys[keyCode]) return;
    const { onSelect, onChange } = this.props;
    const { curIndex, select } = this.state;

    switch (keys[keyCode]) {
      case "tab":
        if (curIndex < 0) return false;
        if (curIndex === 0) {
          this.handleSelectAll();
          return false;
        }
        const pos = select.indexOf(curIndex - 1);
        if (pos >= 0) {
          select.splice(pos, 1);
        } else {
          select.push(curIndex - 1);
        }

        if (onChange) {
          onChange(this.getValue(select));
        }
        return false;

      case "enter":
        if (onSelect) {
          onSelect(this.getValue(select));
        }
        return false;

      case "up":
        this.move(-1);
        break;

      case "down":
        this.move(1);
        break;
    }
  };

  getValue(select: Array<number>): Array<any> {
    const { values } = this.props;
    return select.map(i => values[i]);
  }

  move = (step: number): void => {
    const { curIndex } = this.state;
    const { values } = this.props;
    if (values.length <= 0) return;

    this.setState({
      curIndex: (curIndex + step + (values.length + 1)) % (values.length + 1),
    });
  };

  handleClick = (e: React.MouseEvent, index: number): void => {
    e.stopPropagation();

    if (e.target["tagName"] === "LABEL" || e.target["tagName"] === "SPAN") {
      return;
    }

    const select = [...this.state.select];
    const { onChange } = this.props;

    const pos = select.indexOf(index);
    if (pos >= 0) {
      select.splice(pos, 1);
    } else {
      select.push(index);
    }

    if (onChange) {
      onChange(this.getValue(select));
    }
  };

  handleSelectAll = (e?: React.MouseEvent): void => {
    e && e.stopPropagation();
    const { select } = this.state;
    const { values, onChange } = this.props;
    if (select.length === values.length) {
      onChange && onChange([]);
      return;
    }

    onChange && onChange(values);
  };

  handleSubmit = (e): void => {
    e.stopPropagation();
    const { onSelect } = this.props;
    const { select } = this.state;
    if (onSelect) {
      onSelect(this.getValue(select));
    }
  };

  handleCancel = (e): void => {
    e.stopPropagation();
    const { onCancel } = this.props;
    if (onCancel) {
      onCancel();
    }
  };

  render() {
    const { select, curIndex } = this.state;
    const {
      t,
      config: { classPrefix },
      values,
      offset,
      all = true,
      maxHeight,
    } = this.props;

    const list = values.map((item, index) => (
      <List.Item
        key={index}
        current={curIndex === index + 1}
        onClick={e => this.handleClick(e, index)}
      >
        <label
          className={`${classPrefix}-form-check`}
          style={item.style || {}}
          title={item.name}
        >
          <input
            type="checkbox"
            readOnly
            checked={select.indexOf(index) >= 0}
            className={`${classPrefix}-checkbox`}
          />
          <span className={`${classPrefix}-form-check__label`}>
            {item.name}
          </span>
        </label>
      </List.Item>
    ));

    if (list.length === 0) return null;

    return (
      <DropdownBox style={{ left: offset }} onClick={e => e.stopPropagation()}>
        <List type="option" style={{ maxHeight: maxHeight - 50 }}>
          {!!all && (
            <List.Item onClick={this.handleSelectAll} current={curIndex === 0}>
              <label className={`${classPrefix}-form-check`}>
                <input
                  type="checkbox"
                  readOnly
                  className={`${classPrefix}-checkbox`}
                  checked={select.length === values.length}
                />
                <span className={`${classPrefix}-form-check__label`}>
                  {t.selectAllText}
                </span>
              </label>
            </List.Item>
          )}
          {list}
        </List>
        <Dropdown.Footer>
          <Button
            type="primary"
            onClick={this.handleSubmit}
            disabled={select.length === 0}
          >
            {t.okText}
          </Button>
          <Button type="weak" onClick={this.handleCancel}>
            {t.cancelText}
          </Button>
        </Dropdown.Footer>
      </DropdownBox>
    );
  }
}
