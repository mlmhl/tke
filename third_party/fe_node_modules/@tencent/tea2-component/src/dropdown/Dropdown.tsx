import React, {
  useLayoutEffect,
  useMemo,
  useCallback,
  useRef,
  useState,
  useEffect,
} from "react";
import classNames from "classnames";
import { Icon } from "../icon";
import { StyledProps, Combine } from "../_type";
import { Popover, PopoverProps, TriggerProps } from "../popover";
import { createRocket } from "../_util/create-rocket";
import { SizeType } from "../input";
import { useOutsideClick } from "../_util/use-outside-click";
import { forwardRefWithStatics } from "../_util/forward-ref-with-statics";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";
import { KeyCode } from "../_util/key-code";
import { mergeRefs } from "../_util/merge-refs";
import { noop } from "../_util/noop";

/**
 * 下拉类组件通用 Props
 */
export interface CommonDropdownProps {
  /**
   * 是否默认展开
   */
  defaultOpen?: boolean;

  /**
   * 是否展开（受控）
   */
  open?: boolean;

  /**
   * 展开变化回调（受控）
   */
  onOpenChange?: (open: boolean) => void;

  /**
   * 下拉出现的位置
   * @default "bottom-start"（从底部弹出，左侧对齐）
   */
  placement?: PopoverProps["placement"];

  /**
   * 弹出位置偏离参考位置的位移
   *
   * 如： `10`、`"50%"`、`"10 + 10%"`、`[10, 10]`
   *
   * @default 5
   */
  placementOffset?: PopoverProps["placementOffset"];

  /**
   * 是否在父容器滚动时关闭
   * @default true
   */
  closeOnScroll?: PopoverProps["closeOnScroll"];

  /**
   * 是否随参考元素离开可视范围
   * @default false
   */
  escapeWithReference?: PopoverProps["escapeWithReference"];

  /**
   * 覆盖层自定义类名
   */
  overlayClassName?: PopoverProps["overlayClassName"];

  /**
   * 覆盖层自定义样式
   */
  overlayStyle?: PopoverProps["overlayStyle"];
}

export interface DropdownKeyDownContext {
  /**
   * 当前是否展开
   */
  open: boolean;
}

export interface DropdownProps
  extends Combine<CommonDropdownProps, StyledProps> {
  /**
   * 是否支持清空
   * @default false
   * @version 2.3.2
   */
  clearable?: boolean;

  /**
   * 点击清空回调
   * @version 2.3.2
   */
  onClear?: (event: React.MouseEvent) => void;

  /**
   * 下拉按钮文本
   */
  button: React.ReactNode;

  /**
   * 下拉内容
   * @docType React.ReactNode | ((close: () => void) => React.ReactNode)
   */
  children: React.ReactNode | ((close: () => void) => React.ReactNode);

  /**
   * 下拉按钮的外观：
   *
   * - `default` 无边框，适用于页面标题和表格内
   * - `button` 为按钮风格，有边框，多用于操作栏中
   * - `link` 为超链接风格
   * - `filter` 为过滤组件风格，多用于表头筛选
   * - `pure` 无额外样式
   *
   * 原有 `raw` 类型建议使用 `pure` 进行改造
   *
   * @default "default"
   * @version 2.0.9
   */
  appearance?: "default" | "button" | "link" | "filter" | "pure";

  /**
   * **\[Deprecated\]** 请使用 `appearance` 属性
   * @deprecated
   */
  appearence?: "default" | "button" | "link" | "filter" | "pure";

  /**
   * 下拉框尺寸，使用 `"full"` 撑满容器宽度
   */
  size?: SizeType | "auto";

  /**
   * 触发方式
   *
   * @default "click"
   */
  trigger?: "click" | "hover";

  /**
   * 是否在下拉内容点击时关闭
   * @default true
   */
  clickClose?: boolean;

  /**
   * 是否禁用
   * @default false
   */
  disabled?: boolean;

  /**
   * 打开时回调
   */
  onOpen?: () => void;

  /**
   * 关闭时回调
   */
  onClose?: () => void;

  /**
   * 弹出区域自定义类名
   */
  boxClassName?: string;

  /**
   * 弹出区域自定义样式
   */
  boxStyle?: React.CSSProperties;

  /**
   * 弹出区域尺寸（宽度）是否同步按钮尺寸
   *
   * @default false
   */
  boxSizeSync?: boolean;

  /**
   * 弹出区域是否自适应可视区域大小
   *
   * 内容超出时可视区域大小出现内部滚动
   *
   * @default false
   * @version 2.2.4
   */
  boxAdaptable?: boolean;

  /**
   * 是否在 `children` 变化时更新位置
   *
   * @default false
   */
  updateOnChildrenChange?: boolean;

  /**
   * 当焦点在 Dropdown 按钮时的键盘事件，返回 `false` 禁用默认行为
   */
  onKeyDown?: (
    event: React.KeyboardEvent<HTMLDivElement>,
    context: DropdownKeyDownContext
  ) => void | boolean;

  /**
   * 元素聚焦事件
   */
  onFocus?: React.DOMAttributes<HTMLDivElement>["onFocus"];
}

const getAppearanceConfig = (classPrefix: string) => ({
  // appearance  headerClassName         icon
  default: [`${classPrefix}-dropdown-default`, "arrowdown"],
  button: [`${classPrefix}-dropdown-btn`, "arrowdown"],
  link: [`${classPrefix}-dropdown-link`, "arrowdown"],
  filter: [`${classPrefix}-dropdown-filter`, "filter"],
  // 兼容原有 raw 类型
  raw: [null, null],
});

export function DropdownBox({
  className,
  style = {},
  children,
  onClick,
  onUpdate = noop,
  adaptable,
}: {
  onClick?: (event: React.MouseEvent) => void;
  children?: React.ReactNode;
  onUpdate?: () => void;
  adaptable?: boolean;
} & StyledProps) {
  const { classPrefix } = useConfig();
  useLayoutEffect(
    () => () => {
      onUpdate();
    },
    [children, onUpdate]
  );

  if (!children) {
    return null;
  }

  return (
    <div
      className={classNames(
        `${classPrefix}-dropdown-box`,
        { [`${classPrefix}-dropdown-box--adapte`]: adaptable },
        className
      )}
      style={{ position: "relative", ...style }}
      onClick={onClick}
    >
      {children}
    </div>
  );
}

const ClickTrigger = ({
  childrenElementRef,
  overlayElementRef,
  visible,
  setVisible,
  openDelay = 0,
  closeDelay = 0,
  render,
  onClose,
  onOpen,
}: TriggerProps & DropdownProps) => {
  const { listen } = useOutsideClick([childrenElementRef, overlayElementRef]);

  listen(() => {
    if (visible) {
      onClose();
      setVisible(false, closeDelay);
    }
  });

  return render({
    overlayProps: {},
    childrenProps: {},
  });
};

const HoverTrigger = ({
  visible,
  setVisible,
  openDelay = 50,
  closeDelay = 100,
  render,
  onClose,
  onOpen,
}: TriggerProps & DropdownProps) => {
  const commonProps = {
    onMouseEnter: () => {
      setVisible(true, openDelay).then(done => done && !visible && onOpen());
    },
    onMouseLeave: () => {
      setVisible(false, closeDelay).then(done => done && onClose());
    },
  };
  return render({
    overlayProps: commonProps,
    childrenProps: commonProps,
  });
};

export const Dropdown = forwardRefWithStatics(
  (props: DropdownProps, ref: React.Ref<HTMLDivElement>) => {
    const { classPrefix } = useConfig();
    const {
      defaultOpen = false,
      open,
      onOpenChange,
      appearance = props.appearence,
      button,
      size,
      placement = "bottom-start",
      placementOffset = 5,
      trigger,
      children,
      disabled,
      onOpen = noop,
      onClose = noop,
      onKeyDown = noop,
      onFocus = noop,
      clickClose = true,
      closeOnScroll = true,
      escapeWithReference,
      style,
      className,
      boxClassName,
      boxSizeSync,
      boxAdaptable,
      updateOnChildrenChange,
      overlayClassName,
      overlayStyle,
      clearable,
      onClear = noop,
    } = props;
    let { boxStyle = {} } = props;

    const [hover, setHover] = useState<boolean>(false);
    const [isOpened, setIsOpened] = useDefault(open, defaultOpen, onOpenChange);
    // 是否打开一段时间，防止连续 focus/click 连续两次触发开启导致关闭
    const [stayedOpen, setStayedOpen] = useState(false);
    useEffect(() => {
      if (isOpened) {
        setTimeout(() => setStayedOpen(true), 150);
      } else {
        setStayedOpen(false);
      }
    }, [isOpened]);

    const dropdownRef = useRef<HTMLDivElement>(null);
    const [dropdownWidth, setDropdownWidth] = useState<number>(null);

    const close = useCallback(() => {
      setIsOpened(false);
      onClose();
    }, [onClose, setIsOpened]);

    const appearanceConfig = getAppearanceConfig(classPrefix);

    const [headerClassName, icon] =
      appearanceConfig[appearance] || appearanceConfig.default;

    const boxChildren = useMemo(() => {
      return typeof children === "function"
        ? children.call(null, close)
        : children;
    }, [children, close]);

    useEffect(() => {
      if (dropdownRef.current) {
        setDropdownWidth(dropdownRef.current.clientWidth);
      }
    }, [button, size]);

    if (boxSizeSync && dropdownWidth) {
      boxStyle = {
        ...boxStyle,
        minWidth: dropdownWidth,
        maxWidth: dropdownWidth,
      };
    }

    const Trigger = trigger === "hover" ? HoverTrigger : ClickTrigger;
    return (
      <Popover
        trigger={
          disabled
            ? "empty"
            : [
                Trigger,
                {
                  onClose,
                  onOpen,
                },
              ]
        }
        visible={isOpened}
        onVisibleChange={setIsOpened}
        placement={placement}
        placementOffset={placementOffset}
        closeOnScroll={closeOnScroll}
        escapeWithReference={escapeWithReference}
        overlayClassName={overlayClassName}
        overlayStyle={overlayStyle}
        overlay={({ scheduleUpdate }) =>
          disabled ? null : (
            <DropdownBox
              className={boxClassName}
              style={boxStyle}
              onClick={clickClose ? close : null}
              onUpdate={updateOnChildrenChange ? scheduleUpdate : undefined}
              adaptable={boxAdaptable}
            >
              {boxChildren}
            </DropdownBox>
          )
        }
      >
        <div
          ref={mergeRefs(ref, dropdownRef)}
          className={classNames(`${classPrefix}-dropdown`, className, {
            [`size-${
              size === "full" || size === "auto" ? `${size}-width` : size
            }`]: size,
            "is-expanded": isOpened,
            "is-disabled": disabled,
          })}
          style={style}
          tabIndex={disabled ? -1 : 0}
          onClick={event => {
            event.stopPropagation();
            if (disabled) {
              return;
            }
            if (!isOpened) {
              onOpen();
              setIsOpened(true);
            } else if (stayedOpen) {
              onClose();
              setIsOpened(false);
            }
          }}
          onKeyDown={event => {
            if (onKeyDown(event, { open: isOpened }) === false) {
              return;
            }
            switch (event.keyCode) {
              case KeyCode.Space:
              case KeyCode.Enter:
                if (!isOpened) {
                  setIsOpened(true);
                  onOpen();
                }
                if (isOpened) {
                  close();
                }
                break;
              case KeyCode.Esc:
                if (isOpened) {
                  close();
                }
                break;
            }
          }}
          onFocus={onFocus}
          onMouseEnter={() => {
            setHover(true);
          }}
          onMouseLeave={() => {
            setHover(false);
          }}
        >
          {appearance === "pure" ? (
            button
          ) : (
            <div
              className={classNames(
                `${classPrefix}-dropdown__header`,
                headerClassName
              )}
            >
              <div className={`${classPrefix}-dropdown__value`}>{button}</div>
              {clearable && hover ? (
                <Icon
                  type="dismiss"
                  onClick={e => {
                    e.stopPropagation();
                    onClear(e);
                  }}
                />
              ) : (
                icon && <Icon type={icon} />
              )}
            </div>
          )}
        </div>
      </Popover>
    );
  },
  {
    Footer: createRocket(
      "DropdownFooter",
      "div.@{prefix}-dropdown-box__footer"
    ),
  }
);
