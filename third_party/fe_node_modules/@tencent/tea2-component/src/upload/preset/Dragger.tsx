import React, { useContext } from "react";
import classNames from "classnames";
import { ImagePreview } from "../../imagepreview";
import { useConfig } from "../../_util/config-context";
import { UploadContext } from "../UploadContext";
import { Text } from "../../text";

export interface DraggerProps {
  /**
   * 文件名
   */
  filename?: React.ReactNode;

  /**
   * 预览图，仅在 `filename` 不为空时展示
   */
  image?: string;

  /**
   * 上传进度，仅在 `filename` 不为空时展示
   */
  percent?: number;

  /**
   * 文件描述，仅在 `filename` 不为空时展示
   */
  description?: React.ReactNode;

  /**
   * 按钮区域内容，仅在 `filename` 不为空时展示
   */
  button?: React.ReactNode;

  /**
   * `filename` 为空时展示内容，此时支持拖拽上传
   */
  children?: React.ReactNode;
}

export function Dragger({
  filename,
  image,
  percent,
  button,
  description,
  children,
}: DraggerProps) {
  const { classPrefix } = useConfig();
  const { isDragging, getDraggerProps } = useContext(UploadContext);

  if (filename) {
    return (
      <div className={`${classPrefix}-form-upload-drag`}>
        <div className={`${classPrefix}-form-upload__inner`}>
          <div className={`${classPrefix}-form-upload__box`}>
            {image && (
              <div className={`${classPrefix}-form-upload__thumb`}>
                <ImagePreview
                  className={`${classPrefix}-form-upload__preview`}
                  previewSrc={image}
                  src={image}
                />
              </div>
            )}
            <div className={`${classPrefix}-form-upload__info`}>
              <div className={`${classPrefix}-form-upload__file`}>
                <span className={`${classPrefix}-text`}>{filename}</span>
                {(percent || percent === 0) && (
                  <span className={`${classPrefix}-form__help-text--inline`}>
                    {Math.floor(percent)}%
                  </span>
                )}
              </div>
              <div
                className={`${classPrefix}-form-upload__intro ${classPrefix}-text-weak`}
              >
                {description}
              </div>
              <div className={`${classPrefix}-form-upload__btn`}>{button}</div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div
      className={classNames(`${classPrefix}-form-upload-drag`, {
        [`${classPrefix}-form-upload-drag--drag`]: isDragging,
      })}
    >
      <div
        {...getDraggerProps({ className: `${classPrefix}-form-upload__inner` })}
      >
        <Text
          theme="text"
          className={classNames(`${classPrefix}-text__upload-drag`, {
            [`${classPrefix}-text__upload-drag--hover`]: isDragging,
          })}
          parent="p"
        >
          {children}
        </Text>
      </div>
    </div>
  );
}
