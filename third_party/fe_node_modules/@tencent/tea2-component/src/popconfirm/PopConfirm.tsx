import React from "react";
import classNames from "classnames";
import { BubbleProps, Bubble } from "../bubble";
import { StyledProps } from "../_type";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";
import { TriggerProps } from "../popover/trigger";
import { useOutsideClick } from "../util/outsideclick";
import { MediaObject } from "../mediaobject";

export interface PopConfirmProps extends StyledProps {
  /**
   * 气泡箭头是否指向目标元素中心
   *
   * @default false
   * @version 2.2.0
   */
  arrowPointAtCenter?: BubbleProps["arrowPointAtCenter"];

  /**
   * 使用受控模式来控制弹出气泡的显示，配合 `onVisibleChange` 方法使用
   */
  visible?: BubbleProps["visible"];

  /**
   * 处理 `visible` 变化的情况
   */
  onVisibleChange?: BubbleProps["onVisibleChange"];

  /**
   * 提示标题
   */
  title?: React.ReactNode;

  /**
   * 提示信息
   */
  message?: React.ReactNode;

  /**
   * 底部渲染内容
   * @docType React.ReactNode | ((close: () => void) => React.ReactNode)
   */
  footer?: React.ReactNode | ((close: () => void) => React.ReactNode);

  /**
   * 气泡放置的位置，将影响三角的朝向和位置
   * @default "top"
   */
  placement?: BubbleProps["placement"];

  /**
   * 需要被气泡包裹的内容
   */
  children?: React.ReactNode;

  /**
   * 是否在父容器滚动时关闭
   * @default false
   */
  closeOnScroll?: BubbleProps["closeOnScroll"];
}

function PopConfirmClickTrigger({
  childrenElementRef,
  overlayElementRef,
  visible,
  setVisible,
  openDelay = 0,
  closeDelay = 0,
  render,
}: TriggerProps) {
  const { listen, ignoreProps } = useOutsideClick([
    childrenElementRef,
    overlayElementRef,
  ]);

  listen(() => visible && setVisible(false, closeDelay));

  return render({
    overlayProps: ignoreProps,
    childrenProps: {
      onClick: () => setVisible(!visible, openDelay),
    },
  });
}

export function PopConfirm({
  title,
  message,
  children,
  placement,
  footer,
  className,
  style,
  closeOnScroll,
  arrowPointAtCenter,
  visible: _visible,
  onVisibleChange: _onVisibleChange,
}: PopConfirmProps) {
  const { classPrefix } = useConfig();
  const [visible, onVisibleChange] = useDefault(
    _visible,
    false,
    _onVisibleChange
  );

  const close = () => onVisibleChange(false);

  return (
    <Bubble
      visible={visible}
      onVisibleChange={onVisibleChange}
      closeOnScroll={closeOnScroll}
      className={classNames(`${classPrefix}-popconfirm`, className)}
      placement={placement}
      trigger={PopConfirmClickTrigger}
      style={style}
      arrowPointAtCenter={arrowPointAtCenter}
      content={
        <>
          <div className={`${classPrefix}-popconfirm__body`}>
            <MediaObject>
              {title && (
                <h3 className={`${classPrefix}-popconfirm__messagetitle`}>
                  {title}
                </h3>
              )}
              {message && (
                <div className={`${classPrefix}-popconfirm__messagetext`}>
                  {message}
                </div>
              )}
            </MediaObject>
          </div>
          {footer && (
            <div className={`${classPrefix}-popconfirm__footer`}>
              {typeof footer === "function" ? footer.call(null, close) : footer}
            </div>
          )}
        </>
      }
    >
      {children}
    </Bubble>
  );
}
