import React, { forwardRef, useRef, useState, useEffect } from "react";
import { mergeRefs } from "../_util/merge-refs";
import { InputProps, Input } from "../input";

interface TagSelectInputProps extends InputProps {
  maxWidth: number;
}

export const TagSelectInput = forwardRef(function TagSelectInput(
  { value, maxWidth, placeholder, ...props }: TagSelectInputProps,
  ref: React.Ref<HTMLInputElement>
) {
  const inputRef = useRef<HTMLInputElement>(null);
  const mirrorRef = useRef<HTMLSpanElement>(null);
  const [width, setWidth] = useState<number>(0);

  useEffect(() => {
    mirrorRef.current.innerText = value || placeholder;
    const width = mirrorRef.current.clientWidth;
    setWidth(width > maxWidth ? maxWidth : width);
  }, [maxWidth, placeholder, value]);

  return (
    <>
      <Input
        {...props}
        value={value}
        placeholder={placeholder}
        style={{ width: width + 6 }}
        ref={mergeRefs(ref, inputRef)}
      />
      <span
        ref={mirrorRef}
        style={{
          position: "absolute",
          top: -9999,
          left: 0,
          whiteSpace: "pre",
          fontSize: 12,
        }}
      />
    </>
  );
});
