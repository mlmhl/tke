import React from "react";
import classNames from "classnames";
import { Button } from "../button";
import { Icon } from "../icon";
import { StyledProps } from "../_type";
import { useDefault } from "../_util/use-default";
import { useConfig } from "../_util/config-context";

export interface AlertNoticeProps extends StyledProps {
  /**
   * 通告标题
   */
  title?: React.ReactNode;

  /**
   * 通告内容
   */
  children?: React.ReactNode;

  /**
   * 是否默认展开
   */
  defaultOpen?: boolean;

  /**
   * 是否展开（受控）
   */
  open?: boolean;

  /**
   * 展开变化回调（受控）
   */
  onOpenChange?: (open: boolean) => void;
}

export function AlertNotice({
  title,
  children,
  className,
  style,
  open,
  defaultOpen,
  onOpenChange,
}: AlertNoticeProps) {
  const [isOpened, setIsOpened] = useDefault(open, defaultOpen, onOpenChange);
  const { classPrefix } = useConfig();

  const alertClassName = classNames(
    `${classPrefix}-alert`,
    `${classPrefix}-alert--notice`,
    isOpened && "is-expanded",
    className
  );

  const alertElement = (
    <div className={alertClassName} style={style}>
      <span className={`${classPrefix}-alert__decoration`}>
        <Icon type="notice-blue" />
      </span>

      <div className={`${classPrefix}-alert__info`}>
        <p>{title}</p>
        {isOpened && children}
      </div>
      <div className={`${classPrefix}-alert__operational`}>
        {children && (
          <Button
            type="icon"
            icon={isOpened ? "arrowup" : "arrowdown"}
            onClick={() => setIsOpened(!isOpened)}
          />
        )}
      </div>
    </div>
  );

  return alertElement;
}
