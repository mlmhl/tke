"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var moment_1 = tslib_1.__importStar(require("moment"));
var CalendarPart_1 = tslib_1.__importDefault(require("../calendar/CalendarPart"));
var controlled_1 = require("../form/controlled");
var CalendarTable_1 = require("../calendar/CalendarTable");
var Input_1 = require("../input/Input");
var dropdown_1 = require("../dropdown");
var i18n_1 = require("../i18n");
var with_statics_1 = require("../_util/with-statics");
var Popover_1 = require("../popover/Popover");
var util_1 = require("./util");
var use_default_1 = require("../_util/use-default");
var config_context_1 = require("../_util/config-context");
var icon_1 = require("../icon");
var noop_1 = require("../_util/noop");
exports.MonthPicker = with_statics_1.withStatics(function MonthPicker(props) {
    var t = i18n_1.useTranslation(moment_1.default);
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _a = controlled_1.useDefaultValue(props), header = _a.header, className = _a.className, style = _a.style, value = _a.value, onChange = _a.onChange, disabled = _a.disabled, _b = _a.format, format = _b === void 0 ? "YYYY-MM" : _b, _c = _a.placeholder, placeholder = _c === void 0 ? t.selectDate : _c, _d = _a.defaultOpen, defaultOpen = _d === void 0 ? false : _d, open = _a.open, _e = _a.onOpenChange, onOpenChange = _e === void 0 ? noop_1.noop : _e, _f = _a.placement, placement = _f === void 0 ? "bottom-start" : _f, _g = _a.placementOffset, placementOffset = _g === void 0 ? 5 : _g, _h = _a.closeOnScroll, closeOnScroll = _h === void 0 ? true : _h, escapeWithReference = _a.escapeWithReference, overlayClassName = _a.overlayClassName, overlayStyle = _a.overlayStyle, clearable = _a.clearable;
    var _j = tslib_1.__read(react_1.useState(false), 2), hover = _j[0], setHover = _j[1];
    // 当前面板类型
    var _k = tslib_1.__read(react_1.useState("month"), 2), type = _k[0], setType = _k[1];
    // 当前面板展示时间
    var _l = tslib_1.__read(react_1.useState(moment_1.isMoment(value) ? value : getDefaultViewMoment()), 2), curViewMoment = _l[0], setCurViewMoment = _l[1];
    // 当前选中日期
    var _m = tslib_1.__read(react_1.useState(value), 2), curValue = _m[0], setCurValue = _m[1];
    // 选择器是否展开
    var _o = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), active = _o[0], setActive = _o[1];
    // 输入框显示值
    var inputRef = react_1.useRef(null);
    var getInputValue = react_1.useCallback(function (value) {
        return moment_1.isMoment(value) ? value.locale(t.locale).format(format) : "";
    }, [t.locale, format]);
    var _p = tslib_1.__read(react_1.useState(getInputValue(curValue)), 2), inputValue = _p[0], setInputValue = _p[1];
    react_1.useEffect(function () {
        setCurValue(value);
        setInputValue(getInputValue(value));
    }, [format, value, getInputValue]);
    function getDefaultViewMoment() {
        var range = props.range;
        var m = moment_1.default();
        // range 判断
        if (Array.isArray(range)) {
            var _a = tslib_1.__read(range, 2), start = _a[0], end = _a[1];
            if (!moment_1.isMoment(start)) {
                start = moment_1.default(0);
            }
            if (!moment_1.isMoment(end)) {
                end = moment_1.default(Math.pow(2, 52));
            }
            if (end.isBefore(m, "year")) {
                return end;
            }
            if (start.isAfter(m, "year")) {
                return start;
            }
        }
        return m;
    }
    function handleChange(value, context) {
        setCurValue(value);
        setInputValue(getInputValue(value));
        onChange(value, context);
        handleClose();
    }
    function handleOpen() {
        if (disabled) {
            return;
        }
        setActive(true);
        setType("month");
    }
    function handleClose() {
        setInputValue(getInputValue(value));
        setActive(false);
    }
    return (react_1.default.createElement(Popover_1.Popover, { trigger: [
            util_1.DatePickerTrigger,
            { onOpen: handleOpen, onClose: handleClose },
        ], visible: active, onVisibleChange: setActive, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, escapeWithReference: escapeWithReference, overlayClassName: overlayClassName, overlayStyle: overlayStyle, overlay: react_1.default.createElement(dropdown_1.DropdownBox, null,
            react_1.default.createElement(CalendarPart_1.default.Panel, null,
                !!header && react_1.default.createElement(CalendarPart_1.default.Header, null, header),
                react_1.default.createElement(CalendarTable_1.CalendarTable, tslib_1.__assign({}, props, { monthOnly: true, value: curValue, onChange: handleChange, type: type, onTypeChange: setType, curViewMoment: curViewMoment, onCurViewMomentChange: setCurViewMoment })))) },
        react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-monthpicker", className), style: style },
            react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-monthpicker__input", {
                    "is-hover": hover && value && clearable,
                }), onMouseEnter: function () { return setHover(true); }, onMouseLeave: function () { return setHover(false); } },
                react_1.default.createElement(Input_1.Input, { ref: inputRef, disabled: disabled, placeholder: placeholder, value: inputValue, onFocus: function () { return inputRef.current.blur(); } }),
                clearable && (react_1.default.createElement(icon_1.Icon, { type: "dismiss", onClick: function (event) {
                        event.stopPropagation();
                        onChange(null, { event: event });
                    } }))))));
}, {
    defaultLabelAlign: "middle",
});
//# sourceMappingURL=MonthPicker.js.map