"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var icon_1 = require("../icon");
var popover_1 = require("../popover");
var create_rocket_1 = require("../_util/create-rocket");
var use_outside_click_1 = require("../_util/use-outside-click");
var forward_ref_with_statics_1 = require("../_util/forward-ref-with-statics");
var use_default_1 = require("../_util/use-default");
var config_context_1 = require("../_util/config-context");
var key_code_1 = require("../_util/key-code");
var merge_refs_1 = require("../_util/merge-refs");
var noop_1 = require("../_util/noop");
var getAppearanceConfig = function (classPrefix) { return ({
    // appearance  headerClassName         icon
    default: [classPrefix + "-dropdown-default", "arrowdown"],
    button: [classPrefix + "-dropdown-btn", "arrowdown"],
    link: [classPrefix + "-dropdown-link", "arrowdown"],
    filter: [classPrefix + "-dropdown-filter", "filter"],
    // 兼容原有 raw 类型
    raw: [null, null],
}); };
function DropdownBox(_a) {
    var _b;
    var className = _a.className, _c = _a.style, style = _c === void 0 ? {} : _c, children = _a.children, onClick = _a.onClick, _d = _a.onUpdate, onUpdate = _d === void 0 ? noop_1.noop : _d, adaptable = _a.adaptable;
    var classPrefix = config_context_1.useConfig().classPrefix;
    react_1.useLayoutEffect(function () { return function () {
        onUpdate();
    }; }, [children, onUpdate]);
    if (!children) {
        return null;
    }
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-dropdown-box", (_b = {}, _b[classPrefix + "-dropdown-box--adapte"] = adaptable, _b), className), style: tslib_1.__assign({ position: "relative" }, style), onClick: onClick }, children));
}
exports.DropdownBox = DropdownBox;
var ClickTrigger = function (_a) {
    var childrenElementRef = _a.childrenElementRef, overlayElementRef = _a.overlayElementRef, visible = _a.visible, setVisible = _a.setVisible, _b = _a.openDelay, openDelay = _b === void 0 ? 0 : _b, _c = _a.closeDelay, closeDelay = _c === void 0 ? 0 : _c, render = _a.render, onClose = _a.onClose, onOpen = _a.onOpen;
    var listen = use_outside_click_1.useOutsideClick([childrenElementRef, overlayElementRef]).listen;
    listen(function () {
        if (visible) {
            onClose();
            setVisible(false, closeDelay);
        }
    });
    return render({
        overlayProps: {},
        childrenProps: {},
    });
};
var HoverTrigger = function (_a) {
    var visible = _a.visible, setVisible = _a.setVisible, _b = _a.openDelay, openDelay = _b === void 0 ? 50 : _b, _c = _a.closeDelay, closeDelay = _c === void 0 ? 100 : _c, render = _a.render, onClose = _a.onClose, onOpen = _a.onOpen;
    var commonProps = {
        onMouseEnter: function () {
            setVisible(true, openDelay).then(function (done) { return done && !visible && onOpen(); });
        },
        onMouseLeave: function () {
            setVisible(false, closeDelay).then(function (done) { return done && onClose(); });
        },
    };
    return render({
        overlayProps: commonProps,
        childrenProps: commonProps,
    });
};
exports.Dropdown = forward_ref_with_statics_1.forwardRefWithStatics(function (props, ref) {
    var _a;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _b = props.defaultOpen, defaultOpen = _b === void 0 ? false : _b, open = props.open, onOpenChange = props.onOpenChange, _c = props.appearance, appearance = _c === void 0 ? props.appearence : _c, button = props.button, size = props.size, _d = props.placement, placement = _d === void 0 ? "bottom-start" : _d, _e = props.placementOffset, placementOffset = _e === void 0 ? 5 : _e, trigger = props.trigger, children = props.children, disabled = props.disabled, _f = props.onOpen, onOpen = _f === void 0 ? noop_1.noop : _f, _g = props.onClose, onClose = _g === void 0 ? noop_1.noop : _g, _h = props.onKeyDown, onKeyDown = _h === void 0 ? noop_1.noop : _h, _j = props.onFocus, onFocus = _j === void 0 ? noop_1.noop : _j, _k = props.clickClose, clickClose = _k === void 0 ? true : _k, _l = props.closeOnScroll, closeOnScroll = _l === void 0 ? true : _l, escapeWithReference = props.escapeWithReference, style = props.style, className = props.className, boxClassName = props.boxClassName, boxSizeSync = props.boxSizeSync, boxAdaptable = props.boxAdaptable, updateOnChildrenChange = props.updateOnChildrenChange, overlayClassName = props.overlayClassName, overlayStyle = props.overlayStyle, clearable = props.clearable, _m = props.onClear, onClear = _m === void 0 ? noop_1.noop : _m;
    var _o = props.boxStyle, boxStyle = _o === void 0 ? {} : _o;
    var _p = tslib_1.__read(react_1.useState(false), 2), hover = _p[0], setHover = _p[1];
    var _q = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), isOpened = _q[0], setIsOpened = _q[1];
    // 是否打开一段时间，防止连续 focus/click 连续两次触发开启导致关闭
    var _r = tslib_1.__read(react_1.useState(false), 2), stayedOpen = _r[0], setStayedOpen = _r[1];
    react_1.useEffect(function () {
        if (isOpened) {
            setTimeout(function () { return setStayedOpen(true); }, 150);
        }
        else {
            setStayedOpen(false);
        }
    }, [isOpened]);
    var dropdownRef = react_1.useRef(null);
    var _s = tslib_1.__read(react_1.useState(null), 2), dropdownWidth = _s[0], setDropdownWidth = _s[1];
    var close = react_1.useCallback(function () {
        setIsOpened(false);
        onClose();
    }, [onClose, setIsOpened]);
    var appearanceConfig = getAppearanceConfig(classPrefix);
    var _t = tslib_1.__read(appearanceConfig[appearance] || appearanceConfig.default, 2), headerClassName = _t[0], icon = _t[1];
    var boxChildren = react_1.useMemo(function () {
        return typeof children === "function"
            ? children.call(null, close)
            : children;
    }, [children, close]);
    react_1.useEffect(function () {
        if (dropdownRef.current) {
            setDropdownWidth(dropdownRef.current.clientWidth);
        }
    }, [button, size]);
    if (boxSizeSync && dropdownWidth) {
        boxStyle = tslib_1.__assign(tslib_1.__assign({}, boxStyle), { minWidth: dropdownWidth, maxWidth: dropdownWidth });
    }
    var Trigger = trigger === "hover" ? HoverTrigger : ClickTrigger;
    return (react_1.default.createElement(popover_1.Popover, { trigger: disabled
            ? "empty"
            : [
                Trigger,
                {
                    onClose: onClose,
                    onOpen: onOpen,
                },
            ], visible: isOpened, onVisibleChange: setIsOpened, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, escapeWithReference: escapeWithReference, overlayClassName: overlayClassName, overlayStyle: overlayStyle, overlay: function (_a) {
            var scheduleUpdate = _a.scheduleUpdate;
            return disabled ? null : (react_1.default.createElement(DropdownBox, { className: boxClassName, style: boxStyle, onClick: clickClose ? close : null, onUpdate: updateOnChildrenChange ? scheduleUpdate : undefined, adaptable: boxAdaptable }, boxChildren));
        } },
        react_1.default.createElement("div", { ref: merge_refs_1.mergeRefs(ref, dropdownRef), className: classnames_1.default(classPrefix + "-dropdown", className, (_a = {},
                _a["size-" + (size === "full" || size === "auto" ? size + "-width" : size)] = size,
                _a["is-expanded"] = isOpened,
                _a["is-disabled"] = disabled,
                _a)), style: style, tabIndex: disabled ? -1 : 0, onClick: function (event) {
                event.stopPropagation();
                if (disabled) {
                    return;
                }
                if (!isOpened) {
                    onOpen();
                    setIsOpened(true);
                }
                else if (stayedOpen) {
                    onClose();
                    setIsOpened(false);
                }
            }, onKeyDown: function (event) {
                if (onKeyDown(event, { open: isOpened }) === false) {
                    return;
                }
                switch (event.keyCode) {
                    case key_code_1.KeyCode.Space:
                    case key_code_1.KeyCode.Enter:
                        if (!isOpened) {
                            setIsOpened(true);
                            onOpen();
                        }
                        if (isOpened) {
                            close();
                        }
                        break;
                    case key_code_1.KeyCode.Esc:
                        if (isOpened) {
                            close();
                        }
                        break;
                }
            }, onFocus: onFocus, onMouseEnter: function () {
                setHover(true);
            }, onMouseLeave: function () {
                setHover(false);
            } }, appearance === "pure" ? (button) : (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-dropdown__header", headerClassName) },
            react_1.default.createElement("div", { className: classPrefix + "-dropdown__value" }, button),
            clearable && hover ? (react_1.default.createElement(icon_1.Icon, { type: "dismiss", onClick: function (e) {
                    e.stopPropagation();
                    onClear(e);
                } })) : (icon && react_1.default.createElement(icon_1.Icon, { type: icon })))))));
}, {
    Footer: create_rocket_1.createRocket("DropdownFooter", "div.@{prefix}-dropdown-box__footer"),
});
//# sourceMappingURL=Dropdown.js.map