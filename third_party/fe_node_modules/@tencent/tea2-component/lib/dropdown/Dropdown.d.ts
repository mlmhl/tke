import React from "react";
import { StyledProps, Combine } from "../_type";
import { PopoverProps } from "../popover";
import { SizeType } from "../input";
/**
 * 下拉类组件通用 Props
 */
export interface CommonDropdownProps {
    /**
     * 是否默认展开
     */
    defaultOpen?: boolean;
    /**
     * 是否展开（受控）
     */
    open?: boolean;
    /**
     * 展开变化回调（受控）
     */
    onOpenChange?: (open: boolean) => void;
    /**
     * 下拉出现的位置
     * @default "bottom-start"（从底部弹出，左侧对齐）
     */
    placement?: PopoverProps["placement"];
    /**
     * 弹出位置偏离参考位置的位移
     *
     * 如： `10`、`"50%"`、`"10 + 10%"`、`[10, 10]`
     *
     * @default 5
     */
    placementOffset?: PopoverProps["placementOffset"];
    /**
     * 是否在父容器滚动时关闭
     * @default true
     */
    closeOnScroll?: PopoverProps["closeOnScroll"];
    /**
     * 是否随参考元素离开可视范围
     * @default false
     */
    escapeWithReference?: PopoverProps["escapeWithReference"];
    /**
     * 覆盖层自定义类名
     */
    overlayClassName?: PopoverProps["overlayClassName"];
    /**
     * 覆盖层自定义样式
     */
    overlayStyle?: PopoverProps["overlayStyle"];
}
export interface DropdownKeyDownContext {
    /**
     * 当前是否展开
     */
    open: boolean;
}
export interface DropdownProps extends Combine<CommonDropdownProps, StyledProps> {
    /**
     * 是否支持清空
     * @default false
     * @version 2.3.2
     */
    clearable?: boolean;
    /**
     * 点击清空回调
     * @version 2.3.2
     */
    onClear?: (event: React.MouseEvent) => void;
    /**
     * 下拉按钮文本
     */
    button: React.ReactNode;
    /**
     * 下拉内容
     * @docType React.ReactNode | ((close: () => void) => React.ReactNode)
     */
    children: React.ReactNode | ((close: () => void) => React.ReactNode);
    /**
     * 下拉按钮的外观：
     *
     * - `default` 无边框，适用于页面标题和表格内
     * - `button` 为按钮风格，有边框，多用于操作栏中
     * - `link` 为超链接风格
     * - `filter` 为过滤组件风格，多用于表头筛选
     * - `pure` 无额外样式
     *
     * 原有 `raw` 类型建议使用 `pure` 进行改造
     *
     * @default "default"
     * @version 2.0.9
     */
    appearance?: "default" | "button" | "link" | "filter" | "pure";
    /**
     * **\[Deprecated\]** 请使用 `appearance` 属性
     * @deprecated
     */
    appearence?: "default" | "button" | "link" | "filter" | "pure";
    /**
     * 下拉框尺寸，使用 `"full"` 撑满容器宽度
     */
    size?: SizeType | "auto";
    /**
     * 触发方式
     *
     * @default "click"
     */
    trigger?: "click" | "hover";
    /**
     * 是否在下拉内容点击时关闭
     * @default true
     */
    clickClose?: boolean;
    /**
     * 是否禁用
     * @default false
     */
    disabled?: boolean;
    /**
     * 打开时回调
     */
    onOpen?: () => void;
    /**
     * 关闭时回调
     */
    onClose?: () => void;
    /**
     * 弹出区域自定义类名
     */
    boxClassName?: string;
    /**
     * 弹出区域自定义样式
     */
    boxStyle?: React.CSSProperties;
    /**
     * 弹出区域尺寸（宽度）是否同步按钮尺寸
     *
     * @default false
     */
    boxSizeSync?: boolean;
    /**
     * 弹出区域是否自适应可视区域大小
     *
     * 内容超出时可视区域大小出现内部滚动
     *
     * @default false
     * @version 2.2.4
     */
    boxAdaptable?: boolean;
    /**
     * 是否在 `children` 变化时更新位置
     *
     * @default false
     */
    updateOnChildrenChange?: boolean;
    /**
     * 当焦点在 Dropdown 按钮时的键盘事件，返回 `false` 禁用默认行为
     */
    onKeyDown?: (event: React.KeyboardEvent<HTMLDivElement>, context: DropdownKeyDownContext) => void | boolean;
    /**
     * 元素聚焦事件
     */
    onFocus?: React.DOMAttributes<HTMLDivElement>["onFocus"];
}
export declare function DropdownBox({ className, style, children, onClick, onUpdate, adaptable, }: {
    onClick?: (event: React.MouseEvent) => void;
    children?: React.ReactNode;
    onUpdate?: () => void;
    adaptable?: boolean;
} & StyledProps): JSX.Element;
export declare const Dropdown: React.FunctionComponent<DropdownProps & React.RefAttributes<HTMLDivElement>> & {
    Footer: React.ForwardRefExoticComponent<import("../_util/create-rocket").RocketProps & React.RefAttributes<HTMLElement>>;
};
