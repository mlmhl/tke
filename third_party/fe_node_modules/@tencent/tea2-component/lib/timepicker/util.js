"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var moment_1 = tslib_1.__importStar(require("moment"));
var SEQUENCE_24 = Array(24)
    .fill(0)
    .map(function (_, i) { return i; });
var SEQUENCE_60 = Array(60)
    .fill(0)
    .map(function (_, i) { return i; });
var startOfDay = moment_1.default().startOf("day");
var endOfDay = moment_1.default().endOf("day");
function getHourMinuteSecond(time) {
    return {
        hour: time.hour(),
        minute: time.minute(),
        second: time.second(),
    };
}
exports.getHourMinuteSecond = getHourMinuteSecond;
/**
 * 解析 format
 * @param format
 */
function genShowHourMinuteSecond(format) {
    // Ref: http://momentjs.com/docs/#/parsing/string-format/
    return {
        showHour: format.indexOf("H") > -1 ||
            format.indexOf("h") > -1 ||
            format.indexOf("k") > -1,
        showMinute: format.indexOf("m") > -1,
        showSecond: format.indexOf("s") > -1,
    };
}
exports.genShowHourMinuteSecond = genShowHourMinuteSecond;
/**
 * 校验 range
 */
function isValidRange(range) {
    return Array.isArray(range) && (moment_1.isMoment(range[0]) || moment_1.isMoment(range[1]));
}
/**
 * 获取 disabled 部分
 */
function getDisabledHours(_a) {
    var range = _a.range, _b = _a.disabledHours, disabledHours = _b === void 0 ? function () { return []; } : _b;
    if (isValidRange(range)) {
        var min_1 = getHourMinuteSecond(range[0] || startOfDay);
        var max_1 = getHourMinuteSecond(range[1] || endOfDay);
        return tslib_1.__spread(disabledHours(), SEQUENCE_24.filter(function (i) { return i < min_1.hour || i > max_1.hour; }));
    }
    return disabledHours();
}
exports.getDisabledHours = getDisabledHours;
function getDisabledMinutes(hour, _a) {
    var range = _a.range, _b = _a.disabledMinutes, disabledMinutes = _b === void 0 ? function () { return []; } : _b;
    if (isValidRange(range)) {
        var min_2 = getHourMinuteSecond(range[0] || startOfDay);
        var max_2 = getHourMinuteSecond(range[1] || endOfDay);
        return tslib_1.__spread(disabledMinutes(hour), SEQUENCE_60.filter(function (i) {
            return (hour === min_2.hour && i < min_2.minute) ||
                (hour === max_2.hour && i > max_2.minute);
        }));
    }
    return disabledMinutes(hour);
}
exports.getDisabledMinutes = getDisabledMinutes;
function getDisabledSeconds(hour, minute, _a) {
    var range = _a.range, _b = _a.disabledSeconds, disabledSeconds = _b === void 0 ? function () { return []; } : _b;
    if (isValidRange(range)) {
        var min_3 = getHourMinuteSecond(range[0] || startOfDay);
        var max_3 = getHourMinuteSecond(range[1] || endOfDay);
        return tslib_1.__spread(disabledSeconds(hour, minute), SEQUENCE_60.filter(function (i) {
            return (hour === min_3.hour && minute === min_3.minute && i < min_3.second) ||
                (hour === max_3.hour && minute === max_3.minute && i > max_3.second);
        }));
    }
    return disabledSeconds(hour, minute);
}
exports.getDisabledSeconds = getDisabledSeconds;
/**
 * 获取自动调整后的合法值
 */
function getValidTimeValue(value, rangeOptions, format) {
    if (rangeOptions === void 0) { rangeOptions = {}; }
    if (format === void 0) { format = "HH:mm:ss"; }
    var _a = genShowHourMinuteSecond(format), showHour = _a.showHour, showMinute = _a.showMinute, showSecond = _a.showSecond;
    var _b = getHourMinuteSecond(value || moment_1.default(0, "HH")), hour = _b.hour, minute = _b.minute, second = _b.second;
    var disabledHours = getDisabledHours(rangeOptions);
    if (showHour && disabledHours.includes(hour)) {
        hour = SEQUENCE_24.find(function (i) { return !disabledHours.includes(i); });
    }
    var disabledMinutes = getDisabledMinutes(hour, rangeOptions);
    if (showMinute && disabledMinutes.includes(minute)) {
        minute = SEQUENCE_60.find(function (i) { return !disabledMinutes.includes(i); });
    }
    var disabledSeconds = getDisabledSeconds(hour, minute, rangeOptions);
    if (showSecond && disabledSeconds.includes(second)) {
        second = SEQUENCE_60.find(function (i) { return !disabledSeconds.includes(i); });
    }
    return (value || moment_1.default()).set({ hour: hour, minute: minute, second: second });
}
exports.getValidTimeValue = getValidTimeValue;
//# sourceMappingURL=util.js.map