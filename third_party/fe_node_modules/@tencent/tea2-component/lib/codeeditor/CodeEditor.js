"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var use_last_1 = require("../_util/use-last");
var merge_style_1 = require("../_util/merge-style");
var tips_1 = require("../tips");
var inject_value_1 = require("../_util/inject-value");
var config_context_1 = require("../_util/config-context");
// 获取值时自增引用
var nextValueKey = 0;
function CodeEditor(props) {
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _a = tslib_1.__read(react_1.useState(false), 2), ready = _a[0], setReady = _a[1];
    var _b = tslib_1.__read(react_1.useState(false), 2), error = _b[0], setError = _b[1];
    var timerRef = react_1.useRef(null);
    var options = props.options, autoFocus = props.autoFocus, className = props.className, style = props.style, onEdit = props.onEdit, onReady = props.onReady, onSave = props.onSave, onError = props.onError, onMessage = props.onMessage, _c = props.timeout, timeout = _c === void 0 ? 10000 : _c, onTimeout = props.onTimeout, _d = props.loadingPlaceholder, loadingPlaceholder = _d === void 0 ? react_1.default.createElement(tips_1.LoadingTip, null) : _d, _e = props.errorPlaceholder, errorPlaceholder = _e === void 0 ? function (retry) { return react_1.default.createElement(tips_1.ErrorTip, { onRetry: retry }); } : _e, _f = props.src, src = _f === void 0 ? "https://imgcache.qq.com/qcloud/vendors/monaco-editor/frame/editor.html" : _f;
    var handler = use_last_1.useLast({ onEdit: onEdit, onReady: onReady, onSave: onSave, onError: onError, onMessage: onMessage });
    var iframeRef = react_1.useRef(null);
    var valueCallbackMap = react_1.useRef(new Map());
    react_1.useEffect(function () {
        if (!iframeRef.current) {
            return function () { return null; };
        }
        var instance;
        var callHandler = function (method) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (handler.current && typeof handler.current[method] === "function") {
                if (method === "onError") {
                    handler.current[method](args[0]);
                    return;
                }
                if (method === "onMessage") {
                    handler.current[method](args[0], args[1]);
                    return;
                }
                handler.current[method](instance);
            }
        };
        var receive = function (evt) {
            if (!iframeRef.current ||
                evt.source !== iframeRef.current.contentWindow) {
                return;
            }
            var source = evt.source;
            var message = decodeMessage(evt.data);
            if (!message) {
                return;
            }
            var isEventPrevented = false;
            if (onMessage) {
                var preventDefault_1 = evt.preventDefault.bind(evt);
                callHandler("onMessage", message, Object.assign(evt, {
                    preventDefault: function () {
                        preventDefault_1();
                        isEventPrevented = true;
                    },
                }));
            }
            if (isEventPrevented) {
                return;
            }
            var send = function (type, payload) {
                source.postMessage(encodeMessage(type, payload), src.replace(/(\w)\/(.*)/, "$1"));
            };
            var type = message.type, payload = message.payload;
            switch (type) {
                case "ready": {
                    send("create", tslib_1.__assign({ language: "javascript", autoFocus: autoFocus }, (options || null)));
                    instance = {
                        focus: function () { return send("focus"); },
                        getValue: function (option) {
                            return new Promise(function (resolve) {
                                var key = nextValueKey;
                                nextValueKey += 1;
                                send("get-value", { key: key, option: option });
                                valueCallbackMap.current.set(key.toString(), resolve);
                            });
                        },
                        setValue: function (value) { return send("set-value", { value: value }); },
                        updateOptions: function (options) { return send("update-options", { options: options }); },
                        sendMessage: send,
                    };
                    removeTimeoutListener();
                    setReady(true);
                    callHandler("onReady");
                    break;
                }
                case "value": {
                    var key = payload.key, value = payload.value;
                    var resolve = valueCallbackMap.current.get(String(key));
                    if (resolve) {
                        valueCallbackMap.current.delete(String(key));
                        resolve(value);
                    }
                    break;
                }
                case "edit": {
                    callHandler("onEdit");
                    break;
                }
                case "save": {
                    callHandler("onSave");
                    break;
                }
                case "error": {
                    removeTimeoutListener();
                    setError(true);
                    callHandler("onError", new Error(payload.message));
                    break;
                }
            }
        };
        addTimeoutListener();
        window.addEventListener("message", receive);
        return function () {
            removeTimeoutListener();
            window.removeEventListener("message", receive);
        };
    }, []); // eslint-disable-line react-hooks/exhaustive-deps
    function addTimeoutListener() {
        removeTimeoutListener();
        timerRef.current = setTimeout(function () {
            setError(true);
            if (typeof onTimeout === "function") {
                onTimeout();
            }
        }, timeout);
    }
    function removeTimeoutListener() {
        clearTimeout(timerRef.current);
    }
    if (error) {
        return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-code-editor", className), style: merge_style_1.mergeStyle({ position: "relative" }, style) },
            react_1.default.createElement(Tips, { classPrefix: classPrefix }, inject_value_1.injectValue(errorPlaceholder)(function () {
                setError(false);
                addTimeoutListener();
            }))));
    }
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-code-editor", className), style: merge_style_1.mergeStyle({ position: "relative" }, style) },
        react_1.default.createElement("iframe", { title: "code-editor", ref: iframeRef, src: src, className: classPrefix + "-code-editor-frame", style: { width: "100%", height: "100%" }, frameBorder: "no" }),
        !ready && react_1.default.createElement(Tips, { classPrefix: classPrefix }, loadingPlaceholder)));
}
exports.CodeEditor = CodeEditor;
function decodeMessage(message) {
    try {
        var _a = JSON.parse(message), type = _a.type, payload = _a.payload;
        if (type) {
            return { type: type, payload: payload };
        }
    }
    catch (err) {
        // continue
    }
    return null;
}
function encodeMessage(type, payload) {
    return JSON.stringify({ type: type, payload: payload });
}
function DefaultTipsWrapper(_a) {
    var children = _a.children, _b = _a.style, style = _b === void 0 ? {} : _b;
    return (react_1.default.createElement("div", { style: tslib_1.__assign({ padding: "20px 0", textAlign: "center" }, style) }, children));
}
function Tips(_a) {
    var children = _a.children, classPrefix = _a.classPrefix;
    return (react_1.default.createElement("div", { className: classPrefix + "-code-editor-loading", style: {
            position: "absolute",
            left: 0,
            top: 0,
            bottom: 0,
            right: 0,
        } }, typeof children === "string" ? (react_1.default.createElement(DefaultTipsWrapper, { style: {
            padding: 0,
            height: 30,
            lineHeight: 30,
            opacity: 0.5,
        } }, children)) : (react_1.default.createElement(DefaultTipsWrapper, null, children))));
}
//# sourceMappingURL=CodeEditor.js.map