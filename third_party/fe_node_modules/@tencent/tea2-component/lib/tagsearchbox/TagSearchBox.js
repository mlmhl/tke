"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable */
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var clone_1 = tslib_1.__importDefault(require("clone"));
var Tag_1 = require("./Tag");
var TagInput_1 = require("./TagInput");
var with_outside_click_1 = require("../_util/with-outside-click");
var i18n_1 = require("../i18n");
var bubble_1 = require("../bubble");
var modal_1 = require("../modal");
var TagSearchBoxContext_1 = require("./TagSearchBoxContext");
var button_1 = require("../button");
var util_1 = require("../util");
var noop = function () { };
/**
 * 焦点所在位置类型
 */
var FocusPosType;
(function (FocusPosType) {
    FocusPosType[FocusPosType["INPUT"] = 0] = "INPUT";
    FocusPosType[FocusPosType["INPUT_EDIT"] = 1] = "INPUT_EDIT";
    FocusPosType[FocusPosType["TAG"] = 2] = "TAG";
})(FocusPosType = exports.FocusPosType || (exports.FocusPosType = {}));
var COUNTER = 0;
var TagSearchBox = /** @class */ (function (_super) {
    tslib_1.__extends(TagSearchBox, _super);
    function TagSearchBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            active: false,
            dialogActive: false,
            curPos: 0,
            curPosType: FocusPosType.INPUT,
            showSelect: true,
            tags: _this.props.defaultValue
                ? _this.props.defaultValue.map(function (item) {
                    item["_key"] = COUNTER++;
                    return item;
                })
                : [],
        };
        _this.resetTagsState = function (props, callback) {
            if ("value" in props) {
                var value = props.value.map(function (item) {
                    if (!("_key" in item)) {
                        item["_key"] = COUNTER++;
                    }
                    return item;
                });
                _this.setState({ tags: clone_1.default(value) }, function () {
                    callback && callback();
                });
            }
        };
        _this.open = function () {
            var _a = _this.state, active = _a.active, tags = _a.tags;
            if (!active) {
                _this.setState({ active: true });
                // 展开时不激活 select 显示
                _this.setState({ curPosType: FocusPosType.INPUT, curPos: tags.length });
            }
            else {
                _this.handleTagEvent("click-input", tags.length);
            }
            _this.setState({ showSelect: true });
            setTimeout(function () {
                _this["tag-" + tags.length].moveToEnd();
            }, 100);
        };
        _this.close = function () {
            // 编辑未完成的取消编辑
            var tags = _this.state.tags.map(function (item, index) {
                if (item["_edit"]) {
                    _this["tag-" + index].editDone();
                    item["_edit"] = false;
                }
                return item;
            });
            _this.setTags(tags, function () {
                _this.setState({ showSelect: false });
                if (_this.state.active) {
                    _this.setState({ curPos: -1 }, function () {
                        return _this.setState({ active: false }, function () {
                            if (_this["search-box"]) {
                                _this["search-box"].scrollLeft = 0;
                            }
                        });
                    });
                }
            }, false);
        };
        _this.getValue = function (tags) {
            var result = [];
            tags.forEach(function (item) {
                var values = item.values, _a = item.attr, attr = _a === void 0 ? null : _a;
                if (values.length > 0) {
                    result.push({ attr: attr, values: values, _key: item["_key"], _edit: item["_edit"] });
                }
            });
            return result;
        };
        _this.notify = function (tags) {
            var _a = _this.props.onChange, onChange = _a === void 0 ? noop : _a;
            onChange(_this.getValue(tags));
        };
        /**
         * 点击清除按钮触发事件
         */
        _this.handleClear = function (e) {
            e.stopPropagation();
            var _a = _this.props.onClearButtonClick, onClearButtonClick = _a === void 0 ? noop : _a;
            onClearButtonClick(e);
            var tags = _this.state.tags;
            var nextTags = tags.filter(function (i) { return i.attr && i.attr.removeable === false; });
            var index = "tag-" + nextTags.length;
            if (tags.length <= 0) {
                _this[index].setInputValue("");
                return;
            }
            _this.setTags(nextTags, function () {
                return setTimeout(function () {
                    _this[index].setInputValue("");
                    _this[index].focusInput();
                }, 0);
            });
            _this.setState({ curPos: 0, curPosType: FocusPosType.INPUT });
            // 刷新下拉列表位置
            var input = _this["tag-" + tags.length];
            if (input) {
                input.scheduleUpdate();
            }
        };
        /**
         * 点击帮助触发事件
         */
        _this.handleHelp = function (e) {
            e.stopPropagation();
            var _a = _this.props.onHelpButtonClick, onHelpButtonClick = _a === void 0 ? noop : _a;
            if (onHelpButtonClick(e) === false) {
                return;
            }
            _this.setState({ dialogActive: true });
        };
        /**
         * 点击搜索触发事件
         */
        _this.handleSearch = function (e) {
            if (!_this.state.active) {
                // 如果监听了按钮点击，此时点击按钮不激活搜索框
                if ("onSearchButtonClick" in _this.props) {
                    e.stopPropagation();
                    _this.props.onSearchButtonClick(e, _this.getValue(_this.state.tags));
                }
                return;
            }
            e.stopPropagation();
            // 输入值生成标签操作会异步改变 tags
            // 此处保证 tags 状态变化完成后再进行回调
            setTimeout(function () {
                var _a = _this.props.onSearchButtonClick, onSearchButtonClick = _a === void 0 ? noop : _a;
                onSearchButtonClick(e, _this.getValue(_this.state.tags));
            }, 100);
            var _a = _this.state, curPos = _a.curPos, curPosType = _a.curPosType, tags = _a.tags;
            var flag = false;
            var input = _this["tag-" + tags.length];
            if (input && input.addTagByInputValue) {
                if (input.addTagByInputValue()) {
                    flag = true;
                }
            }
            for (var i = 0; i < tags.length; ++i) {
                if (!_this["tag-" + i] || !_this["tag-" + i].addTagByEditInputValue)
                    return;
                if (tags[i]["_edit"] && _this["tag-" + i].addTagByEditInputValue())
                    flag = true;
            }
            if (flag)
                return;
            _this.notify(_this.state.tags);
            input.focusInput();
        };
        /**
         *  处理Tag相关事件
         */
        _this.handleTagEvent = function (type, index, payload) {
            var _a = _this.state, tags = _a.tags, active = _a.active;
            switch (type) {
                case "add":
                    payload["_key"] = COUNTER++;
                    tags.splice(++index, 0, payload);
                    _this.setTags(tags, function () {
                        if (_this["tag-" + index]) {
                            _this["tag-" + index].focusInput();
                        }
                    });
                    _this.setState({ showSelect: false });
                    break;
                case "edit":
                    _this["tag-" + index].editDone();
                    tags[index].attr = payload.attr;
                    tags[index].values = payload.values;
                    tags[index]["_edit"] = false;
                    _this.setTags(tags);
                    index++;
                    _this.setState({ showSelect: false, curPosType: FocusPosType.INPUT });
                    break;
                case "edit-cancel":
                    _this["tag-" + index].editDone();
                    _this.setTags(tags, function () { return null; }, false);
                    _this.setState({ showSelect: false, curPosType: FocusPosType.INPUT });
                    break;
                case "editing":
                    if ("attr" in payload && tags[index])
                        tags[index].attr = payload.attr;
                    if ("values" in payload && tags[index])
                        tags[index].values = payload.values;
                    _this.setTags(tags, null, false);
                    break;
                case "del":
                    if (payload === "keyboard")
                        index--;
                    if (!tags[index])
                        break;
                    // 检查不可移除
                    var attr = tags[index].attr;
                    if (attr && "removeable" in attr && attr.removeable === false) {
                        break;
                    }
                    tags.splice(index, 1);
                    _this.setTags(tags, function () {
                        _this.setState({ curPosType: FocusPosType.INPUT });
                    });
                    if (payload !== "edit") {
                        _this.setState({ showSelect: false });
                    }
                    break;
                // payload 为点击位置
                case "click":
                    if (!active) {
                        _this.open();
                        return;
                    }
                    // 触发修改
                    var pos_1 = payload;
                    tags[index]["_edit"] = true;
                    _this.setTags(tags, function () {
                        _this.setState({ showSelect: true }, function () {
                            _this["tag-" + index].edit(pos_1);
                        });
                    }, false);
                    _this.setState({ curPosType: FocusPosType.INPUT_EDIT });
                    break;
                case "click-input":
                    if (payload === "edit") {
                        _this.setState({ curPosType: FocusPosType.INPUT_EDIT });
                    }
                    else {
                        _this.setState({ curPosType: FocusPosType.INPUT });
                    }
                    if (!active) {
                        _this.setState({ active: true });
                    }
                    _this.setState({ showSelect: true });
                    break;
            }
            _this.setState({ curPos: index });
        };
        return _this;
    }
    TagSearchBox.prototype.componentDidMount = function () {
        this.resetTagsState(this.props);
    };
    TagSearchBox.prototype.componentWillReceiveProps = function (nextProps) {
        this.resetTagsState(nextProps);
    };
    // Tags 发生变动
    TagSearchBox.prototype.setTags = function (tags, callback, notify) {
        var _this = this;
        if (notify === void 0) { notify = true; }
        var cb = function () {
            notify && _this.notify(tags);
            callback && callback();
        };
        // 受控模式
        if (notify && this.props.value) {
            this.resetTagsState(this.props, cb);
        }
        else {
            this.setState({ tags: tags }, cb);
        }
    };
    TagSearchBox.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.state, active = _b.active, tags = _b.tags, curPos = _b.curPos, curPosType = _b.curPosType, dialogActive = _b.dialogActive, showSelect = _b.showSelect;
        var _c = this.props, t = _c.t, classPrefix = _c.config.classPrefix, className = _c.className, _d = _c.style, style = _d === void 0 ? {} : _d, _e = _c.minWidth, minWidth = _e === void 0 ? 210 : _e, attributes = _c.attributes, hideHelp = _c.hideHelp, _f = _c.tips, tips = _f === void 0 ? t.tagSearchBoxTips : _f, _g = _c.attributesSelectTips, attributesSelectTips = _g === void 0 ? t.tagSearchBoxSelectTitle : _g;
        // 用于计算 focused 及 isFocused, 判断是否显示选择组件
        // (直接使用 Input 组件内部 onBlur 判断会使得 click 时组件消失)
        var focusedInputIndex = -1;
        if (curPosType === FocusPosType.INPUT ||
            curPosType === FocusPosType.INPUT_EDIT) {
            focusedInputIndex = curPos;
        }
        var tagList = tags.map(function (item, index) {
            // 补全 attr 属性
            attributes.forEach(function (attrItem) {
                if (item.attr && attrItem.key && attrItem.key == item.attr.key) {
                    item.attr = Object.assign({}, item.attr, attrItem);
                }
            });
            var selectedAttrKeys = [];
            tags.forEach(function (tag) {
                if (tag.attr &&
                    item.attr &&
                    item["_edit"] &&
                    item.attr.key === tag.attr.key)
                    return null;
                if (tag.attr && tag.attr.key && !tag.attr.reusable) {
                    selectedAttrKeys.push(tag.attr.key);
                }
            });
            var useableAttributes = attributes.filter(function (item) { return selectedAttrKeys.indexOf(item.key) < 0; });
            return (react_1.default.createElement(Tag_1.Tag, { ref: function (tag) { return (_this["tag-" + index] = tag); }, active: active, key: item["_key"], attributes: useableAttributes, attr: item.attr, values: item.values, maxWidth: _this["search-wrap"] ? _this["search-wrap"].clientWidth : null, focused: focusedInputIndex === index && showSelect ? curPosType : null, dispatchTagEvent: function (type, payload) {
                    return _this.handleTagEvent(type, index, payload);
                } }));
        });
        var selectedAttrKeys = tags
            .map(function (item) { return (item.attr && !item.attr.reusable ? item.attr.key : null); })
            .filter(function (item) { return !!item; });
        var useableAttributes = attributes.filter(function (item) { return selectedAttrKeys.indexOf(item.key) < 0; });
        tagList.push(react_1.default.createElement(TagInput_1.TagInput, { key: "__input__", ref: function (input) { return (_this["tag-" + tags.length] = input); }, active: active, maxWidth: this["search-wrap"] ? this["search-wrap"].clientWidth : null, attributes: useableAttributes, isFocused: focusedInputIndex === tags.length && showSelect, dispatchTagEvent: function (type, payload) {
                return _this.handleTagEvent(type, tags.length, payload);
            } }));
        return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-search " + classPrefix + "-search--tags", className, {
                "is-active": active,
            }), ref: function (div) { return (_this["search-wrap"] = div); }, style: active ? style : tslib_1.__assign(tslib_1.__assign({}, style), { width: minWidth }) },
            react_1.default.createElement("div", { className: classPrefix + "-search__inner", onClick: this.open, ref: function (div) { return (_this["search-box"] = div); }, style: { cursor: "text" } },
                react_1.default.createElement("div", { className: classPrefix + "-tag-group" },
                    react_1.default.createElement(TagSearchBoxContext_1.TagSearchBoxContext.Provider, { value: { attributesSelectTips: attributesSelectTips } }, tagList)),
                react_1.default.createElement("div", { className: classPrefix + "-text-weak " + classPrefix + "-search__tips", style: { position: "relative" } }, tips),
                !!active && tags.length > 0 && (react_1.default.createElement(bubble_1.Bubble, { content: t.cleanText },
                    react_1.default.createElement(button_1.Button, { htmlType: "button", type: "icon", icon: "dismiss", className: classnames_1.default((_a = {},
                            _a[classPrefix + "-btn--dismiss"] = !hideHelp,
                            _a[classPrefix + "-btn--info"] = !!hideHelp,
                            _a)), onClick: this.handleClear }))),
                !!active && !hideHelp && (react_1.default.createElement(bubble_1.Bubble, { content: t.helpText },
                    react_1.default.createElement(button_1.Button, { htmlType: "button", type: "icon", icon: "info", className: classPrefix + "-btn--info", onClick: this.handleHelp }))),
                react_1.default.createElement(bubble_1.Bubble, { content: active ? t.searchText : null },
                    react_1.default.createElement(button_1.Button, { htmlType: "button", type: "icon", icon: "search", className: classPrefix + "-btn--search", onClick: this.handleSearch }))),
            react_1.default.createElement(modal_1.Modal, { visible: dialogActive, size: "auto", caption: t.helpText, onClose: function () { return _this.setState({ dialogActive: false }); }, className: "ignore-outside-click" },
                react_1.default.createElement(modal_1.Modal.Body, null,
                    react_1.default.createElement("i", { style: {
                            width: 910,
                            height: 476,
                            backgroundImage: "url(" + t.tagSearchBoxHelpImgUrl + ")",
                            backgroundSize: "contain",
                            backgroundRepeat: "no-repeat",
                            backgroundPosition: "center",
                            display: "inline-block",
                        } })))));
    };
    TagSearchBox = tslib_1.__decorate([
        util_1.withConfig,
        i18n_1.withTranslation,
        with_outside_click_1.withOutsideClick("close")
    ], TagSearchBox);
    return TagSearchBox;
}(react_1.default.Component));
exports.TagSearchBox = TagSearchBox;
//# sourceMappingURL=TagSearchBox.js.map