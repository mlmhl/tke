"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable */
var react_1 = tslib_1.__importDefault(require("react"));
var i18n_1 = require("../../i18n");
var list_1 = require("../../list");
var dropdown_1 = require("../../dropdown");
var button_1 = require("../../button");
var config_context_1 = require("../../_util/config-context");
var keys = {
    "8": "backspace",
    "9": "tab",
    "13": "enter",
    "37": "left",
    "38": "up",
    "39": "right",
    "40": "down",
};
var MultipleValueSelect = /** @class */ (function (_super) {
    tslib_1.__extends(MultipleValueSelect, _super);
    function MultipleValueSelect(props) {
        var _this = _super.call(this, props) || this;
        // 父组件调用
        _this.handleKeyDown = function (keyCode) {
            if (!keys[keyCode])
                return;
            var _a = _this.props, onSelect = _a.onSelect, onChange = _a.onChange;
            var _b = _this.state, curIndex = _b.curIndex, select = _b.select;
            switch (keys[keyCode]) {
                case "tab":
                    if (curIndex < 0)
                        return false;
                    if (curIndex === 0) {
                        _this.handleSelectAll();
                        return false;
                    }
                    var pos = select.indexOf(curIndex - 1);
                    if (pos >= 0) {
                        select.splice(pos, 1);
                    }
                    else {
                        select.push(curIndex - 1);
                    }
                    if (onChange) {
                        onChange(_this.getValue(select));
                    }
                    return false;
                case "enter":
                    if (onSelect) {
                        onSelect(_this.getValue(select));
                    }
                    return false;
                case "up":
                    _this.move(-1);
                    break;
                case "down":
                    _this.move(1);
                    break;
            }
        };
        _this.move = function (step) {
            var curIndex = _this.state.curIndex;
            var values = _this.props.values;
            if (values.length <= 0)
                return;
            _this.setState({
                curIndex: (curIndex + step + (values.length + 1)) % (values.length + 1),
            });
        };
        _this.handleClick = function (e, index) {
            e.stopPropagation();
            if (e.target["tagName"] === "LABEL" || e.target["tagName"] === "SPAN") {
                return;
            }
            var select = tslib_1.__spread(_this.state.select);
            var onChange = _this.props.onChange;
            var pos = select.indexOf(index);
            if (pos >= 0) {
                select.splice(pos, 1);
            }
            else {
                select.push(index);
            }
            if (onChange) {
                onChange(_this.getValue(select));
            }
        };
        _this.handleSelectAll = function (e) {
            e && e.stopPropagation();
            var select = _this.state.select;
            var _a = _this.props, values = _a.values, onChange = _a.onChange;
            if (select.length === values.length) {
                onChange && onChange([]);
                return;
            }
            onChange && onChange(values);
        };
        _this.handleSubmit = function (e) {
            e.stopPropagation();
            var onSelect = _this.props.onSelect;
            var select = _this.state.select;
            if (onSelect) {
                onSelect(_this.getValue(select));
            }
        };
        _this.handleCancel = function (e) {
            e.stopPropagation();
            var onCancel = _this.props.onCancel;
            if (onCancel) {
                onCancel();
            }
        };
        var list = _this.props.inputValue.split("|").map(function (i) { return i.trim(); });
        var select = [];
        var values = _this.props.values.map(function (item) {
            return Object.assign({}, item, { name: item.name.trim() });
        });
        values.forEach(function (item, index) {
            if (list.indexOf(item.name) >= 0) {
                select.push(index);
            }
        });
        _this.state = {
            curIndex: 0,
            select: select,
        };
        return _this;
    }
    MultipleValueSelect.prototype.componentDidMount = function () {
        var select = this.state.select;
        if (select.length <= 0 && this.props.onSelect) {
            this.props.onSelect(this.getValue(select));
        }
    };
    MultipleValueSelect.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.props.inputValue !== nextProps.inputValue) {
            var list_2 = nextProps.inputValue.split("|").map(function (i) { return i.trim(); });
            var select_1 = [];
            var values = nextProps.values.map(function (item) {
                return Object.assign({}, item, { name: item.name.trim() });
            });
            values.forEach(function (item, index) {
                if (list_2.indexOf(item.name) >= 0) {
                    select_1.push(index);
                }
            });
            this.setState({ select: select_1 });
        }
    };
    MultipleValueSelect.prototype.getValue = function (select) {
        var values = this.props.values;
        return select.map(function (i) { return values[i]; });
    };
    MultipleValueSelect.prototype.render = function () {
        var _this = this;
        var _a = this.state, select = _a.select, curIndex = _a.curIndex;
        var _b = this.props, t = _b.t, classPrefix = _b.config.classPrefix, values = _b.values, offset = _b.offset, _c = _b.all, all = _c === void 0 ? true : _c, maxHeight = _b.maxHeight;
        var list = values.map(function (item, index) { return (react_1.default.createElement(list_1.List.Item, { key: index, current: curIndex === index + 1, onClick: function (e) { return _this.handleClick(e, index); } },
            react_1.default.createElement("label", { className: classPrefix + "-form-check", style: item.style || {}, title: item.name },
                react_1.default.createElement("input", { type: "checkbox", readOnly: true, checked: select.indexOf(index) >= 0, className: classPrefix + "-checkbox" }),
                react_1.default.createElement("span", { className: classPrefix + "-form-check__label" }, item.name)))); });
        if (list.length === 0)
            return null;
        return (react_1.default.createElement(dropdown_1.DropdownBox, { style: { left: offset }, onClick: function (e) { return e.stopPropagation(); } },
            react_1.default.createElement(list_1.List, { type: "option", style: { maxHeight: maxHeight - 50 } },
                !!all && (react_1.default.createElement(list_1.List.Item, { onClick: this.handleSelectAll, current: curIndex === 0 },
                    react_1.default.createElement("label", { className: classPrefix + "-form-check" },
                        react_1.default.createElement("input", { type: "checkbox", readOnly: true, className: classPrefix + "-checkbox", checked: select.length === values.length }),
                        react_1.default.createElement("span", { className: classPrefix + "-form-check__label" }, t.selectAllText)))),
                list),
            react_1.default.createElement(dropdown_1.Dropdown.Footer, null,
                react_1.default.createElement(button_1.Button, { type: "primary", onClick: this.handleSubmit, disabled: select.length === 0 }, t.okText),
                react_1.default.createElement(button_1.Button, { type: "weak", onClick: this.handleCancel }, t.cancelText))));
    };
    MultipleValueSelect = tslib_1.__decorate([
        config_context_1.withConfig,
        i18n_1.withTranslation
    ], MultipleValueSelect);
    return MultipleValueSelect;
}(react_1.default.Component));
exports.MultipleValueSelect = MultipleValueSelect;
//# sourceMappingURL=MultipleValueSelect.js.map