"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var TreeContext_1 = require("./TreeContext");
var check_1 = require("../check");
var icon_1 = require("../icon");
var with_statics_1 = require("../_util/with-statics");
var inject_value_1 = require("../_util/inject-value");
var config_context_1 = require("../_util/config-context");
exports.TreeNode = with_statics_1.withStatics(function TreeNode(props) {
    return (react_1.default.createElement(TreeContext_1.TreeContext.Consumer, null, function (context) {
        return react_1.default.createElement(TreeNodeInner, tslib_1.__assign({}, context, props));
    }));
}, {
    ActionLink: ActionLink,
});
function TreeNodeInner(_a) {
    var _b;
    var id = _a.id, content = _a.content, icon = _a.icon, operation = _a.operation, selectable = _a.selectable, activable = _a.activable, activeIds = _a.activeIds, onActive = _a.onActive, expandable = _a.expandable, children = _a.children, expandedIds = _a.expandedIds, onExpand = _a.onExpand, onLoad = _a.onLoad, onLoadError = _a.onLoadError, switcherIcon = _a.switcherIcon, pure = _a.pure, className = _a.className, style = _a.style;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var expanded = expandedIds.includes(id);
    var nodeIcon = inject_value_1.injectValue(icon)({ expanded: expanded });
    // activable 与 selectable 同时开启时 Checkbox 与内容结构分离
    var nodeContent = activable && selectable ? (react_1.default.createElement("div", { className: classPrefix + "-tree__label" },
        react_1.default.createElement(check_1.Check, { name: id, type: "checkbox" }),
        react_1.default.createElement("span", { className: classPrefix + "-tree__label-title", onClick: function () { return onActive(id); } },
            nodeIcon,
            content,
            operation && (react_1.default.createElement("div", { className: classPrefix + "-tree__action" }, operation))))) : (react_1.default.createElement("div", { className: classPrefix + "-tree__label" },
        selectable ? (react_1.default.createElement(check_1.Check, { name: id, type: "checkbox" },
            nodeIcon,
            content)) : (react_1.default.createElement(react_1.default.Fragment, null,
            nodeIcon,
            react_1.default.createElement("span", { className: classPrefix + "-tree__label-title" }, content))),
        operation && (react_1.default.createElement("div", { className: classPrefix + "-tree__action" }, operation))));
    return (react_1.default.createElement("li", { className: classnames_1.default(classPrefix + "-tree__node", className, (_b = {
                // 高亮
                "is-selected": activable && activeIds.includes(id)
            },
            _b[classPrefix + "-tree__node--transparent"] = pure,
            _b)), style: style },
        react_1.default.createElement("div", { className: classPrefix + "-tree__node-content", style: activable ? { cursor: "pointer" } : undefined, onClick: function () { return !selectable && activable && onActive(id); } },
            react_1.default.createElement(TreeNodeSwitcher, { id: id, icon: switcherIcon, enable: Boolean(expandable || children), expanded: expanded, onExpand: onExpand, onLoad: onLoad, onLoadError: onLoadError, classPrefix: classPrefix }),
            nodeContent),
        expanded && (react_1.default.createElement("ul", { className: classPrefix + "-tree__subtree" }, children))));
}
exports.TreeNodeInner = TreeNodeInner;
function TreeNodeSwitcher(_a) {
    var id = _a.id, enable = _a.enable, expanded = _a.expanded, onExpand = _a.onExpand, onLoad = _a.onLoad, _b = _a.onLoadError, onLoadError = _b === void 0 ? function () { return null; } : _b, _c = _a.icon, icon = _c === void 0 ? function (_a) {
        var expanded = _a.expanded;
        return (react_1.default.createElement(icon_1.Icon, { type: expanded ? "arrowdown" : "arrowright" }));
    } : _c, classPrefix = _a.classPrefix;
    var _d = tslib_1.__read(react_1.useState(false), 2), loading = _d[0], setLoading = _d[1];
    var _e = tslib_1.__read(react_1.useState(false), 2), error = _e[0], setError = _e[1];
    var switcherIcon = inject_value_1.injectValue(icon)({ expanded: expanded, nodeId: id });
    function handleExpand(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        event.stopPropagation();
                        if (expanded) {
                            onExpand(id, false);
                            return [2 /*return*/];
                        }
                        if (!onLoad) return [3 /*break*/, 6];
                        setError(false);
                        setLoading(true);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, onLoad(id)];
                    case 2:
                        _a.sent();
                        onExpand(id, true);
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _a.sent();
                        setError(true);
                        onLoadError(id, err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        setLoading(false);
                        return [7 /*endfinally*/];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        onExpand(id, true);
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    var switcher = react_1.default.isValidElement(switcherIcon) ? (react_1.default.cloneElement(switcherIcon, {
        onClick: handleExpand,
    })) : (react_1.default.createElement("div", { onClick: handleExpand }, switcherIcon));
    if (loading) {
        switcher = react_1.default.createElement(icon_1.Icon, { type: "loading" });
    }
    if (error) {
        switcher = react_1.default.createElement(icon_1.Icon, { type: "error", onClick: handleExpand });
    }
    return (react_1.default.createElement("a", { className: classPrefix + "-tree__switcher" }, enable && switcher));
}
function ActionLink(_a) {
    var children = _a.children, className = _a.className, props = tslib_1.__rest(_a, ["children", "className"]);
    var classPrefix = config_context_1.useConfig().classPrefix;
    return (react_1.default.createElement("a", tslib_1.__assign({ className: classnames_1.default(classPrefix + "-text--link", className) }, props), children));
}
//# sourceMappingURL=TreeNode.js.map