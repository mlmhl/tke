"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var config_context_1 = require("../../_util/config-context");
var with_statics_1 = require("../../_util/with-statics");
var jumper_1 = require("../../jumper");
var CellStatus;
(function (CellStatus) {
    CellStatus[CellStatus["Common"] = 0] = "Common";
    CellStatus[CellStatus["Selected"] = 1] = "Selected";
    CellStatus[CellStatus["InRange"] = 2] = "InRange";
    CellStatus[CellStatus["InRangeHover"] = 3] = "InRangeHover";
    CellStatus[CellStatus["RangeStart"] = 4] = "RangeStart";
    CellStatus[CellStatus["RangeEnd"] = 5] = "RangeEnd";
})(CellStatus = exports.CellStatus || (exports.CellStatus = {}));
var Table = with_statics_1.withStatics(function Table(_a) {
    var _b;
    var caption = _a.caption, children = _a.children, _c = _a.jumperOptions, jumperOptions = _c === void 0 ? {} : _c, type = _a.type;
    var classPrefix = config_context_1.useConfig().classPrefix;
    return (react_1.default.createElement("div", { className: classPrefix + "-calendar__table" },
        react_1.default.createElement("div", { className: classPrefix + "-calendar__caption" }, caption),
        react_1.default.createElement(jumper_1.Jumper, tslib_1.__assign({}, jumperOptions, { noBordered: true, showCurrent: true })),
        react_1.default.createElement("div", { className: classPrefix + "-calendar__row-group" },
            react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-calendar__type-wrap", (_b = {},
                    _b[classPrefix + "-calendar__type--month"] = type === "month",
                    _b[classPrefix + "-calendar__type--year"] = type === "year",
                    _b)) }, children))));
}, {
    Row: TableRow,
    Cell: Cell,
});
exports.default = Table;
function TableRow(_a) {
    var children = _a.children;
    var classPrefix = config_context_1.useConfig().classPrefix;
    return react_1.default.createElement("div", { className: classPrefix + "-calendar__row" }, children);
}
exports.TableRow = TableRow;
var noop = function () { };
function Cell(_a) {
    var _b;
    var name = _a.name, value = _a.value, _c = _a.onSelect, onSelect = _c === void 0 ? noop : _c, _d = _a.onOutsideSelect, onOutsideSelect = _d === void 0 ? noop : _d, _e = _a.onHoveredChange, onHoveredChange = _e === void 0 ? noop : _e, _f = _a.isNow, isNow = _f === void 0 ? false : _f, _g = _a.outside, outside = _g === void 0 ? false : _g, _h = _a.disabled, disabled = _h === void 0 ? false : _h, _j = _a.status, status = _j === void 0 ? CellStatus.Common : _j;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _k = tslib_1.__read(react_1.useState(false), 2), hovered = _k[0], setHovered = _k[1];
    return (react_1.default.createElement("div", { role: "button", className: classnames_1.default((_b = {},
            _b[classPrefix + "-calendar__cell"] = true,
            _b[classPrefix + "-calendar__cell--now"] = isNow,
            _b[classPrefix + "-calendar__day--outside"] = outside,
            _b[classPrefix + "-calendar__day--in-range"] = !outside && status === CellStatus.InRange,
            _b[classPrefix + "-calendar__day--start is-selected"] = !outside && status === CellStatus.RangeStart,
            _b[classPrefix + "-calendar__day--end is-selected"] = !outside && status === CellStatus.RangeEnd,
            _b["is-hover-current"] = hovered,
            _b["is-hover"] = !outside && status === CellStatus.InRangeHover,
            _b["is-disabled"] = disabled,
            _b["is-selected"] = !outside && status === CellStatus.Selected,
            _b)), onClick: function (event) {
            if (!disabled) {
                onSelect(value, { event: event });
                if (outside) {
                    onOutsideSelect(value);
                }
            }
        }, onMouseEnter: function () {
            if (!disabled) {
                setHovered(true);
                onHoveredChange(value);
            }
        }, onMouseLeave: function () {
            setHovered(false);
            onHoveredChange(null);
        } },
        react_1.default.createElement("span", null, name)));
}
exports.Cell = Cell;
//# sourceMappingURL=BaseTable.js.map