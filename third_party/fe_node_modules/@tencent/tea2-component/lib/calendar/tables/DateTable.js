"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var moment_1 = tslib_1.__importStar(require("moment"));
var BaseTable_1 = tslib_1.__importStar(require("./BaseTable"));
var i18n_1 = require("../../i18n");
var config_context_1 = require("../../_util/config-context");
var noop = function () { };
function DateTable(_a) {
    var current = _a.current, _b = _a.onCurrentChange, onCurrentChange = _b === void 0 ? noop : _b, _c = _a.onHoveredChange, onHoveredChange = _c === void 0 ? noop : _c, range = _a.range, disabledDate = _a.disabledDate, _d = _a.onSelect, onSelect = _d === void 0 ? noop : _d, _e = _a.onTypeChange, onTypeChange = _e === void 0 ? noop : _e, _f = _a.cellStatus, cellStatus = _f === void 0 ? function () { return BaseTable_1.CellStatus.Common; } : _f, dateRangeInRangePicker = _a.dateRangeInRangePicker;
    var t = i18n_1.useTranslation();
    var classPrefix = config_context_1.useConfig().classPrefix;
    var year = current.year();
    var month = current.month();
    function genTable() {
        var table = [];
        // 本月第一天
        var first = moment_1.default({
            year: year,
            month: month,
            date: 1,
        });
        var firstDay = first.day();
        // 第一周
        var firstWeek = Array(7)
            .fill(null)
            .map(function (_, i) { return first.clone().add(i - firstDay, "d"); });
        table.push(firstWeek);
        var nextWeekFirst = firstWeek[6].clone().add(1, "d");
        while (nextWeekFirst.month() === month) {
            var week = Array(7)
                .fill(null)
                .map(function (_, i) { return nextWeekFirst.clone().add(i, "d"); }); // eslint-disable-line no-loop-func
            table.push(week);
            nextWeekFirst = week[6].clone().add(1, "d");
        }
        return table;
    }
    function renderYear() {
        return (react_1.default.createElement("a", { className: "op-item", onClick: function () { return onTypeChange("year"); } }, current.format(t.yearFormat)));
    }
    function renderMonth() {
        return (react_1.default.createElement("a", { className: "op-item", onClick: function () { return onTypeChange("month"); } }, moment_1.default.monthsShort(month)));
    }
    var _g = tslib_1.__read(range || [null, null], 2), rangeMin = _g[0], rangeMax = _g[1];
    function isValidDate(date) {
        // 非 RangePicker
        if (typeof dateRangeInRangePicker === "undefined") {
            if (moment_1.isMoment(rangeMin) && rangeMin.isAfter(date, "day")) {
                return false;
            }
            if (moment_1.isMoment(rangeMax) && rangeMax.isBefore(date, "day")) {
                return false;
            }
        }
        else {
            // RangePicker
            var _a = tslib_1.__read(dateRangeInRangePicker, 2), aRangeMin = _a[0], aRangeMax = _a[1];
            if (moment_1.isMoment(aRangeMin) && aRangeMin.isAfter(date, "day")) {
                return false;
            }
            if (moment_1.isMoment(aRangeMax) && aRangeMax.isBefore(date, "day")) {
                return false;
            }
        }
        return disabledDate(date);
    }
    return (react_1.default.createElement(BaseTable_1.default, { caption: t.monthBeforeYear ? (react_1.default.createElement(react_1.default.Fragment, null,
            renderMonth(),
            renderYear())) : (react_1.default.createElement(react_1.default.Fragment, null,
            renderYear(),
            renderMonth())), jumperOptions: {
            onNext: function () {
                return onCurrentChange(moment_1.default(current).add(1, "month"), { from: "jumper" });
            },
            onPrev: function () {
                return onCurrentChange(moment_1.default(current).subtract(1, "month"), {
                    from: "jumper",
                });
            },
            onCurrent: function () { return onCurrentChange(moment_1.default(), { from: "jumper" }); },
            isCurrent: current.isSame(moment_1.default(), "month"),
            nextDisabled: moment_1.isMoment(rangeMax) &&
                rangeMax.isBefore(moment_1.default({ year: year, month: month, date: 1 }).add(1, "month"), "day"),
            prevDisabled: moment_1.isMoment(rangeMin) &&
                rangeMin.isAfter(moment_1.default({ year: year, month: month, date: 1 }).subtract(1, "day"), "day"),
            nextTitle: t.nextMonth,
            prevTitle: t.prevMonth,
            curTitle: t.curMonth,
        } },
        react_1.default.createElement("div", { className: classPrefix + "-calendar__header-group" },
            react_1.default.createElement("div", { className: classPrefix + "-calendar__row" }, moment_1.default.weekdaysMin().map(function (name) { return (react_1.default.createElement(BaseTable_1.default.Cell, { key: name, name: name })); }))),
        genTable().map(function (week, i) { return (react_1.default.createElement(BaseTable_1.default.Row, { key: month + "-" + i }, week.map(function (date, j) { return (react_1.default.createElement(BaseTable_1.default.Cell, { key: month + "-" + i + "-" + j, name: date.date(), value: date, onSelect: onSelect, status: cellStatus(date), isNow: date.isSame(moment_1.default(), "day"), outside: date.month() !== month, disabled: !isValidDate(date), onOutsideSelect: function (date) {
                return onCurrentChange(moment_1.default({ year: date.year(), month: date.month() }), { from: "outside-date" });
            }, onHoveredChange: onHoveredChange })); }))); })));
}
exports.DateTable = DateTable;
//# sourceMappingURL=DateTable.js.map