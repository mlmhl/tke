"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var use_ref_and_forward_1 = require("../_util/use-ref-and-forward");
var controlled_1 = require("../form/controlled");
var tooltip_1 = require("../tooltip");
var call_both_1 = require("../_util/call-both");
var config_context_1 = require("../_util/config-context");
/**
 * Check 组件支持使用 CheckContext 进行状态托管
 */
exports.CheckContext = react_1.default.createContext(null);
exports.Check = react_1.forwardRef(function (_props, ref) {
    var _a;
    var classPrefix = config_context_1.useConfig().classPrefix;
    // 支持从 Context 注入
    var context = react_1.useContext(exports.CheckContext);
    var props = _props;
    if (context) {
        props = context.inject(_props);
    }
    var _b = controlled_1.useDefaultValue(props, false), value = _b.value, onChange = _b.onChange, type = _b.type, indeterminate = _b.indeterminate, children = _b.children, className = _b.className, _c = _b.disabled, disabled = _c === void 0 ? false : _c, onClick = _b.onClick, display = _b.display, style = _b.style, inputRef = _b.inputRef, tooltip = _b.tooltip, tabIndex = _b.tabIndex, htmlProps = tslib_1.__rest(_b, ["value", "onChange", "type", "indeterminate", "children", "className", "disabled", "onClick", "display", "style", "inputRef", "tooltip", "tabIndex"]);
    // handle indeterminate
    var _d = tslib_1.__read(use_ref_and_forward_1.useRefAndForward(null, inputRef), 2), checkInputRef = _d[0], forwardInputRef = _d[1];
    react_1.useLayoutEffect(function () {
        if (type === "checkbox" && checkInputRef.current) {
            checkInputRef.current.indeterminate = indeterminate;
        }
    });
    var labelClassName = classnames_1.default(classPrefix + "-form-check", (_a = {},
        _a[classPrefix + "-form-check--block"] = display === "block",
        _a), className);
    var input = (react_1.default.createElement("input", { readOnly: true, ref: forwardInputRef, type: type, className: classPrefix + "-" + type, checked: value, disabled: disabled, tabIndex: tabIndex, onClick: call_both_1.callBoth(onClick, function (event) {
            return onChange(event.currentTarget.checked, {
                event: event,
                check: tslib_1.__assign(tslib_1.__assign({}, props), { value: event.currentTarget.checked }),
            });
        }) }));
    var check = (react_1.default.createElement("label", tslib_1.__assign({ ref: ref, className: labelClassName, style: style }, htmlProps, { onClick: function (event) { return event.stopPropagation(); } }),
        type === "radio" ? (react_1.default.createElement("span", { className: classPrefix + "-radio-wrap" },
            input,
            react_1.default.createElement("i", { className: classPrefix + "-radio__dot" }))) : (input),
        react_1.default.createElement("span", { key: "label", className: classPrefix + "-form-check__label" }, children)));
    if (tooltip) {
        check = react_1.default.createElement(tooltip_1.Tooltip, { title: tooltip }, check);
    }
    return check;
});
exports.Check.displayName = "Check";
//# sourceMappingURL=Check.js.map