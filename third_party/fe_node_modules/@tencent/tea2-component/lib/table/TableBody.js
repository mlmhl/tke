"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var text_1 = require("../text");
var TableBox_1 = require("./TableBox");
var get_row_key_from_record_key_1 = require("./util/get-row-key-from-record-key");
var use_middleware_1 = require("./util/use-middleware");
var transition_1 = require("../transition");
var config_context_1 = require("../_util/config-context");
var TableVirtualizedBody_1 = require("./TableVirtualizedBody");
var use_resize_observer_1 = require("../_util/use-resize-observer");
var domref_1 = require("../domref");
var noop_1 = require("../_util/noop");
var TableContext_1 = require("./TableContext");
function CellResizeObserver(_a) {
    var children = _a.children, onResize = _a.onResize;
    var ref = react_1.useRef(null);
    var width = use_resize_observer_1.useResizeObserver(ref).width;
    react_1.useLayoutEffect(function () {
        if (width) {
            onResize(width);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [width]);
    return react_1.default.createElement(domref_1.DomRef, { ref: ref }, children);
}
// 计算固定列偏移
function getFixedOffset(columns, index, columnsWidths, fixed) {
    var offset = 0;
    if (fixed === "left") {
        for (var i = 0; i < index; ++i) {
            if (columns[i].fixed === "left" && columnsWidths[i]) {
                offset += columnsWidths[i];
            }
        }
    }
    else {
        for (var i = columns.length - 1; i > index; --i) {
            if (columns[i].fixed === "right" && columnsWidths[i]) {
                offset += columnsWidths[i];
            }
        }
    }
    return offset;
}
exports.getFixedOffset = getFixedOffset;
// 获取固定列最后一列以显示阴影
function getFixedEndColumn(columns) {
    var left = 0;
    var right = columns.length - 1;
    for (var i = 0; i < right; ++i) {
        if (columns[i].fixed === "left") {
            left = i;
        }
    }
    for (var i = right; i >= 0; --i) {
        if (columns[i].fixed === "right") {
            right = i;
        }
    }
    return { left: left, right: right };
}
exports.getFixedEndColumn = getFixedEndColumn;
// 表格组件核心实现
exports.TableBody = react_1.forwardRef(function TableBody(_a, ref) {
    var columns = _a.columns, records = _a.records, addons = _a.addons, recordKey = _a.recordKey, rowClassName = _a.rowClassName, rowDisabled = _a.rowDisabled, topTip = _a.topTip, bottomTip = _a.bottomTip, tableBoxStyle = _a.tableBoxStyle, disableHoverHighlight = _a.disableHoverHighlight, disableTextOverflow = _a.disableTextOverflow, _b = _a.onScrollCapture, onScrollCapture = _b === void 0 ? noop_1.noop : _b, virtualizedOptions = _a.virtualizedOptions, onResize = _a.onResize;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _c = react_1.useContext(TableContext_1.TableContext), scrollStatus = _c.scrollStatus, columnsWidths = _c.columnsWidths;
    var hasFixedColumn = columns.find(function (column) { return !!column.fixed; });
    // 键值的获取方式
    var getRowKey = get_row_key_from_record_key_1.getRowKeyFromRecordKey(recordKey);
    // 列渲染：(record, column) => { props, children }
    var renderColumn = use_middleware_1.useMiddleware(addons, "onInjectColumn")(function (record, rowKey, recordIndex, column, columnIndex) {
        var children = null;
        if (isFunction(column.render)) {
            children = column.render(record, rowKey, recordIndex, column, columnIndex);
        }
        else if (typeof record === "object" && record) {
            children = record[column.key];
        }
        if (typeof children === "undefined") {
            // never render undefined
            children = null;
        }
        if (typeof children !== "object") {
            children = (react_1.default.createElement(text_1.Text, { overflow: !disableTextOverflow, title: disableTextOverflow ? undefined : String(children) }, children));
        }
        return {
            props: {},
            children: children,
        };
    });
    // 行渲染：(columns, record) => { prepends, row, appends }
    var renderRow = use_middleware_1.useMiddleware(addons, "onInjectRow")(function (record, rowKey, recordIndex, columns) {
        var className = classnames_1.default(isFunction(rowClassName) ? rowClassName(record) : null, isFunction(rowDisabled) ? { "is-disabled": rowDisabled(record) } : null, { "no-hover": !!disableHoverHighlight });
        return {
            prepends: [],
            row: (react_1.default.createElement("tr", { key: rowKey, className: className || null }, columns.map(function (column, index) {
                var _a, _b;
                var _c = renderColumn(record, rowKey, recordIndex, column, index), props = _c.props, children = _c.children;
                if (props.colSpan === 0 || props.rowSpan === 0) {
                    return null;
                }
                // 开启虚拟滚动
                if (virtualizedOptions) {
                    props.style = tslib_1.__assign(tslib_1.__assign({}, (props.style || {})), { display: "inline-block", overflow: "hidden", boxSizing: "border-box", flex: column.width ? undefined : 1, flexBasis: column.width || 1 });
                }
                // 固定列
                if ((column.fixed === "left" || column.fixed === "right") &&
                    column.fixed !== scrollStatus &&
                    scrollStatus !== "no-scroll") {
                    var end = getFixedEndColumn(columns);
                    props.className = classnames_1.default(props.className, classPrefix + "-table__td--fixed", (_a = {},
                        _a[classPrefix + "-table__td--fixed-" + column.fixed] = end[column.fixed] === index,
                        _a));
                    props.style = tslib_1.__assign(tslib_1.__assign({}, (props.style || {})), (_b = { position: "sticky" }, _b[column.fixed] = getFixedOffset(columns, index, columnsWidths, column.fixed), _b));
                }
                var cell = (react_1.default.createElement(text_1.Text, tslib_1.__assign({ key: column.key, parent: "td" }, props, { align: column.align }),
                    react_1.default.createElement("div", null, children)));
                // 需要获取列宽
                if (recordIndex === 0 && hasFixedColumn) {
                    return (react_1.default.createElement(CellResizeObserver, { key: column.key, onResize: function (width) {
                            onResize(function (widths) {
                                var columnsWidths = tslib_1.__spread(widths);
                                columnsWidths[index] = width;
                                return columnsWidths;
                            });
                        } }, cell));
                }
                return cell;
            }))),
            appends: [],
        };
    });
    // 记录渲染：(record) => <tr>[]
    var renderRecord = function (record, recordIndex) {
        // 生成 rowKey
        var rowKey = getRowKey(record, recordIndex);
        var _a = renderRow(record, rowKey, recordIndex, columns), prepends = _a.prepends, row = _a.row, appends = _a.appends;
        return tslib_1.__spread(prepends, [row], appends).filter(Boolean);
    };
    var renderBody = use_middleware_1.useMiddleware(addons, "onInjectBody")(function (records, columns, topTip, bottomTip) {
        // 开启虚拟滚动
        return virtualizedOptions ? (react_1.default.createElement(TableVirtualizedBody_1.TableVirtualizedBody, { ref: ref, height: virtualizedOptions.height, itemHeight: virtualizedOptions.itemHeight, tableBoxStyle: tableBoxStyle, onScrollCapture: onScrollCapture },
            topTip && (react_1.default.createElement("tr", { className: classPrefix + "-table__tr--blank-new" },
                react_1.default.createElement("td", { colSpan: columns.length }, topTip))),
            (records || []).map(function (record, index) { return (react_1.default.createElement(react_1.Fragment, { key: getRowKey(record, index) }, renderRecord(record, index))); }),
            bottomTip && (react_1.default.createElement("tr", { className: classPrefix + "-table__tr--blank-new" },
                react_1.default.createElement("td", { colSpan: columns.length }, bottomTip))))) : (react_1.default.createElement("div", { className: classPrefix + "-table__body", ref: ref, onScrollCapture: onScrollCapture },
            react_1.default.createElement(TableBox_1.TableBox, { columns: columns, style: tableBoxStyle, classPrefix: classPrefix },
                react_1.default.createElement("tbody", null,
                    react_1.default.createElement(transition_1.SlideTransition, { in: Boolean(topTip), exit: false },
                        react_1.default.createElement("tr", { className: classPrefix + "-table__tr--blank-new" },
                            react_1.default.createElement("td", { colSpan: columns.length }, topTip))),
                    (records || []).map(function (record, index) { return (react_1.default.createElement(react_1.Fragment, { key: getRowKey(record, index) }, renderRecord(record, index))); }),
                    react_1.default.createElement(transition_1.SlideTransition, { in: Boolean(bottomTip), exit: false },
                        react_1.default.createElement("tr", { className: classPrefix + "-table__tr--blank-new" },
                            react_1.default.createElement("td", { colSpan: columns.length }, bottomTip)))))));
    });
    return renderBody(records, columns, topTip, bottomTip);
});
function isFunction(target) {
    return typeof target === "function";
}
//# sourceMappingURL=TableBody.js.map