"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var TableHead_1 = require("./TableHead");
var TableBody_1 = require("./TableBody");
var use_middleware_1 = require("./util/use-middleware");
var create_rocket_1 = require("../_util/create-rocket");
var addons = tslib_1.__importStar(require("./addons"));
var with_statics_1 = require("../_util/with-statics");
var config_context_1 = require("../_util/config-context");
var TableContext_1 = require("./TableContext");
exports.Table = with_statics_1.withStatics(function Table(props) {
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _a = tslib_1.__read(react_1.useState("left"), 2), scrollStatus = _a[0], setScrollStatus = _a[1];
    var _b = tslib_1.__read(react_1.useState([]), 2), columnsWidths = _b[0], setColumnsWidths = _b[1];
    var _c = props.addons, addons = _c === void 0 ? [] : _c, bordered = props.bordered, compact = props.compact, verticalTop = props.verticalTop;
    var headRef = react_1.useRef(null);
    var bodyRef = react_1.useRef(null);
    // 执行 addon props middleware
    // eslint-disable-next-line no-param-reassign
    props = use_middleware_1.useMiddleware(addons, "onInjectProps")(props);
    var hasFixedColumn = react_1.useMemo(function () { return props.columns.find(function (column) { return !!column.fixed; }); }, [props.columns]);
    // 同步 body 和 header 滚动位置
    var handleScroll = react_1.useCallback(function () {
        // 设置水平滚动状态（固定列样式）
        if (bodyRef.current && hasFixedColumn) {
            var _a = bodyRef.current, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth, scrollLeft = _a.scrollLeft;
            var atLeft = scrollLeft === 0;
            var atRight = scrollWidth <= Math.round(clientWidth + scrollLeft);
            if (atLeft && atRight) {
                setScrollStatus("no-scroll");
            }
            else if (atLeft) {
                setScrollStatus("left");
            }
            else if (atRight) {
                setScrollStatus("right");
            }
            else {
                setScrollStatus("scrolling");
            }
        }
        if (headRef.current && bodyRef.current) {
            headRef.current.scrollLeft = bodyRef.current.scrollLeft;
        }
    }, [hasFixedColumn]);
    react_1.useEffect(function () {
        handleScroll();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [columnsWidths]);
    var renderTable = use_middleware_1.useMiddleware(addons, "onInjectTable")(function (props) {
        var _a;
        return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-table", (_a = {},
                _a[classPrefix + "-table--compact"] = compact,
                _a[classPrefix + "-table--bordered"] = bordered,
                _a[classPrefix + "-table--allbordered"] = bordered === "all",
                _a[classPrefix + "-table--verticaltop"] = verticalTop,
                _a)) },
            react_1.default.createElement(TableContext_1.TableContext.Provider, { value: { scrollStatus: scrollStatus, columnsWidths: columnsWidths } },
                react_1.default.createElement(TableHead_1.TableHead, tslib_1.__assign({ ref: headRef }, props)),
                react_1.default.createElement(TableBody_1.TableBody, tslib_1.__assign({ ref: bodyRef, onScrollCapture: handleScroll, onResize: setColumnsWidths }, props)))));
    });
    return renderTable(props);
}, {
    addons: addons,
    ActionPanel: create_rocket_1.createRocket("ActionPanel", "div.@{prefix}-table__action-panel"),
});
//# sourceMappingURL=Table.js.map