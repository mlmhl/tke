"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
function injectable(_a) {
    var row = _a.row, body = _a.body, head = _a.head, table = _a.table;
    return {
        onInjectRow: !row
            ? undefined
            : function (render) { return function (record, rowKey, recordIndex) {
                var args = [];
                for (var _i = 3; _i < arguments.length; _i++) {
                    args[_i - 3] = arguments[_i];
                }
                var result = render.apply(void 0, tslib_1.__spread([record, rowKey, recordIndex], args));
                var props = row(result.row.props, {
                    record: record,
                    rowKey: rowKey,
                    recordIndex: recordIndex,
                });
                return tslib_1.__assign(tslib_1.__assign({}, result), { row: react_1.default.cloneElement(result.row, props) });
            }; },
        onInjectBody: !body
            ? undefined
            : function (render) { return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var element = render.apply(void 0, tslib_1.__spread(args));
                return react_1.default.cloneElement(element, body(element.props));
            }; },
        onInjectHead: !head
            ? undefined
            : function (render) { return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var element = render.apply(void 0, tslib_1.__spread(args));
                return react_1.default.cloneElement(element, head(element.props));
            }; },
        onInjectTable: !table
            ? undefined
            : function (render) { return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var element = render.apply(void 0, tslib_1.__spread(args));
                return react_1.default.cloneElement(element, table(element.props));
            }; },
    };
}
exports.injectable = injectable;
//# sourceMappingURL=injectable.js.map