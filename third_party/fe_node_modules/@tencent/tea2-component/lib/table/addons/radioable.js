"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var radio_1 = require("../../radio");
var inject_props_if_target_not_existed_1 = require("../util/inject-props-if-target-not-existed");
var fallbackColumnKey = "__radioable_addon__";
var rowDisabled = null;
function radioable(_a) {
    var value = _a.value, onChange = _a.onChange, targetColumnKey = _a.targetColumnKey, rowSelect = _a.rowSelect, _b = _a.width, width = _b === void 0 ? 26 : _b, _c = _a.render, render = _c === void 0 ? function (x) { return x; } : _c;
    return {
        onInjectProps: function (props) {
            rowDisabled = props.rowDisabled || (function () { return false; });
            var columns = inject_props_if_target_not_existed_1.injectPropsIfTargetNotExisted(props.columns, targetColumnKey, {
                key: fallbackColumnKey,
                width: width,
                header: null,
                render: function () { return null; },
            });
            return tslib_1.__assign(tslib_1.__assign({}, props), { columns: columns });
        },
        onInjectColumn: function (previous) { return function (record, rowKey, recordIndex, column, columnIndex) {
            // 不是目标列
            if (column.key !== targetColumnKey && column.key !== fallbackColumnKey) {
                return previous(record, rowKey, recordIndex, column, columnIndex);
            }
            var _a = previous(record, rowKey, recordIndex, column, columnIndex), preChildren = _a.children, props = _a.props, result = tslib_1.__rest(_a, ["children", "props"]);
            var children = preChildren;
            // 非表头
            if (recordIndex !== -1) {
                var element = (react_1.default.createElement(radio_1.Radio, { disabled: rowDisabled(record), value: value === rowKey, onChange: function (_, _a) {
                        var event = _a.event;
                        return onChange(rowKey, { event: event, record: record });
                    } }, children || react_1.default.createElement(react_1.default.Fragment, null, "\u00A0")));
                children = render(element, {
                    children: preChildren,
                    record: record,
                    rowKey: rowKey,
                    recordIndex: recordIndex,
                    disabled: rowDisabled(record),
                });
            }
            return tslib_1.__assign(tslib_1.__assign({}, result), { props: props, children: children });
        }; },
        onInjectRow: function (renderRow) { return function (record, rowKey, recordIndex, columns) {
            var _a = renderRow(record, rowKey, recordIndex, columns), prepends = _a.prepends, appends = _a.appends, preRow = _a.row;
            var row = preRow;
            // 支持整行选择
            row = (react_1.default.createElement(SelectWrapper, { key: rowKey, name: rowKey, value: value, onChange: function (value, context) { return onChange(value, tslib_1.__assign(tslib_1.__assign({}, context), { record: record })); }, rowSelect: rowSelect && !rowDisabled(record) }, row));
            return { prepends: prepends, row: row, appends: appends };
        }; },
    };
}
exports.radioable = radioable;
function SelectWrapper(_a) {
    var value = _a.value, onChange = _a.onChange, name = _a.name, rowSelect = _a.rowSelect, children = _a.children, props = tslib_1.__rest(_a, ["value", "onChange", "name", "rowSelect", "children"]);
    var rowSelectProps = {
        onClick: function (event) {
            // 事件合并
            if (typeof props.onClick === "function") {
                props.onClick(event);
            }
            if (typeof children.props.onClick === "function") {
                children.props.onClick(event);
            }
            return onChange(name, { event: event });
        },
    };
    return react_1.default.cloneElement(children, tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, props), { className: classnames_1.default(props.className, children.props.className, {
            "is-selected": value === name,
        }) }), (rowSelect ? rowSelectProps : {})));
}
//# sourceMappingURL=radioable.js.map