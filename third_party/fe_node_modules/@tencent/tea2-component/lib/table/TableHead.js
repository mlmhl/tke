"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var text_1 = require("../text");
var TableBox_1 = require("./TableBox");
var use_middleware_1 = require("./util/use-middleware");
var is_callable_1 = require("../_util/is-callable");
var config_context_1 = require("../_util/config-context");
var TableBody_1 = require("./TableBody");
var TableContext_1 = require("./TableContext");
exports.TableHead = react_1.forwardRef(function TableHead(props, ref) {
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _a = react_1.useContext(TableContext_1.TableContext), scrollStatus = _a.scrollStatus, columnsWidths = _a.columnsWidths;
    var columns = props.columns, addons = props.addons, tableBoxStyle = props.tableBoxStyle, disableTextOverflow = props.disableTextOverflow, hideHeader = props.hideHeader, virtualizedOptions = props.virtualizedOptions;
    var renderColumn = use_middleware_1.useMiddleware(addons, "onInjectColumn")(function (record, rowKey, recordIndex, column, columnIndex) {
        var key = column.key, header = column.header;
        var children = header;
        // pass a render function
        if (is_callable_1.isCallable(header)) {
            children = header(column);
        }
        // forgot to pass, use a key as a reminder
        if (header === undefined) {
            children = key;
        }
        // plain values
        if (typeof header === "string" || typeof header === "number") {
            children = (react_1.default.createElement(text_1.Text, { overflow: !disableTextOverflow, title: disableTextOverflow ? undefined : String(header) }, header));
        }
        return {
            props: {},
            children: children,
        };
    });
    var tableHeaders = columns.map(function (column, index) {
        var _a, _b;
        var _c = renderColumn(null, null, -1, column, index), props = _c.props, children = _c.children;
        if (props.colSpan === 0) {
            return null;
        }
        if (virtualizedOptions) {
            props.style = tslib_1.__assign(tslib_1.__assign({}, (props.style || {})), { display: "inline-block", overflow: "hidden", boxSizing: "border-box", flex: column.width ? undefined : 1, flexBasis: column.width || 1 });
        }
        // 固定列
        if ((column.fixed === "left" || column.fixed === "right") &&
            column.fixed !== scrollStatus &&
            scrollStatus !== "no-scroll") {
            var end = TableBody_1.getFixedEndColumn(columns);
            props.className = classnames_1.default(props.className, classPrefix + "-table__td--fixed", (_a = {},
                _a[classPrefix + "-table__td--fixed-" + column.fixed] = end[column.fixed] === index,
                _a));
            props.style = tslib_1.__assign(tslib_1.__assign({}, (props.style || {})), (_b = { position: "sticky" }, _b[column.fixed] = TableBody_1.getFixedOffset(columns, index, columnsWidths, column.fixed), _b));
        }
        return (react_1.default.createElement(text_1.Text, tslib_1.__assign({ key: column.key, parent: "th" }, props, { align: column.align }),
            react_1.default.createElement("div", null, children)));
    });
    return use_middleware_1.useMiddleware(addons, "onInjectHead")(function (props) { return (react_1.default.createElement("div", { className: classPrefix + "-table__header", ref: ref, style: hideHeader ? { display: "none" } : undefined },
        react_1.default.createElement(TableBox_1.TableBox, { columns: columns, style: tslib_1.__assign(tslib_1.__assign({}, (tableBoxStyle || {})), { display: virtualizedOptions ? "block" : undefined }), classPrefix: classPrefix },
            react_1.default.createElement("thead", { style: virtualizedOptions ? { display: "block" } : undefined },
                react_1.default.createElement("tr", { style: virtualizedOptions ? { display: "flex" } : undefined }, tableHeaders))))); })(props);
});
//# sourceMappingURL=TableHead.js.map