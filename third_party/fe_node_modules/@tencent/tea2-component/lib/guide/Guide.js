"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var button_1 = require("../button");
var overlay_1 = require("../overlay");
var mediaobject_1 = require("../mediaobject");
var bubble_1 = require("../bubble");
var util_1 = require("../util");
var inject_value_1 = require("../_util/inject-value");
var use_default_1 = require("../_util/use-default");
var i18n_1 = require("../i18n");
var borderWidth = 1;
function getOffset(element) {
    if (!element) {
        return {};
    }
    var body = document.body;
    var docEl = document.documentElement;
    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
    var x = element.getBoundingClientRect();
    return {
        top: x.top + scrollTop,
        width: x.width,
        height: x.height,
        left: x.left + scrollLeft,
    };
}
function Guide(_a) {
    var _b = _a.steps, steps = _b === void 0 ? [] : _b, _c = _a.children, children = _c === void 0 ? null : _c, _d = _a.visible, visible = _d === void 0 ? true : _d, autoScrollIntoView = _a.autoScrollIntoView, current = _a.current, onCurrentChange = _a.onCurrentChange, showBackButton = _a.showBackButton, hideCancelButton = _a.hideCancelButton, cancelText = _a.cancelText, backText = _a.backText, nextText = _a.nextText, finishText = _a.finishText;
    var t = i18n_1.useTranslation();
    var classPrefix = util_1.useConfig().classPrefix;
    var _e = tslib_1.__read(use_default_1.useDefault(current, -1, onCurrentChange), 2), currentIndex = _e[0], setCurrentIndex = _e[1];
    // 保证子级结点存在
    react_1.useEffect(function () {
        if (typeof current === "undefined") {
            setCurrentIndex(0);
        }
    }, [current, setCurrentIndex]);
    var step = steps[currentIndex];
    react_1.useEffect(function () {
        if (step) {
            var element_1 = inject_value_1.injectValue(step.element)();
            if (element_1) {
                element_1.scrollIntoView({
                    behavior: "smooth",
                    block: "center",
                    inline: "center",
                });
            }
        }
    }, [autoScrollIntoView, step]);
    if (!visible || !step) {
        return null;
    }
    var count = steps.length;
    var element = inject_value_1.injectValue(step.element)();
    var title = step.title, description = step.description, image = step.image, placement = step.placement;
    var _f = getOffset(element), height = _f.height, width = _f.width;
    return (react_1.default.createElement(overlay_1.Overlay, { layers: [
            react_1.default.createElement(overlay_1.Overlay.Layer, { key: "highlight", visible: true, placement: "top-start", placementOffset: 0, modifiers: {
                    flip: { enabled: false },
                    preventOverflow: { enabled: false },
                }, content: function (_a) {
                    var style = _a.style;
                    var left = +style.left;
                    var top = +style.top;
                    var p = "M " + (left - borderWidth) + " " + (top - borderWidth) + " H " + (left +
                        width +
                        borderWidth) + " V " + (top + height + borderWidth) + " H " + (left -
                        borderWidth) + " L " + (left - borderWidth) + " " + (top - borderWidth) + " Z";
                    return (react_1.default.createElement("svg", { style: {
                            top: 0,
                            left: 0,
                            overflow: "hidden",
                            pointerEvents: "none",
                            position: "fixed",
                            width: "100vw",
                            height: "100vh",
                            zIndex: 9999,
                            fillRule: "evenodd",
                        } },
                        react_1.default.createElement("path", { d: p + " M 0 0 H 9999 V 9999 H 0 L 0 0 Z", fill: "#000000", opacity: 0.5 }),
                        react_1.default.createElement("path", { d: "M " + left + " " + top + " H " + (left + width) + " V " + (top +
                                height) + " H " + left + " L " + left + " 0 Z " + p, fill: "#cccccc", opacity: 1 })));
                } }),
            react_1.default.createElement(overlay_1.Overlay.Layer, { key: "bubble", visible: true, placement: placement, placementOffset: 10, modifiers: {
                    flip: { enabled: false },
                    preventOverflow: { enabled: false },
                }, content: function (_a) {
                    var placement = _a.placement;
                    return (react_1.default.createElement(bubble_1.BubbleContent, { placement: placement, className: classPrefix + "-popconfirm" },
                        react_1.default.createElement("div", { className: classPrefix + "-popconfirm__body" },
                            react_1.default.createElement(mediaobject_1.MediaObject, { media: image && react_1.default.createElement("img", { src: image, alt: "" }) },
                                title && (react_1.default.createElement("h3", { className: classPrefix + "-popconfirm__messagetitle" }, title)),
                                description && (react_1.default.createElement("div", { className: classPrefix + "-popconfirm__messagetext" }, description)))),
                        react_1.default.createElement("div", { className: classPrefix + "-popconfirm__footer" },
                            !hideCancelButton && current < count - 1 && (react_1.default.createElement(button_1.Button, { type: "text", onClick: function () {
                                    setCurrentIndex(-1);
                                } }, cancelText || t.guideCancel)),
                            showBackButton && current > 0 && (react_1.default.createElement(button_1.Button, { type: "text", onClick: function () {
                                    setCurrentIndex(current - 1);
                                } }, backText || t.guideBack)),
                            current < count - 1 ? (react_1.default.createElement(button_1.Button, { type: "link", onClick: function () {
                                    setCurrentIndex(current + 1);
                                } },
                                nextText || t.guideNext,
                                " ",
                                current + 1,
                                "/",
                                count)) : (react_1.default.createElement(button_1.Button, { type: "link", onClick: function () {
                                    setCurrentIndex(current === count - 1 ? -1 : current + 1);
                                } },
                                finishText || t.guideFinish,
                                " ",
                                current + 1,
                                "/",
                                count)))));
                } }),
        ] }, function (ref) {
        ref(element);
        return children;
    }));
}
exports.Guide = Guide;
//# sourceMappingURL=Guide.js.map