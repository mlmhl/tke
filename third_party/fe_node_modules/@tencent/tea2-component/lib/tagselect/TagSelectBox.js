"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var dropdown_1 = require("../dropdown");
var VirtualizedList_1 = require("../list/VirtualizedList");
function TagSelectBox(_a) {
    var listRef = _a.listRef, items = _a.items, onChange = _a.onChange, width = _a.width, scheduleUpdate = _a.scheduleUpdate, className = _a.className, _b = _a.style, style = _b === void 0 ? {} : _b, currentIndex = _a.currentIndex, onScrollBottom = _a.onScrollBottom;
    react_1.useLayoutEffect(function () {
        scheduleUpdate();
    }, [scheduleUpdate, items]);
    var count = items.length;
    if (count === 0) {
        return null;
    }
    var hasGroup = !!items.find(function (item) { return item.type === "group"; });
    var boxStyle = tslib_1.__assign(tslib_1.__assign({}, style), { width: width });
    return (react_1.default.createElement(dropdown_1.DropdownBox, { onClick: function (e) { return e.stopPropagation(); }, className: className, style: boxStyle },
        react_1.default.createElement(VirtualizedList_1.VirtualizedList, { containerStyle: boxStyle, containerClassName: className, virtualizedRef: listRef, type: hasGroup ? "option-group" : "option", items: items.map(function (item, index) {
                if (item.type === "option") {
                    var option_1 = item.option;
                    return tslib_1.__assign(tslib_1.__assign({}, item), { props: {
                            disabled: option_1.disabled,
                            current: currentIndex % count === index,
                            onClick: function (event) {
                                onChange(option_1.value, {
                                    event: event,
                                    option: option_1,
                                });
                            },
                            tooltip: option_1.tooltip,
                        } });
                }
                return item;
            }), onScrollBottom: onScrollBottom })));
}
exports.TagSelectBox = TagSelectBox;
function getListItems(_a) {
    var tips = _a.tips, options = _a.options, groups = _a.groups;
    var items = [];
    if (tips) {
        items.push({ type: "tips", key: "__tips", text: tips });
    }
    options.forEach(function (option, index) {
        if (option.groupKey &&
            (index === 0 || option.groupKey !== options[index - 1].groupKey)) {
            items.push({
                type: "group",
                key: option.groupKey + "-" + option.value,
                text: groups[option.groupKey],
            });
        }
        items.push({
            type: "option",
            key: option.value,
            text: typeof option.text === "undefined" ? option.value : option.text,
            option: option,
        });
    });
    return items;
}
exports.getListItems = getListItems;
//# sourceMappingURL=TagSelectBox.js.map