"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var form_1 = require("../form");
var i18n_1 = require("../i18n");
var config_context_1 = require("../_util/config-context");
var popover_1 = require("../popover");
var tag_1 = require("../tag");
var use_outside_click_1 = require("../_util/use-outside-click");
var tips_1 = require("../tips");
var use_default_1 = require("../_util/use-default");
var TagSelectInput_1 = require("./TagSelectInput");
var TagSelectBox_1 = require("./TagSelectBox");
var key_code_1 = require("../_util/key-code");
var noop = function () { };
var empty = [];
function TagSelect(props) {
    var t = i18n_1.useTranslation();
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _a = form_1.useDefaultValue(props, []), _b = _a.options, options = _b === void 0 ? empty : _b, optionsOnly = _a.optionsOnly, groups = _a.groups, value = _a.value, onChange = _a.onChange, _c = _a.placeholder, placeholder = _c === void 0 ? t.pleaseSelect : _c, className = _a.className, style = _a.style, boxClassName = _a.boxClassName, _d = _a.boxStyle, boxStyle = _d === void 0 ? {} : _d, _e = _a.placement, placement = _e === void 0 ? "bottom-start" : _e, _f = _a.placementOffset, placementOffset = _f === void 0 ? 5 : _f, _g = _a.closeOnScroll, closeOnScroll = _g === void 0 ? true : _g, escapeWithReference = _a.escapeWithReference, _h = _a.onSearch, onSearch = _h === void 0 ? noop : _h, _j = _a.onFocus, onFocus = _j === void 0 ? noop : _j, _k = _a.filter, filter = _k === void 0 ? function (inputValue, _a) {
        var text = _a.text, value = _a.value;
        var optionText = String(typeof text === "string" ? text : value);
        return optionText.includes(inputValue);
    } : _k, _l = _a.defaultOpen, defaultOpen = _l === void 0 ? false : _l, open = _a.open, onOpenChange = _a.onOpenChange, _m = _a.autoClearSearchValue, autoClearSearchValue = _m === void 0 ? true : _m, overlayClassName = _a.overlayClassName, overlayStyle = _a.overlayStyle, _o = _a.onScrollBottom, onScrollBottom = _o === void 0 ? noop : _o;
    var _p = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), isOpened = _p[0], setIsOpened = _p[1];
    var _q = tslib_1.__read(react_1.useState(0), 2), currentIndex = _q[0], setCurrentIndex = _q[1];
    var _r = tslib_1.__read(react_1.useState(0), 2), wrapperWidth = _r[0], setWrapperWidth = _r[1];
    var inputRef = react_1.useRef(null);
    var _s = tslib_1.__read(react_1.useState(""), 2), inputValue = _s[0], setInputValue = _s[1];
    var listRef = react_1.useRef(null);
    var filteredOptions = options
        .filter(function (options) { return filter(inputValue, options); })
        .filter(function (option) { return !value.includes(option.value); });
    // 支持输入任意值
    if (!optionsOnly && inputValue.trim()) {
        // 是否有和搜索值相同的项
        var hasEqualOption = options.find(function (_a) {
            var text = _a.text, value = _a.value;
            var optionText = String(typeof text === "string" ? text : value);
            return optionText.trim() === inputValue.trim();
        });
        // 是否有和搜索值相同的值
        var hasEqualValue = value.find(function (v) { return v.trim() === inputValue.trim(); });
        if (!hasEqualOption && !hasEqualValue) {
            filteredOptions.unshift({ value: inputValue.trim() });
        }
    }
    // 列表收起行为
    react_1.useEffect(function () {
        if (!isOpened) {
            if (!optionsOnly) {
                var content = inputValue.trim();
                if (content && !value.includes(content)) {
                    onChange(tslib_1.__spread(value, [content]), {
                        event: null,
                        option: { value: content },
                    });
                }
            }
            setInputValue("");
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isOpened]);
    // options 变化时不影响已选择的 value 显示
    var _t = tslib_1.__read(react_1.useState(value.map(function (v) { return options.find(function (option) { return option.value === v; }) || { value: v }; })), 2), displayOptions = _t[0], setDisplayOptions = _t[1];
    var updateDisplayOptions = react_1.useCallback(function (value) {
        return setDisplayOptions(function (displayOptions) {
            return value.map(function (v) {
                return options.find(function (option) { return option.value === v; }) ||
                    displayOptions.find(function (option) { return option.value === v; }) || {
                    value: v,
                };
            });
        });
    }, [options]);
    // onChange 前更新 displayOptions 保证 onChange 中改变 options 时信息不丢失
    var handleChange = function (value, context) {
        updateDisplayOptions(value);
        onChange(value, context);
    };
    react_1.useEffect(function () { return updateDisplayOptions(value); }, [value, updateDisplayOptions]);
    var tips = props.tips;
    if (typeof tips === "undefined" && filteredOptions.length === 0) {
        tips = react_1.default.createElement(tips_1.EmptyTip, null);
    }
    var items = TagSelectBox_1.getListItems({
        tips: tips,
        options: filteredOptions,
        groups: groups,
    });
    var count = items.length;
    // 渲染数据
    return (react_1.default.createElement("div", { ref: function (ref) { return ref && setWrapperWidth(ref.clientWidth); }, className: classnames_1.default(classPrefix + "-tag-input", className, {
            "is-active": isOpened,
        }), style: style, onClick: function () { return inputRef.current.focus(); } },
        react_1.default.createElement(popover_1.Popover, { trigger: ClickTrigger, visible: isOpened, onVisibleChange: function (visible) {
                if (inputRef.current) {
                    inputRef.current.blur();
                }
                setIsOpened(visible);
            }, placement: placement, closeOnScroll: closeOnScroll, escapeWithReference: escapeWithReference, placementOffset: placementOffset, overlayClassName: overlayClassName, overlayStyle: overlayStyle, overlay: function (_a) {
                var scheduleUpdate = _a.scheduleUpdate;
                return (react_1.default.createElement(TagSelectBox_1.TagSelectBox, { listRef: listRef, items: items, currentIndex: currentIndex % count, width: wrapperWidth, onChange: function (optionValue, context) {
                        handleChange(tslib_1.__spread(value, [optionValue]), context);
                        if (autoClearSearchValue && inputValue) {
                            setInputValue("");
                            setCurrentIndex(0);
                        }
                        inputRef.current.focus();
                    }, scheduleUpdate: scheduleUpdate, className: boxClassName, style: boxStyle, tips: tips, onScrollBottom: onScrollBottom }));
            } },
            react_1.default.createElement("div", { className: classPrefix + "-tag-input__inner", style: { cursor: "text" } },
                react_1.default.createElement("div", { className: classPrefix + "-tag-group" },
                    displayOptions.map(function (option) { return (react_1.default.createElement(tag_1.Tag, { key: option.value, onClose: function (event) {
                            event.stopPropagation();
                            handleChange(value.filter(function (v) { return v !== option.value; }), {
                                event: event,
                                option: option,
                            });
                            inputRef.current.focus();
                        } }, option.text || option.value)); }),
                    react_1.default.createElement(TagSelectInput_1.TagSelectInput, { ref: inputRef, className: classPrefix + "-input--tag", placeholder: value.length === 0 ? placeholder : "", onFocus: function (e) {
                            setIsOpened(true);
                            onFocus(e);
                        }, value: inputValue, onChange: function (value) {
                            onSearch(value);
                            setInputValue(value);
                            setCurrentIndex(0);
                        }, maxWidth: Math.max(wrapperWidth - 12, 0), onKeyDown: function (event) {
                            var option = (items[currentIndex % count] || {}).option;
                            var getOptionIndex = function (current, step) {
                                if (step === void 0) { step = 1; }
                                var flag = 1;
                                var index = (current + step + count) % count;
                                var item = items[index % count];
                                while (flag < count && !item.option) {
                                    flag += 1;
                                    index = (index + step + count) % count;
                                    item = items[index % count];
                                }
                                return index;
                            };
                            switch (event.keyCode) {
                                case key_code_1.KeyCode.Backspace:
                                    if (event.currentTarget.value.length === 0 &&
                                        value.length > 0) {
                                        handleChange(value.slice(0, -1), {
                                            event: event,
                                            option: options.find(function (option) { return option.value === value[value.length - 1]; }),
                                        });
                                        setCurrentIndex(0);
                                    }
                                    break;
                                case key_code_1.KeyCode.Enter:
                                    if (isOpened && option && !option.disabled) {
                                        handleChange(tslib_1.__spread(value, [option.value]), { event: event, option: option });
                                        if (autoClearSearchValue && inputValue) {
                                            setInputValue("");
                                            setCurrentIndex(0);
                                        }
                                    }
                                    break;
                                case key_code_1.KeyCode.Up:
                                    event.preventDefault();
                                    setCurrentIndex(function (c) {
                                        var index = getOptionIndex(c, -1);
                                        if (listRef.current) {
                                            listRef.current.scrollToItem(index);
                                        }
                                        return index;
                                    });
                                    break;
                                case key_code_1.KeyCode.Down:
                                    event.preventDefault();
                                    setCurrentIndex(function (c) {
                                        var index = getOptionIndex(c);
                                        if (listRef.current) {
                                            listRef.current.scrollToItem(index);
                                        }
                                        return index;
                                    });
                                    break;
                                case key_code_1.KeyCode.Esc:
                                    setIsOpened(false);
                                    inputRef.current.blur();
                                    break;
                            }
                        } }))))));
}
exports.TagSelect = TagSelect;
function ClickTrigger(_a) {
    var overlayElementRef = _a.overlayElementRef, childrenElementRef = _a.childrenElementRef, visible = _a.visible, setVisible = _a.setVisible, _b = _a.closeDelay, closeDelay = _b === void 0 ? 0 : _b, render = _a.render;
    var listen = use_outside_click_1.useOutsideClick([childrenElementRef, overlayElementRef]).listen;
    listen(function () { return visible && setVisible(false, closeDelay); });
    return render({
        overlayProps: {},
        childrenProps: {},
    });
}
//# sourceMappingURL=TagSelect.js.map