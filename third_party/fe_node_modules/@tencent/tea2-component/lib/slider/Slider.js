"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var controlled_1 = require("../form/controlled");
var bubble_1 = require("../bubble");
var popover_1 = require("../popover");
var get_precision_1 = require("../_util/get-precision");
var config_context_1 = require("../_util/config-context");
function Slider(_a) {
    var _b = _a.min, min = _b === void 0 ? 0 : _b, max = _a.max, props = tslib_1.__rest(_a, ["min", "max"]);
    var classPrefix = config_context_1.useConfig().classPrefix;
    // eslint-disable-next-line react/destructuring-assignment
    var allowedRange = Array.isArray(props.range) ? props.range : [min, max];
    if (typeof allowedRange[0] !== "number" || allowedRange[0] < min) {
        allowedRange[0] = min;
    }
    if (typeof allowedRange[1] !== "number" || allowedRange[1] > max) {
        allowedRange[1] = max;
    }
    var _c = controlled_1.useDefaultValue(props, allowedRange[0] || 0), style = _c.style, className = _c.className, value = _c.value, onChange = _c.onChange, _d = _c.step, step = _d === void 0 ? 1 : _d, _e = _c.marks, marks = _e === void 0 ? [] : _e, after = _c.after, disabled = _c.disabled, markValueOnly = _c.markValueOnly, _f = _c.enableTrackTip, enableTrackTip = _f === void 0 ? false : _f, _g = _c.tipFormatter, tipFormatter = _g === void 0 ? function (number) { return number; } : _g, _h = _c.onUpdate, onUpdate = _h === void 0 ? function () { return null; } : _h;
    var precision = react_1.useMemo(function () { return get_precision_1.getPrecision(step); }, [step]);
    var _j = tslib_1.__read(react_1.useState(null), 2), interactiveValue = _j[0], setInteractiveValue = _j[1];
    var range = Math.abs(max - min);
    var proportionValue = interactiveValue === null ? value : interactiveValue;
    var proportion = ((proportionValue - min) / range) * 100;
    // 定位相关 hooks
    var startRef = react_1.useRef(null);
    var endRef = react_1.useRef(null);
    // 滑轨相关 hooks
    var scheduleRef = react_1.useRef(null);
    var mouseElement = react_1.useRef(null);
    var _k = tslib_1.__read(react_1.useState(null), 2), mousePosition = _k[0], setMousePosition = _k[1];
    // 滑块相关 hooks
    var positionRef = react_1.useRef(0);
    var dragOffsetRef = react_1.useRef(0);
    var innerScheduleRef = react_1.useRef(null);
    var _l = tslib_1.__read(react_1.useState(false), 2), dragging = _l[0], setDragging = _l[1];
    var _m = tslib_1.__read(react_1.useState(false), 2), hovering = _m[0], setHovering = _m[1];
    react_1.useEffect(function () { return removeDocumentEvents; }, []); // eslint-disable-line react-hooks/exhaustive-deps
    function addDocumentMouseEvents() {
        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
    }
    function removeDocumentEvents() {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
    }
    function handleMouseUp() {
        setDragging(false);
        removeDocumentEvents();
        var value = getValueByPosition(positionRef.current);
        onChange(value, { event: null });
        setInteractiveValue(null);
    }
    function handleMouseMove(event) {
        if (disabled) {
            return;
        }
        var position = event.pageX;
        var value = getValueByPosition(position - dragOffsetRef.current);
        if (getValueByPosition(positionRef.current) !== value) {
            positionRef.current = position;
            setInteractiveValue(value);
            onUpdate(value);
        }
        if (innerScheduleRef.current) {
            innerScheduleRef.current();
        }
    }
    function handleMouseDown(event) {
        if (disabled) {
            return;
        }
        var coords = event.currentTarget.getBoundingClientRect();
        var position = window.pageXOffset + coords.left + coords.width * 0.5;
        dragOffsetRef.current = event.pageX - position;
        positionRef.current = position;
        setDragging(true);
        removeDocumentEvents();
        addDocumentMouseEvents();
    }
    function getStartPos() {
        if (!startRef.current) {
            return 0;
        }
        var coords = startRef.current.getBoundingClientRect();
        return window.pageXOffset + coords.left;
    }
    function getEndPos() {
        if (!endRef.current) {
            return 0;
        }
        var coords = endRef.current.getBoundingClientRect();
        return window.pageXOffset + coords.left;
    }
    function getValueByPosition(position) {
        var _a = tslib_1.__read([getStartPos(), getEndPos()], 2), start = _a[0], end = _a[1];
        var posRange = end - start;
        if (position < start) {
            position = start; // eslint-disable-line no-param-reassign
        }
        if (position > end) {
            position = end; // eslint-disable-line no-param-reassign
        }
        var proportion = (position - start) / posRange;
        return getValueByProportion(proportion);
    }
    function getValueByProportion(proportion) {
        var pow = Math.pow(10, precision);
        var value = proportion * range;
        value -= ((value * pow) % (step * pow)) / pow;
        value += min;
        if (markValueOnly && marks.length) {
            // eslint-disable-next-line prefer-destructuring
            value = marks.reduce(function (prev, cur) {
                return Math.abs(cur.value - value) < Math.abs(prev.value - value)
                    ? cur
                    : prev;
            }, marks[0]).value;
        }
        var _a = tslib_1.__read(allowedRange, 2), allowedStart = _a[0], allowedEnd = _a[1];
        if (value < allowedStart) {
            value = allowedStart;
        }
        if (value > allowedEnd) {
            value = allowedEnd;
        }
        return parseFloat(value.toFixed(precision));
    }
    function handleMouseDownOnBar(event) {
        if (disabled) {
            return;
        }
        var position = event.pageX;
        var value = getValueByPosition(position);
        setInteractiveValue(value);
        onUpdate(value);
        // 滑块拖动相关事件
        setDragging(true);
        positionRef.current = position;
        dragOffsetRef.current = 0;
        removeDocumentEvents();
        addDocumentMouseEvents();
    }
    function handleMouseMoveForPopover(event) {
        if (disabled) {
            return;
        }
        var position = event.pageX;
        setMousePosition(position);
        setMouseElement(event.nativeEvent);
        if (scheduleRef.current) {
            scheduleRef.current();
        }
    }
    function setMouseElement(event) {
        var clientX = Math.round(event.clientX);
        var clientY = startRef.current.getBoundingClientRect().top;
        mouseElement.current = {
            clientWidth: 0,
            clientHeight: 0,
            getBoundingClientRect: function () { return ({
                left: clientX,
                top: clientY,
                right: clientX,
                bottom: clientY,
                width: 0,
                height: 0,
            }); },
            // IE10 下 Popper 读取这两个值计算
            scrollTop: 0,
            scrollLeft: 0,
        };
    }
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-slider", className, {
            "is-disabled": disabled,
        }), style: style },
        react_1.default.createElement(popover_1.Popover, { visible: enableTrackTip &&
                !disabled &&
                !hovering &&
                !dragging &&
                !!mousePosition, referenceElement: mouseElement.current, overlayStyle: {
                pointerEvents: "none",
            }, overlay: function (_a) {
                var placement = _a.placement, scheduleUpdate = _a.scheduleUpdate;
                scheduleRef.current = scheduleUpdate;
                var tips = tipFormatter(getValueByPosition(mousePosition));
                return (tips !== null && (react_1.default.createElement(bubble_1.BubbleContent, { placement: placement }, tips)));
            } },
            react_1.default.createElement("div", { className: classPrefix + "-slider__content", onMouseDown: handleMouseDownOnBar, onMouseMove: handleMouseMoveForPopover, onMouseLeave: function () { return setMousePosition(null); }, onDragStart: function (e) { return e.preventDefault(); } },
                react_1.default.createElement(StartFlag, { ref: startRef }),
                react_1.default.createElement("div", { className: classPrefix + "-slider__bar" },
                    react_1.default.createElement("div", { className: classPrefix + "-slider__track", style: { width: proportion + "%" } })),
                react_1.default.createElement(popover_1.Popover, { visible: dragging || hovering, overlayStyle: {
                        pointerEvents: "none",
                    }, overlay: function (_a) {
                        var placement = _a.placement, scheduleUpdate = _a.scheduleUpdate;
                        innerScheduleRef.current = scheduleUpdate;
                        var tips = tipFormatter(proportionValue);
                        return (tips !== null && (react_1.default.createElement(bubble_1.BubbleContent, { placement: placement }, tips)));
                    } },
                    react_1.default.createElement("div", { className: classPrefix + "-slider__handle", style: { left: proportion + "%" }, onMouseDown: handleMouseDown, onMouseEnter: function () { return setHovering(true); }, onMouseLeave: function () { return setHovering(false); }, onClick: function (e) { return e.stopPropagation(); }, onMouseMove: function (e) { return e.stopPropagation(); } },
                        react_1.default.createElement("span", { className: classPrefix + "-slider__handle-inner" }))),
                react_1.default.createElement("div", { className: classPrefix + "-slider__mark" }, marks
                    .filter(function (_a) {
                    var value = _a.value;
                    return value >= min && value <= max;
                })
                    .map(function (_a) {
                    var value = _a.value, label = _a.label;
                    return (react_1.default.createElement("span", { key: value, className: classPrefix + "-slider__text", style: {
                            left: ((value - min) / range) * 100 + "%",
                            userSelect: "none",
                        } }, label || value));
                })),
                react_1.default.createElement(EndFlag, { ref: endRef }))),
        react_1.default.createElement("div", { className: classPrefix + "-slider__extend" }, after)));
}
exports.Slider = Slider;
var StartFlag = react_1.forwardRef(function (_, ref) { return (react_1.default.createElement("span", { ref: ref, style: { left: 0, position: "absolute", visibility: "hidden" } })); });
var EndFlag = react_1.forwardRef(function (_, ref) { return (react_1.default.createElement("span", { ref: ref, style: { left: "100%", position: "absolute", visibility: "hidden" } })); });
//# sourceMappingURL=Slider.js.map