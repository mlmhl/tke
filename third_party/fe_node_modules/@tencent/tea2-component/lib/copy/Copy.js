"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_copy_to_clipboard_1 = require("react-copy-to-clipboard");
var bubble_1 = require("../bubble");
var i18n_1 = require("../i18n");
var icon_1 = require("../icon");
var inject_value_1 = require("../_util/inject-value");
var noop_1 = require("../_util/noop");
function HoverTrigger(_a) {
    var setVisible = _a.setVisible, _b = _a.openDelay, openDelay = _b === void 0 ? 50 : _b, _c = _a.closeDelay, closeDelay = _c === void 0 ? 100 : _c, render = _a.render, onReset = _a.onReset;
    var commonProps = {
        onMouseEnter: function () {
            onReset();
            setVisible(true, openDelay);
        },
        onMouseLeave: function () { return setVisible(false, closeDelay); },
    };
    return render({
        overlayProps: commonProps,
        childrenProps: commonProps,
    });
}
function Copy(props) {
    var t = i18n_1.useTranslation();
    var text = props.text, _a = props.tips, tips = _a === void 0 ? function (copied) { return (copied ? t.copied : t.copy); } : _a, _b = props.onCopy, onCopy = _b === void 0 ? noop_1.noop : _b, _c = props.children, children = _c === void 0 ? react_1.default.createElement(icon_1.Icon, { type: "copy" }) : _c;
    var _d = tslib_1.__read(react_1.useState(false), 2), copied = _d[0], setCopied = _d[1];
    var timerRef = react_1.useRef(null);
    react_1.useEffect(function () { return function () { return clearTimeout(timerRef.current); }; }, []);
    var element = inject_value_1.injectValue(children)(copied);
    return (react_1.default.createElement(bubble_1.Bubble, { trigger: [
            HoverTrigger,
            {
                onReset: function () {
                    setCopied(false);
                    clearTimeout(timerRef.current);
                },
            },
        ], content: inject_value_1.injectValue(tips)(copied) },
        react_1.default.createElement(react_copy_to_clipboard_1.CopyToClipboard, { text: text, onCopy: function (text, result) {
                onCopy(text, { result: result });
                if (result) {
                    if (timerRef.current) {
                        clearTimeout(timerRef.current);
                    }
                    setCopied(true);
                    timerRef.current = setTimeout(function () { return setCopied(false); }, 1500);
                }
            } }, react_1.default.cloneElement(element, {
            style: tslib_1.__assign({ cursor: "pointer" }, (element.props.style || {})),
        }))));
}
exports.Copy = Copy;
//# sourceMappingURL=Copy.js.map