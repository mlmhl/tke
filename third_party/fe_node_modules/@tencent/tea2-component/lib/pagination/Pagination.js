"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var icon_1 = require("../icon");
var tooltip_1 = require("../tooltip");
var i18n_1 = require("../i18n");
var select_1 = require("../select");
var config_context_1 = require("../_util/config-context");
exports.defaultPageSizeOptions = [10, 20, 30, 50, 100, 200];
var noop = function () { };
function Pagination(_a) {
    var pageIndex = _a.pageIndex, pageSize = _a.pageSize, pageSizeOptions = _a.pageSizeOptions, recordCount = _a.recordCount, _b = _a.onPagingChange, onPagingChange = _b === void 0 ? noop : _b, _c = _a.isPagingReset, isPagingReset = _c === void 0 ? true : _c, stateText = _a.stateText, stateTextVisible = _a.stateTextVisible, pageSizeVisible = _a.pageSizeVisible, pageIndexVisible = _a.pageIndexVisible, jumpVisible = _a.jumpVisible, endJumpVisible = _a.endJumpVisible, style = _a.style, className = _a.className;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var t = i18n_1.useTranslation();
    if (!Array.isArray(pageSizeOptions) || pageSizeOptions.length === 0) {
        pageSizeOptions = exports.defaultPageSizeOptions; // eslint-disable-line no-param-reassign
    }
    // 为非受控组件提供状态管理
    var _d = tslib_1.__read(react_1.useState({
        pageIndex: 1,
        pageSize: pageSizeOptions[0],
    }), 2), internalPaging = _d[0], setInternalPaging = _d[1];
    // 非受控组件，使用内部状态
    if (typeof pageIndex === "undefined") {
        // eslint-disable-next-line prefer-destructuring,no-param-reassign
        pageIndex = internalPaging.pageIndex;
    }
    if (typeof pageSize === "undefined") {
        // eslint-disable-next-line prefer-destructuring,no-param-reassign
        pageSize = internalPaging.pageSize;
    }
    // 状态改变同时更新内部状态和通知外部
    // eslint-disable-next-line no-param-reassign
    onPagingChange = (function (onPagingChange) { return function (query) {
        setInternalPaging(query);
        onPagingChange(query);
    }; })(onPagingChange);
    // 总页数
    var pageCount = Math.max(1, Math.ceil(recordCount / pageSize));
    // 改变页长
    var changePageSize = function (pageSize) {
        onPagingChange({
            pageIndex: isPagingReset ? 1 : pageIndex,
            pageSize: pageSize,
        });
    };
    // 改变页码
    var changePageIndex = function (pageIndex) {
        return onPagingChange({
            pageIndex: pageIndex,
            pageSize: pageSize,
        });
    };
    // 渲染分页状态信息
    var stateElement = (function () {
        if (stateTextVisible === false) {
            return null;
        }
        return (react_1.default.createElement("div", { className: classPrefix + "-pagination__state" },
            react_1.default.createElement("span", { className: classPrefix + "-pagination__text" }, typeof stateText === "undefined"
                ? t.paginationRecordCount(recordCount)
                : stateText)));
    })();
    // 操作区元素
    var operatationElements = [];
    // 页码输入
    if (pageIndexVisible !== false) {
        operatationElements = [
            react_1.default.createElement(PageIndexInput, { key: "page-index-input", pageIndex: pageIndex, pageCount: pageCount, onChange: changePageIndex, classPrefix: classPrefix }),
        ];
    }
    // 页码跳转
    if (jumpVisible !== false) {
        operatationElements = tslib_1.__spread([
            react_1.default.createElement(PaginationButton, { key: "jump-prev", type: "pre", icon: "arrowleft", disabled: pageIndex <= 1, title: pageIndex > 1 ? t.paginationPrevPage : t.paginationAtFirst, onClick: function () { return changePageIndex(pageIndex - 1); }, classPrefix: classPrefix })
        ], operatationElements, [
            react_1.default.createElement(PaginationButton, { key: "jump-next", type: "next", icon: "arrowright", disabled: pageIndex >= pageCount, title: pageIndex < pageCount ? t.paginationNextPage : t.paginationAtLast, onClick: function () { return changePageIndex(pageIndex + 1); }, classPrefix: classPrefix }),
        ]);
    }
    // 页头页尾跳转
    if (endJumpVisible !== false) {
        operatationElements = tslib_1.__spread([
            react_1.default.createElement(PaginationButton, { key: "jump-first", type: "first", icon: "firstpage", disabled: pageIndex <= 1, title: pageIndex > 1 ? t.paginationToFirstPage : t.paginationAtFirst, onClick: function () { return changePageIndex(1); }, classPrefix: classPrefix })
        ], operatationElements, [
            react_1.default.createElement(PaginationButton, { key: "jump-last", type: "last", icon: "lastpage", disabled: pageIndex >= pageCount, title: pageIndex < pageCount ? t.paginationToLastPage : t.paginationAtLast, onClick: function () { return changePageIndex(pageCount); }, classPrefix: classPrefix }),
        ]);
    }
    // 页长选择
    if (pageSizeVisible !== false) {
        operatationElements = tslib_1.__spread([
            react_1.default.createElement(select_1.Select, { key: "page-size-select", type: "simulate", options: pageSizeOptions.map(function (page) { return ({
                    value: String(page),
                    text: page,
                }); }), value: String(pageSize), onChange: function (pageSize) { return changePageSize(Number(pageSize)); }, placement: "top", boxClassName: "size-auto-width" }),
            react_1.default.createElement("span", { key: "page-size-text", className: classPrefix + "-pagination__text" }, t.paginationRecordPerPage)
        ], operatationElements);
    }
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-pagination", className), style: style },
        stateElement,
        react_1.default.createElement("div", { className: classPrefix + "-pagination__operate" }, operatationElements)));
}
exports.Pagination = Pagination;
function PaginationButton(_a) {
    var _b;
    var type = _a.type, disabled = _a.disabled, icon = _a.icon, title = _a.title, onClick = _a.onClick, classPrefix = _a.classPrefix;
    var buttonClassName = classnames_1.default((_b = {},
        _b[classPrefix + "-pagination__turnbtn"] = true,
        _b[classPrefix + "-pagination__" + type + "btn"] = type,
        _b["is-disabled"] = disabled,
        _b));
    var button = (react_1.default.createElement("a", { className: buttonClassName, onClick: disabled ? null : onClick, onDoubleClick: function (evt) { return evt.preventDefault(); }, style: { userSelect: "none" } },
        react_1.default.createElement(icon_1.Icon, { type: icon })));
    if (title) {
        return react_1.default.createElement(tooltip_1.Tooltip, { title: title }, button);
    }
    return button;
}
exports.PaginationButton = PaginationButton;
function PageIndexInput(_a) {
    var pageIndex = _a.pageIndex, pageCount = _a.pageCount, onChange = _a.onChange, classPrefix = _a.classPrefix;
    var _b = tslib_1.__read(react_1.useState(null), 2), inputValue = _b[0], setInputValue = _b[1];
    var t = i18n_1.useTranslation();
    return (react_1.default.createElement("div", { className: classPrefix + "-pagination__manualinput" },
        react_1.default.createElement("input", { type: "text", className: classPrefix + "-input " + classPrefix + "-pagination__inputpagenum", value: inputValue === null ? String(pageIndex) : inputValue, onChange: function (evt) { return setInputValue(evt.target.value); }, onBlur: function () { return setInputValue(null); }, onKeyDown: function (evt) {
                // enter to confirm
                if (evt.keyCode === 13) {
                    var parsedPageIndex = parseInt(inputValue, 10);
                    if (parsedPageIndex !== pageIndex &&
                        parsedPageIndex >= 1 &&
                        parsedPageIndex <= pageCount) {
                        onChange(parsedPageIndex);
                    }
                    setInputValue(null);
                }
                // up/down key
                else if (evt.keyCode === 38 || evt.keyCode === 40) {
                    var nextPageValue = parseInt(inputValue, 10);
                    if (Number.isNaN(nextPageValue)) {
                        nextPageValue = pageIndex;
                    }
                    if (evt.keyCode === 38) {
                        nextPageValue = Math.max(1, nextPageValue + 1);
                    }
                    else if (evt.keyCode === 40) {
                        nextPageValue = Math.min(pageCount, nextPageValue - 1);
                    }
                    setInputValue(String(nextPageValue));
                }
            } }),
        react_1.default.createElement("span", { className: classPrefix + "-pagination__totalpage" }, t.paginationPageCount(pageCount))));
}
//# sourceMappingURL=Pagination.js.map