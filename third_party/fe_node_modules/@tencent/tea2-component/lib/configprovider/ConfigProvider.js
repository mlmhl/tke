"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var eventemitter3_1 = tslib_1.__importDefault(require("eventemitter3"));
var ConfigContext_1 = require("./ConfigContext");
var ConfigEmitter = /** @class */ (function (_super) {
    tslib_1.__extends(ConfigEmitter, _super);
    function ConfigEmitter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ConfigEmitter;
}(eventemitter3_1.default));
var configEmitter = new ConfigEmitter();
var configStore = {};
function setConfig(config) {
    if (config === void 0) { config = {}; }
    Object.assign(configStore, config);
    configEmitter.emit("set", configStore);
}
exports.setConfig = setConfig;
function ConfigProvider(_a) {
    var children = _a.children, configProps = tslib_1.__rest(_a, ["children"]);
    var _b = tslib_1.__read(react_1.useState(configStore), 2), globalConfig = _b[0], setGlobalConfig = _b[1];
    react_1.useEffect(function () {
        var callback = function (config) {
            setGlobalConfig(function (curConfig) { return (tslib_1.__assign(tslib_1.__assign({}, curConfig), config)); });
        };
        configEmitter.on("set", callback);
        return function () { return configEmitter.removeListener("set", callback); };
    }, []);
    react_1.useEffect(function () {
        // props 填充全局配置空白
        Object.assign(configStore, tslib_1.__assign(tslib_1.__assign({}, configProps), configStore));
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [configProps.classPrefix, configProps.locale]);
    // props 优先级高于全局配置
    var config = Object.assign({}, globalConfig, configProps);
    return (react_1.default.createElement(ConfigContext_1.ConfigContext.Provider, { value: config }, children));
}
exports.ConfigProvider = ConfigProvider;
//# sourceMappingURL=ConfigProvider.js.map