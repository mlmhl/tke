"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var config_context_1 = require("../_util/config-context");
var wrapAdornmentAddon = function (addon, classPrefix) { return (react_1.default.createElement("div", { className: classPrefix + "-input-group__addon" }, addon)); };
var wrapAdornmentText = function (text, pure, classPrefix) { return (react_1.default.createElement("span", { className: pure
        ? classPrefix + "-form__help-text--inline"
        : classPrefix + "-input-group__text" }, text)); };
function InputAdornment(_a) {
    var before = _a.before, after = _a.after, children = _a.children, appearence = _a.appearence, _b = _a.appearance, appearance = _b === void 0 ? appearence : _b, className = _a.className, style = _a.style;
    var classPrefix = config_context_1.useConfig().classPrefix;
    if (typeof before === "string") {
        // eslint-disable-next-line no-param-reassign
        before = wrapAdornmentText(before, false, classPrefix);
    }
    if (typeof after === "string") {
        // eslint-disable-next-line no-param-reassign
        after = wrapAdornmentText(after, appearance === "pure", classPrefix);
    }
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-input-group", className), style: style },
        before && wrapAdornmentAddon(before, classPrefix),
        children,
        after && wrapAdornmentAddon(after, classPrefix)));
}
exports.InputAdornment = InputAdornment;
InputAdornment.defaultLabelAlign = "middle";
/**
 * @deprecated
 *
 * 请使用 InputAdornment 代替
 */
exports.InputAdorment = InputAdornment;
//# sourceMappingURL=InputAdornment.js.map