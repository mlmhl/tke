"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var util_1 = require("./util");
var AffixManager_1 = require("./AffixManager");
var uuid_1 = require("../_util/uuid");
exports.Affix = react_1.forwardRef(function Affix(_a, ref) {
    var offsetTop = _a.offsetTop, offsetBottom = _a.offsetBottom, _b = _a.target, target = _b === void 0 ? window : _b, children = _a.children, style = _a.style, className = _a.className;
    // 默认吸顶
    if (typeof offsetTop === "undefined" && typeof offsetBottom === "undefined") {
        offsetTop = 0; // eslint-disable-line no-param-reassign
    }
    var affixRef = react_1.useRef(null);
    var placeholderRef = react_1.useRef(null);
    var _c = tslib_1.__read(react_1.useState(false), 2), needUpdate = _c[0], setNeedUpdate = _c[1];
    var _d = tslib_1.__read(react_1.useState(undefined), 2), affixStyle = _d[0], setAffixStyle = _d[1];
    var _e = tslib_1.__read(react_1.useState(undefined), 2), placeholderStyle = _e[0], setPlaceholderStyle = _e[1];
    var measure = react_1.useCallback(function () {
        var placeholder = placeholderRef.current;
        if (!needUpdate || !placeholder) {
            return;
        }
        var placeholderRect = util_1.getRect(placeholder);
        var sizeStyle = {
            width: placeholderRect.width,
            height: placeholderRect.height,
        };
        setPlaceholderStyle(sizeStyle);
        if (typeof offsetTop !== "undefined") {
            var top_1 = util_1.getFixed(target, placeholder, offsetTop);
            setAffixStyle(typeof top_1 !== "undefined"
                ? Object.assign({ position: "fixed", zIndex: 10, top: top_1 }, sizeStyle)
                : undefined);
        }
        else {
            var bottom = util_1.getFixed(target, placeholder, offsetBottom, false);
            setAffixStyle(typeof bottom !== "undefined"
                ? Object.assign({ position: "fixed", zIndex: 10, bottom: bottom }, sizeStyle)
                : undefined);
        }
        setNeedUpdate(false);
    }, [needUpdate, offsetBottom, offsetTop, target]);
    var update = react_1.useMemo(function () {
        return util_1.throttle(function () {
            setAffixStyle(undefined);
            setPlaceholderStyle(undefined);
            setNeedUpdate(true);
        });
    }, []);
    react_1.useLayoutEffect(function () {
        measure();
    }, [measure, needUpdate]);
    react_1.useImperativeHandle(ref, function () { return ({
        update: update,
    }); });
    react_1.useEffect(function () {
        update();
        var id = uuid_1.uuid();
        var targetElement = util_1.getTarget(target);
        AffixManager_1.addListener(targetElement, id, update);
        return function () { return AffixManager_1.removeListener(targetElement, id); };
    }, [offsetBottom, offsetTop, target, update]);
    return (react_1.default.createElement("div", { ref: placeholderRef },
        affixStyle && react_1.default.createElement("div", { style: placeholderStyle }),
        react_1.default.createElement("div", { ref: affixRef, className: className, style: tslib_1.__assign(tslib_1.__assign({}, (affixStyle || {})), (style || {})) }, children)));
});
//# sourceMappingURL=Affix.js.map