"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_window_1 = require("react-window");
var List_1 = require("./List");
var dropdown_1 = require("../dropdown");
var forward_ref_with_statics_1 = require("../_util/forward-ref-with-statics");
var tips_1 = require("../tips");
var merge_refs_1 = require("../_util/merge-refs");
var noop_1 = require("../_util/noop");
function Row(_a) {
    var data = _a.data, index = _a.index, style = _a.style;
    var _b = data[index], type = _b.type, text = _b.text, _c = _b.props, props = _c === void 0 ? {} : _c;
    if (type === "tips") {
        return (react_1.default.createElement(VStatusTip, tslib_1.__assign({}, props, { style: style }), text));
    }
    if (type === "group") {
        return (react_1.default.createElement(VGroupLabel, tslib_1.__assign({}, props, { style: style }), text));
    }
    return (react_1.default.createElement(VItem, tslib_1.__assign({}, props, { style: style }), text));
}
exports.VirtualizedList = forward_ref_with_statics_1.forwardRefWithStatics(function VirtualizedList(_a, ref) {
    var _b = _a.items, items = _b === void 0 ? [] : _b, onScrollBottom = _a.onScrollBottom, virtualizedRef = _a.virtualizedRef, listHeight = _a.listHeight, 
    // ListProps
    type = _a.type, split = _a.split, className = _a.className, style = _a.style, container = _a.container, containerStyle = _a.containerStyle, containerClassName = _a.containerClassName;
    var _c, _d, _e;
    var vRef = react_1.useRef(null);
    var listRef = react_1.useRef(null);
    var _f = tslib_1.__read(react_1.useState(undefined), 2), tipsSize = _f[0], setTipsSize = _f[1];
    var _g = tslib_1.__read(react_1.useState(undefined), 2), itemSize = _g[0], setItemSize = _g[1];
    var _h = tslib_1.__read(react_1.useState(undefined), 2), groupSize = _h[0], setGroupSize = _h[1];
    var _j = tslib_1.__read(react_1.useState(listHeight), 2), listSize = _j[0], setListSize = _j[1];
    var innerElementType = react_1.useMemo(function () {
        return react_1.forwardRef(function (_a, ref) {
            var _b = _a.style, innerStyle = _b === void 0 ? {} : _b, innerProps = tslib_1.__rest(_a, ["style"]);
            return (react_1.default.createElement(List_1.List, tslib_1.__assign({ ref: ref, type: type, split: split, className: className }, innerProps, { style: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, style), innerStyle), { maxHeight: "initial", overflowY: "initial" }) })));
        });
    }, [type, split, className, style]);
    var getItemSize = react_1.useCallback(function (index) {
        switch (items[index].type) {
            case "tips":
                return tipsSize || itemSize;
            case "group":
                return groupSize || itemSize;
            default:
                return itemSize;
        }
    }, [groupSize, itemSize, items, tipsSize]);
    // VariableSizeList 默认按 index 缓存 style，需手动触发重置
    react_1.useEffect(function () {
        if (vRef.current) {
            items.forEach(function (_, i) { return vRef.current.resetAfterIndex(i, false); });
        }
    }, [groupSize, itemSize, items, tipsSize]);
    var itemsSize = items.reduce(function (p, _, i) { return p + getItemSize(i); }, 0);
    function handleScroll(props) {
        if (itemsSize > listSize && listRef.current && onScrollBottom) {
            var _a = listRef.current, scrollHeight = _a.scrollHeight, scrollTop = _a.scrollTop, clientHeight = _a.clientHeight;
            if (scrollHeight <= Math.round(clientHeight + scrollTop)) {
                onScrollBottom(props);
            }
        }
    }
    var option = (_c = items.find(function (i) { return i.type === "option"; })) === null || _c === void 0 ? void 0 : _c.text;
    var tips = (_d = items.find(function (i) { return i.type === "tips"; })) === null || _d === void 0 ? void 0 : _d.text;
    var group = (_e = items.find(function (i) { return i.type === "group"; })) === null || _e === void 0 ? void 0 : _e.text;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        [itemSize, listSize].every(function (s) { return typeof s !== "undefined"; }) && (react_1.default.createElement(react_window_1.VariableSizeList, { ref: merge_refs_1.mergeRefs(virtualizedRef, vRef), innerRef: ref, outerRef: listRef, height: Math.min(itemsSize, listSize), width: "100%", itemCount: items.length, itemSize: getItemSize, innerElementType: innerElementType, onScroll: handleScroll, itemKey: function (index) { return items[index].key; }, itemData: items }, Row)),
        react_1.default.createElement(MirrorList, { container: container, containerStyle: containerStyle, containerClassName: containerClassName, onItemSizeChange: setItemSize, onListSizeChange: listHeight ? noop_1.noop : setListSize, onTipsSizeChange: setTipsSize, onGroupSizeChange: setGroupSize, tipsReference: tips, itemReference: option, groupReference: group, type: type, split: split, className: className, style: style })));
}, {
    displayName: "VirtualizedList",
});
function MirrorList(_a) {
    var itemReference = _a.itemReference, tipsReference = _a.tipsReference, groupReference = _a.groupReference, onTipsSizeChange = _a.onTipsSizeChange, onItemSizeChange = _a.onItemSizeChange, onGroupSizeChange = _a.onGroupSizeChange, onListSizeChange = _a.onListSizeChange, _b = _a.container, container = _b === void 0 ? dropdown_1.DropdownBox : _b, _c = _a.containerStyle, containerStyle = _c === void 0 ? {} : _c, containerClassName = _a.containerClassName, props = tslib_1.__rest(_a, ["itemReference", "tipsReference", "groupReference", "onTipsSizeChange", "onItemSizeChange", "onGroupSizeChange", "onListSizeChange", "container", "containerStyle", "containerClassName"]);
    var tipsRef = react_1.useRef(null);
    var listRef = react_1.useRef(null);
    var groupRef = react_1.useRef(null);
    var itemRef = react_1.useRef(null);
    react_1.useEffect(function () {
        if (itemRef.current) {
            onItemSizeChange(itemRef.current.clientHeight);
        }
        // tipsRef / groupRef 存在时才取高度
        if (tipsRef.current && tipsReference) {
            onTipsSizeChange(tipsRef.current.clientHeight);
        }
        if (groupRef.current && groupReference) {
            onGroupSizeChange(groupRef.current.clientHeight);
        }
        if (listRef.current) {
            onListSizeChange(listRef.current.clientHeight);
        }
    }, [
        tipsReference,
        itemReference,
        groupReference,
        onTipsSizeChange,
        onItemSizeChange,
        onGroupSizeChange,
        onListSizeChange,
    ]);
    return react_1.createElement(container, {
        style: tslib_1.__assign(tslib_1.__assign({}, containerStyle), { position: "absolute", top: -9999, left: 0 }),
        className: containerClassName,
    }, react_1.default.createElement(List_1.List, tslib_1.__assign({}, props, { ref: listRef }),
        react_1.default.createElement(List_1.List.StatusTip, { ref: tipsRef }, tipsReference || react_1.default.createElement(tips_1.EmptyTip, null)),
        react_1.default.createElement(List_1.List.GroupLabel, { ref: groupRef }, groupReference || "MirrorGroup"),
        react_1.default.createElement(List_1.List.Item, { ref: itemRef }, itemReference || "MirrorItem"),
        react_1.default.createElement("li", { style: { height: 3000 } }, "Holder")));
}
function VItem(_a) {
    var _b = _a.style, style = _b === void 0 ? {} : _b, props = tslib_1.__rest(_a, ["style"]);
    return (react_1.default.createElement(List_1.List.Item, tslib_1.__assign({}, props, { style: tslib_1.__assign(tslib_1.__assign({}, style), { boxSizing: "border-box" }) })));
}
function VGroupLabel(_a) {
    var _b = _a.style, style = _b === void 0 ? {} : _b, props = tslib_1.__rest(_a, ["style"]);
    return (react_1.default.createElement(List_1.List.GroupLabel, tslib_1.__assign({}, props, { style: tslib_1.__assign(tslib_1.__assign({}, style), { boxSizing: "border-box" }) })));
}
function VStatusTip(_a) {
    var _b = _a.style, style = _b === void 0 ? {} : _b, props = tslib_1.__rest(_a, ["style"]);
    return (react_1.default.createElement(List_1.List.StatusTip, tslib_1.__assign({}, props, { style: tslib_1.__assign(tslib_1.__assign({}, style), { boxSizing: "border-box" }) })));
}
//# sourceMappingURL=VirtualizedList.js.map