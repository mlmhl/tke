"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var controlled_1 = require("../form/controlled");
var button_1 = require("../button");
var bubble_1 = require("../bubble");
var config_context_1 = require("../_util/config-context");
var SegmentGroup_1 = require("./SegmentGroup");
function Segment(props) {
    var _a = controlled_1.useDefaultValue(props, ""), value = _a.value, onChange = _a.onChange, options = _a.options, groups = _a.groups, groupClassName = _a.groupClassName, groupStyle = _a.groupStyle;
    if (groups) {
        return (react_1.default.createElement(SegmentGroup_1.SegmentGroup, { className: groupClassName, style: groupStyle }, Object.entries(groups).map(function (_a) {
            var _b = tslib_1.__read(_a, 2), key = _b[0], name = _b[1];
            var subOptions = options.filter(function (i) { return i.groupKey === key; });
            return (react_1.default.createElement(SegmentGroup_1.SegmentGroupItem, { name: name, key: key },
                react_1.default.createElement(SegmentMain, tslib_1.__assign({}, props, { options: subOptions, value: value, onChange: onChange }))));
        })));
    }
    return react_1.default.createElement(SegmentMain, tslib_1.__assign({}, props, { value: value, onChange: onChange }));
}
exports.Segment = Segment;
function SegmentMain(_a) {
    var _b;
    var className = _a.className, style = _a.style, value = _a.value, onChange = _a.onChange, options = _a.options, disabled = _a.disabled, rimless = _a.rimless;
    var classPrefix = config_context_1.useConfig().classPrefix;
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-segment", className, (_b = {},
            _b[classPrefix + "-segment--rimless"] = rimless,
            _b)), style: style }, options.map(function (option) {
        var button = (react_1.default.createElement(button_1.Button, { key: option.value, disabled: disabled || option.disabled, tooltip: option.tooltip, htmlType: "button", className: classnames_1.default({
                "is-selected": option.value === value,
            }), onClick: disabled || option.disabled
                ? null
                : function (event) {
                    onChange(option.value, { event: event });
                } }, option.text || option.value));
        if (option.bubble) {
            return (react_1.default.createElement(bubble_1.Bubble, { key: option.value, content: option.bubble }, button));
        }
        return button;
    })));
}
Segment.defaultLabelAlign = "middle";
//# sourceMappingURL=Segment.js.map