"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var use_default_1 = require("../_util/use-default");
var icon_1 = require("../icon");
var transition_1 = require("../transition");
var config_context_1 = require("../_util/config-context");
var button_1 = require("../button");
var AlertNotice_1 = require("./AlertNotice");
var iconMap = {
    info: "infoblue",
    success: "success",
    warning: "warning",
    error: "error",
};
function Alert(_a) {
    var _b;
    var type = _a.type, children = _a.children, className = _a.className, style = _a.style, onClose = _a.onClose, extra = _a.extra, carouselMode = _a.carouselMode, _c = _a.interval, interval = _c === void 0 ? 5000 : _c, props = tslib_1.__rest(_a, ["type", "children", "className", "style", "onClose", "extra", "carouselMode", "interval"]);
    var classPrefix = config_context_1.useConfig().classPrefix;
    var alertClassName = classnames_1.default(classPrefix + "-alert", (_b = {},
        _b[classPrefix + "-alert--" + type] = type,
        _b), className);
    var _d = tslib_1.__read(use_default_1.useDefault(props.visible, props.defaultVisible, function (visible) { return !visible && onClose && onClose(); }), 2), visible = _d[0], onVisibleChange = _d[1];
    var isClosable = typeof visible === "boolean";
    var timerRef = react_1.useRef(null);
    var _e = tslib_1.__read(react_1.useState(0), 2), currentIndex = _e[0], setCurrentIndex = _e[1];
    var length = react_1.default.Children.count(children);
    var circulate = react_1.useCallback(function () {
        if (!carouselMode) {
            return;
        }
        if (timerRef.current) {
            clearTimeout(timerRef.current);
        }
        timerRef.current = setTimeout(function () {
            setCurrentIndex(function (i) { return (i + 1) % length; });
            circulate();
        }, interval);
    }, [carouselMode, interval, length]);
    react_1.useEffect(function () {
        circulate();
        return function () { return clearTimeout(timerRef.current); };
    }, [circulate]);
    var alertElement = function (children) { return (react_1.default.createElement("div", { className: alertClassName, style: style, onMouseEnter: function () {
            if (timerRef.current) {
                clearTimeout(timerRef.current);
            }
        }, onMouseLeave: circulate },
        react_1.default.createElement("span", { className: classPrefix + "-alert__decoration" },
            react_1.default.createElement(icon_1.Icon, { type: iconMap[type] || "infoblue" })),
        react_1.default.createElement("div", { className: classPrefix + "-alert__info" }, children),
        react_1.default.createElement("div", { className: classPrefix + "-alert__operational" },
            extra,
            carouselMode && (react_1.default.createElement(Dot, { classPrefix: classPrefix, total: length, currentIndex: currentIndex, onChange: function (index) {
                    setCurrentIndex(index);
                    circulate();
                } })),
            isClosable && (react_1.default.createElement(button_1.Button, { type: "icon", icon: "close", onClick: function () { return onVisibleChange(false); } }))))); };
    var content = !carouselMode
        ? alertElement(children)
        : alertElement(react_1.default.Children.toArray(children)[currentIndex]);
    if (isClosable) {
        return react_1.default.createElement(transition_1.FadeTransition, { in: visible }, content);
    }
    return content;
}
exports.Alert = Alert;
Alert.Notice = AlertNotice_1.AlertNotice;
function Dot(_a) {
    var classPrefix = _a.classPrefix, total = _a.total, currentIndex = _a.currentIndex, onChange = _a.onChange;
    return (react_1.default.createElement("div", { className: classPrefix + "-alert__nav " + classPrefix + "-alert__nav--dot" }, Array(total)
        .fill(null)
        .map(function (_, i) { return (react_1.default.createElement("span", { key: i, className: classnames_1.default(classPrefix + "-alert__nav-item", {
            "is-current": currentIndex === i,
        }), onClick: function () { return onChange(i); } })); })));
}
//# sourceMappingURL=Alert.js.map