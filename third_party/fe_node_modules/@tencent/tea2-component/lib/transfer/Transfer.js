"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var icon_1 = require("../icon");
var text_1 = require("../text");
var config_context_1 = require("../_util/config-context");
function Transfer(_a) {
    var header = _a.header, leftCell = _a.leftCell, rightCell = _a.rightCell, className = _a.className, style = _a.style;
    var classPrefix = config_context_1.useConfig().classPrefix;
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-transfer", className), style: style },
        header && (react_1.default.createElement("div", { className: classPrefix + "-transfer__header" }, header)),
        react_1.default.createElement("div", { className: classPrefix + "-transfer__body" },
            leftCell,
            react_1.default.createElement("div", { className: classPrefix + "-transfer__separator" },
                react_1.default.createElement(icon_1.Icon, { type: "transfer" })),
            rightCell)));
}
exports.Transfer = Transfer;
Transfer.Cell = TransferCell;
function TransferCell(_a) {
    var title = _a.title, tip = _a.tip, header = _a.header, children = _a.children, _b = _a.scrollable, scrollable = _b === void 0 ? true : _b, className = _a.className, style = _a.style;
    var classPrefix = config_context_1.useConfig().classPrefix;
    return (react_1.default.createElement("div", { className: classnames_1.default(classPrefix + "-transfer__cell", className), style: style },
        typeof title !== "undefined" && (react_1.default.createElement("div", { className: classPrefix + "-transfer__title" }, typeof title === "string" ? react_1.default.createElement("h4", null, title) : title)),
        react_1.default.createElement("div", { className: classPrefix + "-transfer__content" },
            header,
            react_1.default.createElement("div", { className: classPrefix + "-transfer__inner", style: { overflowY: scrollable ? undefined : "hidden" } }, children)),
        react_1.default.createElement("div", { className: classPrefix + "-transfer__tips" }, typeof tip === "string" ? react_1.default.createElement(text_1.Text, { theme: "weak" }, tip) : tip)));
}
//# sourceMappingURL=Transfer.js.map