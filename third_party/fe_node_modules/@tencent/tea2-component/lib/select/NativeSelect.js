"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var i18n_1 = require("../i18n");
var form_1 = require("../form");
var config_context_1 = require("../_util/config-context");
function groupBy(options) {
    var groups = [];
    options.forEach(function (opt, index) {
        var groupKey = opt.groupKey;
        if (index === 0 || groupKey !== options[index - 1].groupKey) {
            groups.push([]);
        }
        groups[groups.length - 1].push(opt);
    });
    return groups;
}
/**
 * 原生 Select
 */
function NativeSelect(props) {
    var _a;
    var t = i18n_1.useTranslation();
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _b = form_1.useDefaultValue(props, null), type = _b.type, value = _b.value, onChange = _b.onChange, _c = _b.options, options = _c === void 0 ? [] : _c, _d = _b.groups, groups = _d === void 0 ? {} : _d, _e = _b.placeholder, placeholder = _e === void 0 ? t.pleaseSelect : _e, disabled = _b.disabled, size = _b.size, className = _b.className, extraProps = tslib_1.__rest(_b, ["type", "value", "onChange", "options", "groups", "placeholder", "disabled", "size", "className"]);
    return (react_1.default.createElement("select", tslib_1.__assign({ className: classnames_1.default(classPrefix + "-select", className, (_a = {},
            _a["size-" + (size === "full" || size === "auto" ? size + "-width" : size)] = size,
            _a)), disabled: disabled, value: value != null ? value : "", placeholder: placeholder, onChange: disabled ? null : function (event) { return onChange(event.target.value, { event: event }); } }, extraProps),
        typeof placeholder === "string" && (react_1.default.createElement("option", { disabled: !!value, hidden: true }, placeholder)),
        options.find(function (opt) { return !!opt.groupKey; })
            ? groupBy(options).map(function (group) {
                var _a = group[0], value = _a.value, groupKey = _a.groupKey;
                if (!groupKey) {
                    return group.map(function (opt) { return (react_1.default.createElement("option", { key: opt.value, value: opt.value, disabled: opt.disabled, title: typeof opt.tooltip === "string" ? opt.tooltip : undefined }, typeof opt.text === "undefined" ? opt.value : opt.text)); });
                }
                return (react_1.default.createElement("optgroup", { key: value, label: groups[groupKey] || "" }, group.map(function (opt) { return (react_1.default.createElement("option", { key: opt.value, value: opt.value, disabled: opt.disabled, title: typeof opt.tooltip === "string" ? opt.tooltip : undefined }, typeof opt.text === "undefined" ? opt.value : opt.text)); })));
            })
            : options.map(function (opt) { return (react_1.default.createElement("option", { key: opt.value, value: opt.value, disabled: opt.disabled, title: typeof opt.tooltip === "string" ? opt.tooltip : undefined }, typeof opt.text === "undefined" ? opt.value : opt.text)); })));
}
exports.NativeSelect = NativeSelect;
//# sourceMappingURL=NativeSelect.js.map