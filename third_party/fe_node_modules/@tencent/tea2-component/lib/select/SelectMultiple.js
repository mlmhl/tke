"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var dropdown_1 = require("../dropdown");
var list_1 = require("../list");
var checkbox_1 = require("../checkbox");
var form_1 = require("../form");
var checktree_1 = require("../checktree");
var button_1 = require("../button");
var text_1 = require("../text");
var i18n_1 = require("../i18n");
var with_statics_1 = require("../_util/with-statics");
var config_context_1 = require("../_util/config-context");
var tips_1 = require("../tips");
var searchbox_1 = require("../searchbox");
var inject_value_1 = require("../_util/inject-value");
var tooltip_1 = require("../tooltip");
var use_default_1 = require("../_util/use-default");
var noop_1 = require("../_util/noop");
exports.SelectMultiple = with_statics_1.withStatics(function SelectMultiple(props) {
    var e_1, _a;
    var classPrefix = config_context_1.useConfig().classPrefix;
    var _b = form_1.useDefaultValue(props, []), _c = _b.staging, staging = _c === void 0 ? true : _c, value = _b.value, onChange = _b.onChange, _d = _b.options, options = _d === void 0 ? [] : _d, allOption = _b.allOption, _e = _b.shouldOptionExcludeFromAll, shouldOptionExcludeFromAll = _e === void 0 ? "disabled" : _e, _f = _b.allowEmpty, allowEmpty = _f === void 0 ? true : _f, _g = _b.onOpen, onOpen = _g === void 0 ? noop_1.noop : _g, _h = _b.onClose, onClose = _h === void 0 ? noop_1.noop : _h, searchable = _b.searchable, _j = _b.searchPlaceholder, searchPlaceholder = _j === void 0 ? "" : _j, _k = _b.onSearch, onSearch = _k === void 0 ? noop_1.noop : _k, customizeFilter = _b.filter, _l = _b.autoClearSearchValue, autoClearSearchValue = _l === void 0 ? true : _l, _m = _b.defaultSearchValue, defaultSearchValue = _m === void 0 ? "" : _m, searchValue = _b.searchValue, onSearchValueChange = _b.onSearchValueChange, clearable = _b.clearable, dropdownProps = tslib_1.__rest(_b, ["staging", "value", "onChange", "options", "allOption", "shouldOptionExcludeFromAll", "allowEmpty", "onOpen", "onClose", "searchable", "searchPlaceholder", "onSearch", "filter", "autoClearSearchValue", "defaultSearchValue", "searchValue", "onSearchValueChange", "clearable"]);
    var t = i18n_1.useTranslation();
    var _o = tslib_1.__read(react_1.useState(value), 2), stagingValue = _o[0], setStagingValue = _o[1];
    var InputRef = react_1.useRef(null);
    var _p = tslib_1.__read(use_default_1.useDefault(searchValue, defaultSearchValue, onSearchValueChange), 2), inputValue = _p[0], setInputValue = _p[1];
    var filter = customizeFilter ||
        (function (inputValue, _a) {
            var text = _a.text, value = _a.value;
            var optionText = String(typeof text === "string" ? text : value);
            return !searchable || optionText.includes(inputValue);
        });
    function focus() {
        if (searchable) {
            setTimeout(function () {
                if (InputRef.current) {
                    InputRef.current.focus();
                }
            }, 100); // 第一次展开时 Input 还未渲染
        }
    }
    var handleChange = function (value, context) {
        if (staging === false) {
            onChange(value, context);
            return;
        }
        setStagingValue(value);
    };
    // 「全部」选项和其余选项是数关系
    var relations = {};
    if (allOption) {
        try {
            for (var options_1 = tslib_1.__values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                if (
                // 用户可以指定哪些选项从全选逻辑中排除
                (typeof shouldOptionExcludeFromAll === "function" &&
                    shouldOptionExcludeFromAll(option)) ||
                    (shouldOptionExcludeFromAll === "disabled" && option.disabled)) {
                    // continue
                }
                else {
                    relations[option.value] = allOption.value;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    // 筛选
    var filteredOptions = options.filter(function (options) {
        return filter(inputValue, options);
    });
    var tips = props.tips;
    if (!tips && filteredOptions.length === 0) {
        tips = react_1.default.createElement(tips_1.EmptyTip, null);
    }
    tips = tips ? (react_1.default.createElement(list_1.List.StatusTip, null, inject_value_1.injectValue(tips)(filteredOptions))) : null;
    return (react_1.default.createElement(dropdown_1.Dropdown, tslib_1.__assign({}, dropdownProps, { updateOnChildrenChange: true, button: react_1.default.createElement(ValueBrief, tslib_1.__assign({}, props, { value: value })), onOpen: function () {
            setStagingValue(value);
            focus();
            onOpen();
        }, onClose: function () {
            if (autoClearSearchValue && inputValue !== "") {
                setTimeout(function () {
                    setInputValue("", {});
                }, 100);
            }
            onClose();
        }, clickClose: false, clearable: value.length && clearable, onClear: function (event) {
            onChange([], { event: event });
            setStagingValue([]);
        } }), function (close) { return (react_1.default.createElement(checktree_1.CheckTree, { relations: relations, value: (staging ? stagingValue : value) || value, onChange: handleChange, disabledNames: options.filter(function (x) { return x.disabled; }).map(function (x) { return x.value; }) },
        searchable && (react_1.default.createElement(searchbox_1.SearchBox, { simple: true, ref: InputRef, value: inputValue, onChange: function (value, context) {
                setInputValue(value, context);
                onSearch(value, context);
            }, onClear: focus, placeholder: searchPlaceholder, onSearch: onSearch })),
        react_1.default.createElement(list_1.List, { type: "option", className: classPrefix + "-list--checkoption" },
            allOption &&
                options.length === filteredOptions.length &&
                renderSelectOption(allOption),
            tips,
            filteredOptions.map(function (option) { return renderSelectOption(option); })),
        staging !== false && (react_1.default.createElement(dropdown_1.Dropdown.Footer, null,
            react_1.default.createElement(button_1.Button, { type: "primary", disabled: !allowEmpty && stagingValue.length === 0, onClick: function (event) {
                    onChange(stagingValue, { event: event });
                    close();
                } }, t.okText),
            react_1.default.createElement(button_1.Button, { type: "weak", onClick: close }, t.cancelText))))); }));
}, {
    defaultLabelAlign: "middle",
});
function renderSelectOption(option) {
    return (react_1.default.createElement(list_1.List.Item, { key: option.value, tooltip: option.tooltip, disabled: option.disabled },
        react_1.default.createElement(checkbox_1.Checkbox, { onClick: function (evt) { return evt.stopPropagation(); }, name: option.value }, option.text || option.value)));
}
function ValueBrief(props) {
    var t = i18n_1.useTranslation();
    var value = props.value, allOption = props.allOption, options = props.options, button = props.button, _a = props.placeholder, placeholder = _a === void 0 ? t.pleaseSelect : _a, _b = props.appearance, appearance = _b === void 0 ? props.appearence : _b;
    var buttonPlaceholder = placeholder;
    if (!appearance || appearance === "button" || appearance === "default") {
        buttonPlaceholder = react_1.default.createElement(text_1.Text, { theme: "weak" }, placeholder);
    }
    var _c = tslib_1.__read(react_1.useState((value || []).map(function (x) { return options.find(function (y) { return y.value === x; }); }).filter(Boolean)), 2), selectedOptions = _c[0], setSelectedOptions = _c[1];
    react_1.useEffect(function () {
        setSelectedOptions(function (selectedOptions) {
            return (value || [])
                .map(function (v) {
                return options.find(function (option) { return option.value === v; }) ||
                    selectedOptions.find(function (option) { return option.value === v; });
            })
                .filter(Boolean);
        });
    }, [options, value]);
    if (button) {
        return react_1.default.createElement(react_1.default.Fragment, null, inject_value_1.injectValue(button)(selectedOptions));
    }
    if (!value || !value.length) {
        return react_1.default.createElement(react_1.default.Fragment, null, buttonPlaceholder);
    }
    if (allOption &&
        value.length === options.length &&
        value.filter(function (v) { return options.find(function (o) { return o.value === v; }); }).length ===
            options.length) {
        return react_1.default.createElement(react_1.default.Fragment, null, allOption.text || allOption.value);
    }
    var exceed = selectedOptions.length > 5;
    var content = (react_1.default.createElement(react_1.default.Fragment, null,
        selectedOptions.slice(0, 5).map(function (o, index) { return (react_1.default.createElement(react_1.Fragment, { key: o.value },
            o.text || o.value,
            index < selectedOptions.length - 1 && ", ")); }),
        exceed && "..."));
    return exceed ? (react_1.default.createElement(tooltip_1.Tooltip, { title: content },
        react_1.default.createElement("span", null, content))) : (content);
}
//# sourceMappingURL=SelectMultiple.js.map