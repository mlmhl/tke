"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var root_1 = require("react-hot-loader/root");
var react_1 = __importDefault(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var logTrace_1 = require("../helpers/logTrace");
var insight_1 = require("./insight");
var i18n_1 = require("./i18n");
var create_history_1 = require("./history/create-history");
var history_context_1 = require("./history/history-context");
var beforeDestroy_1 = require("./beforeDestroy");
var _bridge_1 = require("../bridge/_bridge");
var configprovider_1 = require("@tencent/tea-component/lib/configprovider");
var pageManager = _bridge_1._bridge("nmc/main/pagemanager");
var errorBoundaryEvent = insight_1.internalInsightShouldNotUsedByBusiness
    ? insight_1.internalInsightShouldNotUsedByBusiness.register("react-error-boundary", {
        level: insight_1.internalInsightShouldNotUsedByBusiness.EventLevel.Error,
    })
    : [];
// 入口组件
function createEntry(controller, action, entry, setBeforeDestroyListener) {
    var i18n = i18n_1.getI18NInstance();
    var EntryContent = typeof entry === "function" ? entry : entry.component || entry.render;
    EntryContent["displayName"] = "Entry(" + controller + "/" + action + ")";
    var confirmation = null;
    var history = create_history_1.createHistory({
        controller: controller,
        action: action,
        getUserConfirmation: function (message, callback) {
            if (!confirmation) {
                callback(window.confirm(message));
            }
            else {
                confirmation(message, callback);
            }
        },
    });
    return root_1.hot(function TeaEntry() {
        var classPrefix = typeof TEA_CLASS_PREFIX !== "undefined" ? TEA_CLASS_PREFIX : undefined;
        var locale = typeof WEBPACK_BUILD_LOCALE !== "undefined"
            ? WEBPACK_BUILD_LOCALE
            : i18n.language;
        return (react_1.default.createElement(ErrorBoundary, null,
            react_1.default.createElement(i18n_1.I18NProvider, { i18n: i18n },
                react_1.default.createElement(configprovider_1.ConfigProvider, { locale: locale, classPrefix: classPrefix },
                    react_1.default.createElement(history_context_1.HistoryContext.Provider, { value: {
                            history: history,
                            setConfirmation: function (current) { return (confirmation = current); },
                        } },
                        react_1.default.createElement(beforeDestroy_1.BeforeDestroyContext.Provider, { value: {
                                setBeforeDestroyListener: setBeforeDestroyListener,
                            } },
                            react_1.default.createElement(EntryContent, null)))))));
    });
}
var ErrorBoundary = /** @class */ (function (_super) {
    __extends(ErrorBoundary, _super);
    function ErrorBoundary(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { hasError: false };
        return _this;
    }
    ErrorBoundary.getDerivedStateFromError = function (error) {
        return { hasError: true };
    };
    ErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        console.warn(errorInfo);
        pageManager.renderOops("react-error-boundary");
        var message = error.message, stack = error.stack;
        errorBoundaryEvent.push(__assign({}, errorInfo, { message: message || errorInfo.description, stack: stack }));
    };
    ErrorBoundary.prototype.render = function () {
        if (this.state.hasError) {
            return null;
        }
        return this.props.children;
    };
    return ErrorBoundary;
}(react_1.default.Component));
/**
 * 为模块生成渲染和销毁方法
 */
exports.factory = function (controller, action, entry) { return function () {
    // 模块需要实现渲染和销毁两个方法
    var render, destroy;
    // 渲染 DOM，render() 时创建，destory() 时回收
    var container;
    // 模块标识，同时用作 container 的 id
    var moduleKey = controller + "-" + action;
    var currentBeforeListener = null;
    var beforeDestroy = function (beforeDestroyParams) {
        if (typeof currentBeforeListener === "function") {
            return currentBeforeListener(beforeDestroyParams);
        }
    };
    var setBeforeDestroyListener = function (listener) {
        currentBeforeListener = listener;
    };
    // 渲染：路由命中时渲染
    render = function () {
        if (entry === 404) {
            return 404;
        }
        // window.nmc.render 负责把 DOM 创建并放在 #app-area 中，这个 DOM 后续被渲染所用
        window.nmc.render("<div id=\"" + moduleKey + "\" class=\"tea-page-root\"></div>", 
        // 总览 home 特殊处理
        controller === "home" ? "" : controller);
        container = document.querySelector("#" + moduleKey);
        if (container) {
            var Entry = createEntry(controller, action, entry, setBeforeDestroyListener);
            react_dom_1.default.render(react_1.default.createElement(Entry, null), container);
        }
    };
    // 模块：路由切走时销毁
    destroy = function () {
        if (container) {
            react_dom_1.default.unmountComponentAtNode(container);
        }
        container = null;
    };
    return __assign({}, insightFactory(moduleKey, render, destroy, beforeDestroy), { 
        // 导出文档标题（如果已定义）
        title: typeof entry === "object" ? entry.title : null });
}; };
function insightFactory(moduleKey, render, destroy, beforeDestroy) {
    var _a = insight_1.internalInsightShouldNotUsedByBusiness || {}, care = _a.care, register = _a.register, EventLevel = _a.EventLevel;
    function wrapFn(fn, moduleError, message) {
        return care(fn, {
            capture: function (trace) {
                var logMessage = "\u6A21\u5757 " + moduleKey + " " + message + "\uFF1A" + trace.message;
                logTrace_1.logTrace(logMessage, trace);
                moduleError.push({
                    message: logMessage,
                    moduleKey: moduleKey,
                    stack: trace.stack,
                });
                throw trace;
            },
        });
    }
    if (typeof care === "function") {
        // 监控：模块渲染异常
        var moduleRenderError = register("module-render-error", {
            level: EventLevel.Error,
        });
        // 监控：模块销毁异常
        var moduleDestroyError = register("module-destroy-error", {
            level: EventLevel.Error,
        });
        // 监控：beforeDestroy 异常
        var moduleBeforeDestroyError = register("module-before-destroy-error", {
            level: EventLevel.Error,
        });
        // 捕获渲染异常
        render = wrapFn(render, moduleRenderError, "渲染异常");
        // 捕获销毁异常
        destroy = wrapFn(destroy, moduleDestroyError, "销毁异常");
        // 捕获 beforeDestroy 钩子异常
        beforeDestroy = wrapFn(beforeDestroy, moduleBeforeDestroyError, "before Destroy 异常");
    }
    return { render: render, destroy: destroy, beforeDestroy: beforeDestroy };
}
//# sourceMappingURL=data:application/json;base64,