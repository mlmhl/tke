"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var warning_1 = __importDefault(require("warning"));
var history_1 = require("history");
var createTransitionManager_1 = __importDefault(require("history/createTransitionManager"));
/**
 * 利用控制台的 Router 对象创建兼容 React Router 的 history
 *
 * 参考 createBrowserHistory 实现
 * @see https://github.com/ReactTraining/history/blob/master/modules/createBrowserHistory.js
 */
function createHistory(props) {
    var globalHistory = window.history;
    var controller = props.controller, action = props.action, getUserConfirmation = props.getUserConfirmation, _a = props.keyLength, keyLength = _a === void 0 ? 6 : _a;
    var consoleRouter = window.seajs.require("router");
    var consoleRouteRule = "/" + controller + "/" + action + "(/*params)";
    var transitionManager = createTransitionManager_1.default();
    var initialLocation = getDOMLocation(getHistoryState());
    var history = {
        length: globalHistory.length,
        action: "POP",
        location: initialLocation,
        createHref: createHref,
        push: perform("PUSH"),
        replace: perform("REPLACE"),
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen,
    };
    function perform(action) {
        return function (path, state) {
            warning_1.default(!(typeof path === "object" &&
                path.state !== undefined &&
                state !== undefined), "You should avoid providing a 2nd state argument to " + action.toLocaleLowerCase() + " when the 1st " +
                "argument is a location-like object that already has state; it is ignored");
            var location = history_1.createLocation(path, state, createKey(), history.location);
            transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
                if (!ok)
                    return;
                var href = createHref(location);
                var key = location.key, state = location.state;
                // createBrowserHistory 的实现是调用 history.pushState()
                // 这里改为通过控制台路由代理
                muteNextPop = true;
                consoleRouter.navigateWithState(href, false, action === "REPLACE", {
                    key: key,
                    state: state,
                });
                muteNextPop = false;
                setState({ action: action, location: location });
            });
        };
    }
    function go(n) {
        globalHistory.go(n);
    }
    function goBack() {
        go(-1);
    }
    function goForward() {
        go(1);
    }
    var listenerCount = 0;
    function checkRouterListeners(delta) {
        listenerCount += delta;
        if (listenerCount === 1 && delta === 1) {
            // add
            consoleRouter.use(consoleRouteRule, handlePopState);
        }
        else if (listenerCount === 0) {
            // remove
            consoleRouter.unuse(consoleRouteRule);
        }
    }
    function handlePopState() {
        var location = getDOMLocation(getHistoryState());
        handlePop(location);
    }
    var muteNextPop = false;
    function handlePop(location) {
        // push/replace 触发 console router.navigate() 方法
        // 同样会回调 handlePop()
        // 实际上，此时状态已经设置完毕，无需处理
        if (muteNextPop) {
            return;
        }
        var action = "POP";
        setState({ action: action, location: location });
    }
    var isBlocked = false;
    function block(prompt) {
        if (prompt === void 0) { prompt = false; }
        var unblock = transitionManager.setPrompt(prompt);
        if (!isBlocked) {
            checkRouterListeners(1);
            isBlocked = true;
        }
        return function () {
            if (isBlocked) {
                isBlocked = false;
                checkRouterListeners(-1);
            }
            return unblock();
        };
    }
    function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkRouterListeners(1);
        return function () {
            checkRouterListeners(-1);
            unlisten();
        };
    }
    function createHref(location) {
        return history_1.createPath(location);
    }
    function createKey() {
        return Math.random()
            .toString(36)
            .substr(2, keyLength);
    }
    function setState(nextState) {
        if (nextState) {
            Object.assign(history, nextState);
        }
        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
    }
    return history;
}
exports.createHistory = createHistory;
function getHistoryState() {
    try {
        return window.history.state || {};
    }
    catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
    }
}
function getDOMLocation(historyState) {
    var _a = historyState || {}, _b = _a.key, key = _b === void 0 ? undefined : _b, _c = _a.state, state = _c === void 0 ? undefined : _c;
    var _d = window.location, pathname = _d.pathname, search = _d.search, hash = _d.hash;
    var path = pathname + search + hash;
    return history_1.createLocation(path, state, key);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWhpc3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29yZS9oaXN0b3J5L2NyZWF0ZS1oaXN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQThCO0FBQzlCLG1DQVVpQjtBQUNqQiw0RkFFeUM7QUE2QnpDOzs7OztHQUtHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFJLEtBQTZCO0lBQzVELElBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFFN0IsSUFBQSw2QkFBVSxFQUFFLHFCQUFNLEVBQUUsK0NBQW1CLEVBQUUsb0JBQWEsRUFBYixrQ0FBYSxDQUFXO0lBRXpFLElBQU0sYUFBYSxHQUFrQixNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwRSxJQUFNLGdCQUFnQixHQUFHLE1BQUksVUFBVSxTQUFJLE1BQU0sZUFBWSxDQUFDO0lBRTlELElBQU0saUJBQWlCLEdBQUcsaUNBQXVCLEVBQUUsQ0FBQztJQUNwRCxJQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUUxRCxJQUFNLE9BQU8sR0FBRztRQUNkLE1BQU0sRUFBRSxhQUFhLENBQUMsTUFBTTtRQUM1QixNQUFNLEVBQUUsS0FBZTtRQUN2QixRQUFRLEVBQUUsZUFBZTtRQUN6QixVQUFVLFlBQUE7UUFDVixJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNyQixPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUMzQixFQUFFLElBQUE7UUFDRixNQUFNLFFBQUE7UUFDTixTQUFTLFdBQUE7UUFDVCxLQUFLLE9BQUE7UUFDTCxNQUFNLFFBQUE7S0FDUCxDQUFDO0lBRUYsU0FBUyxPQUFPLENBQUMsTUFBYztRQUM3QixPQUFPLFVBQUMsSUFBNEIsRUFBRSxLQUFxQjtZQUN6RCxpQkFBTyxDQUNMLENBQUMsQ0FDQyxPQUFPLElB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QUFDO0tBQ25DO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDViw2REFBNkQ7UUFDN0Qsd0RBQXdEO1FBQ3hELE9BQU8sRUFBRSxDQUFDO0tBQ1g7QUFDSCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsWUFBaUI7SUFDakMsSUFBQSx1QkFBMkQsRUFBekQsV0FBZSxFQUFmLG9DQUFlLEVBQUUsYUFBaUIsRUFBakIsc0NBQXdDLENBQUM7SUFDNUQsSUFBQSxvQkFBNEMsRUFBMUMsc0JBQVEsRUFBRSxrQkFBTSxFQUFFLGNBQXdCLENBQUM7SUFFbkQsSUFBSSxJQUFJLEdBQUcsUUFBUSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFFcEMsT0FBTyx3QkFBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQge1xuICBjcmVhdGVQYXRoLFxuICBjcmVhdGVMb2NhdGlvbixcbiAgQnJvd3Nlckhpc3RvcnlCdWlsZE9wdGlvbnMsXG4gIEhpc3RvcnksXG4gIExvY2F0aW9uU3RhdGUsXG4gIExvY2F0aW9uRGVzY3JpcHRvck9iamVjdCxcbiAgQWN0aW9uLFxuICBMb2NhdGlvbkxpc3RlbmVyLFxuICBMb2NhdGlvbixcbn0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciwge1xuICBQcm9tcHQsXG59IGZyb20gXCJoaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyXCI7XG5cbmludGVyZmFjZSBDb25zb2xlUm91dGVyIHtcbiAgLyoqXG4gICAqIOaOp+WItuWPsOi3r+eUseaWueazlVxuICAgKi9cbiAgbmF2aWdhdGVXaXRoU3RhdGUoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgc2lsZW50OiBib29sZWFuLFxuICAgIHJlcGxhY2VtZW50OiBib29sZWFuLFxuICAgIHN0YXRlOiBhbnlcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICog5rOo5YaM5Yqo5oCB6Lev55SxXG4gICAqL1xuICB1c2UocnVsZTogc3RyaW5nLCBhY3Rpb246IEZ1bmN0aW9uKTogdm9pZDtcblxuICAvKipcbiAgICog5Y+W5raI5rOo5YaM5Yqo5oCB6Lev55SxXG4gICAqL1xuICB1bnVzZShydWxlOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlYUhpc3RvcnlCdWlsZE9wdGlvbnMgZXh0ZW5kcyBCcm93c2VySGlzdG9yeUJ1aWxkT3B0aW9ucyB7XG4gIGNvbnRyb2xsZXI/OiBzdHJpbmc7XG4gIGFjdGlvbj86IHN0cmluZztcbn1cblxuLyoqXG4gKiDliKnnlKjmjqfliLblj7DnmoQgUm91dGVyIOWvueixoeWIm+W7uuWFvOWuuSBSZWFjdCBSb3V0ZXIg55qEIGhpc3RvcnlcbiAqXG4gKiDlj4LogIMgY3JlYXRlQnJvd3Nlckhpc3Rvcnkg5a6e546wXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvYmxvYi9tYXN0ZXIvbW9kdWxlcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGlzdG9yeTxTPihwcm9wczogVGVhSGlzdG9yeUJ1aWxkT3B0aW9ucyk6IEhpc3Rvcnk8Uz4ge1xuICBjb25zdCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgY29uc3QgeyBjb250cm9sbGVyLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGtleUxlbmd0aCA9IDYgfSA9IHByb3BzO1xuXG4gIGNvbnN0IGNvbnNvbGVSb3V0ZXI6IENvbnNvbGVSb3V0ZXIgPSB3aW5kb3cuc2VhanMucmVxdWlyZShcInJvdXRlclwiKTtcbiAgY29uc3QgY29uc29sZVJvdXRlUnVsZSA9IGAvJHtjb250cm9sbGVyfS8ke2FjdGlvbn0oLypwYXJhbXMpYDtcblxuICBjb25zdCB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG4gIGNvbnN0IGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcblxuICBjb25zdCBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiBcIlBPUFwiIGFzIEFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcGVyZm9ybShcIlBVU0hcIiksXG4gICAgcmVwbGFjZTogcGVyZm9ybShcIlJFUExBQ0VcIiksXG4gICAgZ28sXG4gICAgZ29CYWNrLFxuICAgIGdvRm9yd2FyZCxcbiAgICBibG9jayxcbiAgICBsaXN0ZW4sXG4gIH07XG5cbiAgZnVuY3Rpb24gcGVyZm9ybShhY3Rpb246IEFjdGlvbikge1xuICAgIHJldHVybiAocGF0aDogc3RyaW5nIHwgTG9jYXRpb25TdGF0ZSwgc3RhdGU/OiBMb2NhdGlvblN0YXRlKSA9PiB7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICAhKFxuICAgICAgICAgIHR5cGVvZiBwYXRoID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgc3RhdGUgIT09IHVuZGVmaW5lZFxuICAgICAgICApLFxuICAgICAgICBgWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gJHthY3Rpb24udG9Mb2NhbGVMb3dlckNhc2UoKX0gd2hlbiB0aGUgMXN0IGAgK1xuICAgICAgICAgIFwiYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkXCJcbiAgICAgICk7XG4gICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgICBwYXRoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgY3JlYXRlS2V5KCksXG4gICAgICAgIGhpc3RvcnkubG9jYXRpb25cbiAgICAgICk7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8oXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICAgIG9rID0+IHtcbiAgICAgICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgICAgICBjb25zdCBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICAgICAgY29uc3QgeyBrZXksIHN0YXRlIH0gPSBsb2NhdGlvbjtcblxuICAgICAgICAgIC8vIGNyZWF0ZUJyb3dzZXJIaXN0b3J5IOeahOWunueOsOaYr+iwg+eUqCBoaXN0b3J5LnB1c2hTdGF0ZSgpXG4gICAgICAgICAgLy8g6L+Z6YeM5pS55Li66YCa6L+H5o6n5Yi25Y+w6Lev55Sx5Luj55CGXG4gICAgICAgICAgbXV0ZU5leHRQb3AgPSB0cnVlO1xuICAgICAgICAgIGNvbnNvbGVSb3V0ZXIubmF2aWdhdGVXaXRoU3RhdGUoaHJlZiwgZmFsc2UsIGFjdGlvbiA9PT0gXCJSRVBMQUNFXCIsIHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG11dGVOZXh0UG9wID0gZmFsc2U7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbiwgbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG46IG51bWJlcikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgbGV0IGxpc3RlbmVyQ291bnQgPSAwO1xuICBmdW5jdGlvbiBjaGVja1JvdXRlckxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgLy8gYWRkXG4gICAgICBjb25zb2xlUm91dGVyLnVzZShjb25zb2xlUm91dGVSdWxlLCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAvLyByZW1vdmVcbiAgICAgIGNvbnNvbGVSb3V0ZXIudW51c2UoY29uc29sZVJvdXRlUnVsZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoKSB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGxldCBtdXRlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgICAvLyBwdXNoL3JlcGxhY2Ug6Kem5Y+RIGNvbnNvbGUgcm91dGVyLm5hdmlnYXRlKCkg5pa55rOVXG4gICAgLy8g5ZCM5qC35Lya5Zue6LCDIGhhbmRsZVBvcCgpXG4gICAgLy8g5a6e6ZmF5LiK77yM5q2k5pe254q25oCB5bey57uP6K6+572u5a6M5q+V77yM5peg6ZyA5aSE55CGXG4gICAgaWYgKG11dGVOZXh0UG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFjdGlvbiA9IFwiUE9QXCI7XG4gICAgc2V0U3RhdGUoeyBhY3Rpb24sIGxvY2F0aW9uIH0pO1xuICB9XG5cbiAgbGV0IGlzQmxvY2tlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBibG9jayhwcm9tcHQ6IFByb21wdCA9IGZhbHNlKSB7XG4gICAgY29uc3QgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrUm91dGVyTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tSb3V0ZXJMaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXI6IExvY2F0aW9uTGlzdGVuZXIpIHtcbiAgICBjb25zdCB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja1JvdXRlckxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjaGVja1JvdXRlckxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uOiBMb2NhdGlvbkRlc2NyaXB0b3JPYmplY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKClcbiAgICAgIC50b1N0cmluZygzNilcbiAgICAgIC5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZT86IFBpY2s8SGlzdG9yeSwgXCJhY3Rpb25cIiB8IFwibG9jYXRpb25cIj4pIHtcbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGhpc3RvcnksIG5leHRTdGF0ZSk7XG4gICAgfVxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBoaXN0b3J5IGFzIEhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlOiBhbnkpIHtcbiAgY29uc3QgeyBrZXkgPSB1bmRlZmluZWQsIHN0YXRlID0gdW5kZWZpbmVkIH0gPSBoaXN0b3J5U3RhdGUgfHwge307XG4gIGNvbnN0IHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9ID0gd2luZG93LmxvY2F0aW9uO1xuXG4gIGxldCBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbn1cbiJdfQ==