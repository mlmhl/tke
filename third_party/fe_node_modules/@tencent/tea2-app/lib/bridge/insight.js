"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var insight_1 = require("../core/insight");
var frequencyLimiter_1 = require("../helpers/frequencyLimiter");
var hottagEvent = insight_1.internalInsightShouldNotUsedByBusiness &&
    insight_1.internalInsightShouldNotUsedByBusiness.register("hottag", {
        level: insight_1.internalInsightShouldNotUsedByBusiness.EventLevel.Info,
    });
var imageLoadErrorEvent = insight_1.internalInsightShouldNotUsedByBusiness &&
    insight_1.internalInsightShouldNotUsedByBusiness.register("image-load-error", {
        level: insight_1.internalInsightShouldNotUsedByBusiness.EventLevel.Error,
    });
var hotTagLimiter = new frequencyLimiter_1.FrequencyLimiter({ name: "insight.reportHotTag" });
var statLimiter = new frequencyLimiter_1.FrequencyLimiter({ name: "insight.stat" });
var imageErrorLimiter = new frequencyLimiter_1.FrequencyLimiter({
    name: "insight.reportImageError",
});
exports.insight = {
    /**
     * 上报点击流
     * @param tag 点击标识
     */
    reportHotTag: function (tag) {
        if (typeof insight_1.internalInsightShouldNotUsedByBusiness !== "object") {
            return;
        }
        if (!tag || !hottagEvent) {
            return;
        }
        hotTagLimiter.exec(function () { return hottagEvent.push({ hottag: String(tag) }, true); });
    },
    /**
     * 上报图片加载错误
     * @param {string} imageUrl 图片 url
     */
    reportImageLoadError: function (imageUrl) {
        if (typeof insight_1.internalInsightShouldNotUsedByBusiness !== "object") {
            return;
        }
        if (!imageUrl || !imageLoadErrorEvent) {
            return;
        }
        imageErrorLimiter.exec(function () {
            return imageLoadErrorEvent.push({ url: String(imageUrl) }, true);
        });
    },
    /**
     * 自定义上报，如果 ns 和 event 参数不正确，会扔出异常
     *
     * 控制台在预览模式或开发模式不会上报，如果要验证效果，请在手动添加标识到 localStorage:
     *
     * ```js
     * localStorage.debugInsight = true
     * ```
     *
     * 然后刷新页面。
     *
     * @example
     *
      ```js
      import { app } from '@tea/app';
  
      app.insight.stat({
        ns: 'cvm',
        event: 'restart',
        stringFields: {
          instance: 'ins-1d7x8C3s'
        },
        integerFields: {
          cost: 1000
        }
      });
    ```
     */
    stat: function (_a) {
        var ns = _a.ns, event = _a.event, integerFields = _a.integerFields, stringFields = _a.stringFields;
        if (typeof insight_1.internalInsightShouldNotUsedByBusiness !== "object") {
            return;
        }
        if (!ns)
            throw new Error("ns 不能为空");
        if (!/^[a-zA-Z1-9\/]+$/.test(ns)) {
            throw new Error("ns 只允许包括字母、数字、斜杠");
        }
        else if (/^\/|\/$/.test(ns)) {
            throw new Error("ns 使用的斜杠不允许出现在首尾");
        }
        if (!event)
            throw new Error("event 不能为空");
        if (!/^[a-zA-Z1-9\-]+$/.test(event)) {
            throw new Error("event 只允许包括字母、数字、横杠");
        }
        else if (/^-|-$/.test(event)) {
            throw new Error("event 使用的横杠不允许出现在首尾");
        }
        statLimiter.exec(function () {
            var e_1, _a, e_2, _b;
            var stat = [ns, event].join(":");
            var data = {};
            var totalLimit = 20;
            if (integerFields) {
                try {
                    for (var _c = __values(Object.entries(integerFields)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var _e = __read(_d.value, 2), field = _e[0], value = _e[1];
                        if (totalLimit >= 0 && typeof value === "number" && !isNaN(value)) {
                            totalLimit--;
                            data["int_" + field] = Math.round(value);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (stringFields) {
                try {
                    for (var _f = __values(Object.entries(stringFields)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var _h = __read(_g.value, 2), field = _h[0], value = _h[1];
                        if (totalLimit >= 0 && typeof value === "string") {
                            totalLimit--;
                            data["str_" + field] = value.slice(0, 4096);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            insight_1.internalInsightShouldNotUsedByBusiness.stat(stat, data);
        });
    },
};
//# sourceMappingURL=data:application/json;base64,