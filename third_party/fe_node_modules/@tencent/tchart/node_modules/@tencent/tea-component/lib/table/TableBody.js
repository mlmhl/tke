"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var text_1 = require("../text");
var TableBox_1 = require("./TableBox");
var get_row_key_from_record_key_1 = require("./util/get-row-key-from-record-key");
var use_middleware_1 = require("./util/use-middleware");
var transition_1 = require("../transition");
// 表格组件核心实现
exports.TableBody = react_1.forwardRef(function TableBody(_a, ref) {
    var columns = _a.columns, records = _a.records, addons = _a.addons, recordKey = _a.recordKey, rowClassName = _a.rowClassName, rowDisabled = _a.rowDisabled, topTip = _a.topTip, bottomTip = _a.bottomTip, boxStyle = _a.boxStyle, disableHoverHighlight = _a.disableHoverHighlight, _b = _a.onScrollCapture, onScrollCapture = _b === void 0 ? function () { return null; } : _b;
    // 键值的获取方式
    var getRowKey = get_row_key_from_record_key_1.getRowKeyfromRecordKey(recordKey);
    // 列渲染：(record, column) => { props, children }
    var renderColumn = use_middleware_1.useMiddleware(addons, "onInjectColumn")(function (record, rowKey, recordIndex, column) {
        var children = null;
        if (isFunction(column.render)) {
            children = column.render(record, rowKey, recordIndex, column);
        }
        else if (typeof record === "object" && record) {
            children = record[column.key];
        }
        if (typeof children === "undefined") {
            // never render undefined
            children = null;
        }
        if (typeof children !== "object") {
            children = react_1.default.createElement(text_1.Text, { overflow: true }, children);
        }
        return {
            props: {},
            children: children,
        };
    });
    // 行渲染：(columns, record) => { prepends, row, appends }
    var renderRow = use_middleware_1.useMiddleware(addons, "onInjectRow")(function (record, rowKey, recordIndex, columns) {
        var className = classnames_1.default(isFunction(rowClassName) ? rowClassName(record) : null, isFunction(rowDisabled) ? { "is-disabled": rowDisabled(record) } : null, { "no-hover": !!disableHoverHighlight });
        return {
            prepends: [],
            row: (react_1.default.createElement("tr", { key: rowKey, className: className || null }, columns.map(function (column) {
                var _a = renderColumn(record, rowKey, recordIndex, column), props = _a.props, children = _a.children;
                return (react_1.default.createElement(text_1.Text, tslib_1.__assign({ key: column.key, parent: "td" }, props, { align: column.align }),
                    react_1.default.createElement("div", null, children)));
            }))),
            appends: [],
        };
    });
    // 记录渲染：(record) => <tr>[]
    var renderRecord = function (record, recordIndex) {
        // 生成 rowKey
        var rowKey = getRowKey(record, recordIndex);
        var _a = renderRow(record, rowKey, recordIndex, columns), prepends = _a.prepends, row = _a.row, appends = _a.appends;
        return tslib_1.__spread(prepends, [row], appends).filter(Boolean);
    };
    var renderBody = use_middleware_1.useMiddleware(addons, "onInjectBody")(function (records, columns, topTip, bottomTip) { return (react_1.default.createElement("div", { className: "tea-table__body", ref: ref, onScrollCapture: onScrollCapture },
        react_1.default.createElement(TableBox_1.TableBox, { columns: columns, style: boxStyle },
            react_1.default.createElement("tbody", null,
                react_1.default.createElement(transition_1.SlideTransition, { in: Boolean(topTip), exit: false },
                    react_1.default.createElement("tr", { className: "tea-table__tr--blank-new" },
                        react_1.default.createElement("td", { colSpan: columns.length }, topTip))),
                (records || []).map(renderRecord),
                react_1.default.createElement(transition_1.SlideTransition, { in: Boolean(bottomTip), exit: false },
                    react_1.default.createElement("tr", { className: "tea-table__tr--blank-new" },
                        react_1.default.createElement("td", { colSpan: columns.length }, bottomTip))))))); });
    return renderBody(records, columns, topTip, bottomTip);
});
function isFunction(target) {
    return typeof target === "function";
}
//# sourceMappingURL=TableBody.js.map