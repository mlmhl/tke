"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable */
var react_1 = tslib_1.__importDefault(require("react"));
var TagInput_1 = require("./TagInput");
var TagSearchBox_1 = require("./TagSearchBox");
var i18n_1 = require("../i18n");
var bubble_1 = require("../bubble");
var icon_1 = require("../icon");
var keys = {
    "8": "backspace",
    "13": "enter",
    "37": "left",
    "38": "up",
    "39": "right",
    "40": "down"
};
var Tag = /** @class */ (function (_super) {
    tslib_1.__extends(Tag, _super);
    function Tag() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            inEditing: false
        };
        _this.handleTagClick = function (e, pos) {
            _this.props.dispatchTagEvent("click", pos);
            e.stopPropagation();
        };
        _this.handleDelete = function (e) {
            e.stopPropagation();
            _this.props.dispatchTagEvent("del");
        };
        _this.handleKeyDown = function (e) {
            if (!keys[e.keyCode])
                return;
            e.preventDefault();
            switch (keys[e.keyCode]) {
                case "tab":
                case "enter":
                    _this.props.dispatchTagEvent("click", "value");
                    break;
                case "backspace":
                    _this.props.dispatchTagEvent("del", "keyboard");
                    break;
            }
        };
        return _this;
    }
    Tag.prototype.focusTag = function () {
        this["input-inside"].focusInput();
    };
    Tag.prototype.focusInput = function () {
        this["input"].focusInput();
    };
    Tag.prototype.resetInput = function () {
        this["input-inside"].resetInput();
    };
    Tag.prototype.setInputValue = function (value, callback) {
        this["input"].setInputValue(value, callback);
    };
    Tag.prototype.getInputValue = function () {
        return this["input"].getInputValue();
    };
    Tag.prototype.addTagByInputValue = function () {
        return this["input"].addTagByInputValue();
    };
    Tag.prototype.addTagByEditInputValue = function () {
        if (!this["input-inside"])
            return;
        return this["input-inside"].addTagByInputValue();
    };
    Tag.prototype.setInfo = function (info, callback) {
        return this["input"].setInfo(info, callback);
    };
    Tag.prototype.moveToEnd = function () {
        return this["input"].moveToEnd();
    };
    Tag.prototype.getInfo = function () {
        var _a = this.props, attr = _a.attr, values = _a.values;
        return { attr: attr, values: values };
    };
    Tag.prototype.edit = function (pos) {
        this.setState({ inEditing: true });
        var input = this["input-inside"];
        input.setInfo(this.getInfo(), function () {
            if (pos === "attr") {
                return input.selectAttr();
            }
            return input.selectValue();
        });
    };
    Tag.prototype.editDone = function () {
        this.setState({ inEditing: false });
    };
    Tag.prototype.render = function () {
        var _this = this;
        var inEditing = this.state.inEditing;
        var _a = this.props, t = _a.t, active = _a.active, attr = _a.attr, values = _a.values, dispatchTagEvent = _a.dispatchTagEvent, attributes = _a.attributes, focused = _a.focused, maxWidth = _a.maxWidth;
        var attrStr = attr ? attr.name : "";
        if (attr && attr.name) {
            attrStr += ": ";
        }
        var valueStr = values.map(function (item) { return item.name; }).join(" | ");
        var removeable = attr && "removeable" in attr ? attr.removeable : true;
        return (react_1.default.createElement("div", { style: {
                display: "inline-block",
                minHeight: 20,
                width: inEditing && !active ? 0 : "auto",
                position: "relative",
                verticalAlign: "inherit"
            } },
            react_1.default.createElement(bubble_1.Bubble, { content: active ? t.tagSearchBoxEditingTips : null },
                react_1.default.createElement("div", { className: "tea-tag", ref: function (div) { return (_this["content"] = div); }, style: {
                        display: inEditing ? "none" : undefined,
                        paddingRight: removeable ? undefined : 8
                    }, onClick: this.handleTagClick },
                    react_1.default.createElement("span", { onClick: function (e) { return _this.handleTagClick(e, "attr"); } }, attrStr),
                    react_1.default.createElement("span", { onClick: function (e) { return _this.handleTagClick(e, "value"); } }, valueStr),
                    active && removeable && (react_1.default.createElement(icon_1.Icon, { type: "dismiss", onClick: this.handleDelete })))),
            react_1.default.createElement(TagInput_1.TagInput, { type: "edit", hidden: !inEditing, maxWidth: maxWidth, handleKeyDown: this.handleKeyDown, active: active, ref: function (input) { return (_this["input-inside"] = input); }, attributes: attributes, dispatchTagEvent: dispatchTagEvent, isFocused: focused === TagSearchBox_1.FocusPosType.INPUT_EDIT })));
    };
    Tag = tslib_1.__decorate([
        i18n_1.withTranslation
    ], Tag);
    return Tag;
}(react_1.default.Component));
exports.Tag = Tag;
//# sourceMappingURL=Tag.js.map