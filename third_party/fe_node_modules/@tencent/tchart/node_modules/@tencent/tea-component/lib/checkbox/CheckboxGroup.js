"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var invariant_1 = tslib_1.__importDefault(require("invariant"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var controlled_1 = require("../form/controlled");
var check_1 = require("../check");
/**
 * 单选选项组，里面可以嵌套 <Radio />
 */
function CheckboxGroup(props) {
    var _a = controlled_1.useDefaultValue(props, []), value = _a.value, onChange = _a.onChange, disabled = _a.disabled, layout = _a.layout, className = _a.className, style = _a.style, children = _a.children;
    var checkedSet = new Set(value || []);
    var context = {
        inject: function (checkProps) {
            // 只为 checkbox 提供
            if (checkProps.type !== "checkbox") {
                return checkProps;
            }
            // 如果已经受控，则不注入
            if (typeof checkProps.value === "boolean") {
                return checkProps;
            }
            var checkName = checkProps.name;
            if (typeof checkName === "undefined") {
                invariant_1.default(false, '<Checkbox> managed by <CheckboxGroup> must include the "name" prop');
                return checkProps;
            }
            return tslib_1.__assign({}, checkProps, { value: checkedSet.has(checkName), disabled: checkProps.disabled || disabled, display: layout === "column" ? "block" : "inline", onChange: function (checked, context) {
                    // 支持 checkbox 上的 onChange 处理时阻止默认的处理行为
                    if (typeof checkProps.onChange === "function") {
                        checkProps.onChange(checked, context);
                        if (context.event.defaultPrevented) {
                            return;
                        }
                    }
                    if (typeof onChange === "function") {
                        var newValue = checked
                            ? tslib_1.__spread(value, [checkName]) : (checkedSet.delete(checkName), Array.from(checkedSet));
                        onChange(newValue, context);
                    }
                } });
        },
    };
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-form-check-group", className), style: style },
        react_1.default.createElement(check_1.CheckContext.Provider, { value: context }, children)));
}
exports.CheckboxGroup = CheckboxGroup;
//# sourceMappingURL=CheckboxGroup.js.map