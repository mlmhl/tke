"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var moment_1 = tslib_1.__importStar(require("moment"));
var BaseTable_1 = tslib_1.__importStar(require("./BaseTable"));
var i18n_1 = require("../../i18n");
function YearTable(_a) {
    var current = _a.current, _b = _a.onCurrentChange, onCurrentChange = _b === void 0 ? function () { return null; } : _b, range = _a.range, _c = _a.onSelect, onSelect = _c === void 0 ? function () { return null; } : _c, _d = _a.cellStatus, cellStatus = _d === void 0 ? function () { return BaseTable_1.CellStatus.Common; } : _d;
    var t = i18n_1.useTranslation();
    var year = current.year();
    var start = year - (year % 20);
    var end = start + 20 - 1;
    // 5 * 4
    function genTable() {
        return "abcde".split("").map(function (_, i) {
            return Array(4)
                .fill(0)
                .map(function (_, j) { return i * 4 + j + start; });
        });
    }
    function renderYear() {
        return start + "-" + end;
    }
    var _e = tslib_1.__read(range || [null, null], 2), rangeMin = _e[0], rangeMax = _e[1];
    function isValid(date) {
        if (moment_1.isMoment(rangeMin) && rangeMin.isAfter(date, "year")) {
            return false;
        }
        if (moment_1.isMoment(rangeMax) && rangeMax.isBefore(date, "year")) {
            return false;
        }
        return true;
    }
    return (react_1.default.createElement(BaseTable_1.default, { type: "year", caption: renderYear(), jumperOptions: {
            onNext: function () { return onCurrentChange(moment_1.default(current).add(20, "year")); },
            onPrev: function () { return onCurrentChange(moment_1.default(current).subtract(20, "year")); },
            onCurrent: function () { return onCurrentChange(moment_1.default()); },
            isCurrent: moment_1.default().year() >= start && moment_1.default().year() <= end,
            nextDisabled: moment_1.isMoment(rangeMax) && rangeMax.year() <= end,
            prevDisabled: moment_1.isMoment(rangeMin) && rangeMin.year() >= start,
            nextTitle: t.nextTwentyYears,
            prevTitle: t.prevTwentyYears,
            curTitle: t.curTwentyYears,
        } }, genTable().map(function (row, index) { return (react_1.default.createElement(BaseTable_1.default.Row, { key: index }, row.map(function (year) {
        var y = moment_1.default({ year: year });
        return (react_1.default.createElement(BaseTable_1.default.Cell, { key: year, name: y.format("YYYY"), value: y, onSelect: onSelect, isNow: y.isSame(moment_1.default(), "year"), status: cellStatus(y), disabled: !isValid(y) }));
    }))); })));
}
exports.YearTable = YearTable;
//# sourceMappingURL=YearTable.js.map