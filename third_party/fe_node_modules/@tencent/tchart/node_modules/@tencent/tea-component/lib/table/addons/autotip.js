"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var tips_1 = require("../../tips");
var i18n_1 = require("../../i18n");
/**
 * 给定表格数据的状态，自动提供合适的 topTip 来显示该状态
 */
function autotip(options) {
    var isFound = options.isFound, isLoading = options.isLoading, isError = options.isError, foundText = options.foundText, emptyText = options.emptyText, foundKeyword = options.foundKeyword, foundCount = options.foundCount, tipProps = tslib_1.__rest(options, ["isFound", "isLoading", "isError", "foundText", "emptyText", "foundKeyword", "foundCount"]);
    var tableFoundText = foundText;
    return {
        onInjectProps: function (props) {
            // 根据数据情况、加载情况、关键字情况使用不同的 Tips 渲染
            var topTip = null;
            var tipStatus = null;
            var records = props.records || [];
            var recordCount = typeof foundCount === "undefined" ? records.length : foundCount;
            if (isLoading) {
                tipStatus = "loading";
            }
            else if (isError) {
                tipStatus = "error";
            }
            else if (isFound) {
                tipStatus = "found";
                tableFoundText = getDefaultTableFoundText({
                    foundText: foundText,
                    foundKeyword: foundKeyword,
                    recordCount: recordCount,
                });
            }
            else if (recordCount === 0) {
                tipStatus = "empty";
            }
            if (tipStatus) {
                topTip = (react_1.default.createElement(tips_1.StatusTip, tslib_1.__assign({ status: tipStatus, foundText: tableFoundText, emptyText: emptyText }, tipProps)));
            }
            return tslib_1.__assign({}, props, { topTip: topTip });
        },
    };
}
exports.autotip = autotip;
function getDefaultTableFoundText(_a) {
    var foundText = _a.foundText, foundKeyword = _a.foundKeyword, recordCount = _a.recordCount;
    var t = i18n_1.getTranslation();
    if (foundText) {
        return foundText;
    }
    if (foundKeyword) {
        if (recordCount === 0) {
            return t.foundNothingWithKeyword(foundKeyword);
        }
        // eslint-disable-next-line no-param-reassign
        foundKeyword =
            foundKeyword.slice(0, 20) + (foundKeyword.length > 20 ? "..." : "");
        return t.foundManyTextWithKeyword(foundKeyword, recordCount);
    }
    return t.foundManyText(recordCount);
}
/**
 * 从 Tea v1 的 SmartTips.render() 参数构造成新的 autotip 插件
 */
autotip.fromLegacyState = function (_a) {
    var enableLoading = _a.enableLoading, fetcher = _a.fetcher, query = _a.query, onClearSearch = _a.onClearSearch, onRetry = _a.onRetry, emptyTips = _a.emptyTips;
    var search = query && query.search;
    return autotip({
        isLoading: (enableLoading !== false || search) && fetcher.loading,
        isError: fetcher.fetchState === "Failed",
        foundKeyword: search,
        onClear: onClearSearch,
        onRetry: onRetry,
        emptyText: emptyTips,
    });
};
//# sourceMappingURL=autotip.js.map