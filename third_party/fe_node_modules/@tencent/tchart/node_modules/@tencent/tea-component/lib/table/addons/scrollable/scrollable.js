"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var ScrollableTable_1 = require("./ScrollableTable");
/**
 * 支持表格内容区域滚动
 *
 * 如果遇到无法滚动情况，请尝试将该插件置于 Table 插件配置组最前
 *
```js
<Table
  records={records}
  columns={columns}
  addons={[scrollable({ maxHeight: 144 })]}
/>
```
 */
function scrollable(options) {
    var minHeight = options.minHeight, maxHeight = options.maxHeight, _a = options.scrollHeightFactor, scrollHeightFactor = _a === void 0 ? function (props) { return [props.records.length]; } : _a, _b = options.onScrollBottom, onScrollBottom = _b === void 0 ? function () { return null; } : _b, minWidth = options.minWidth;
    return {
        onInjectProps: function (props) { return (tslib_1.__assign({}, props, { boxStyle: { minWidth: minWidth } })); },
        /**
         * 对 div.tea-table 进行注入，提供滚动上下文
         */
        onInjectTable: function (render) { return function (props) {
            var table = render(props);
            return (react_1.default.createElement(ScrollableTable_1.ScrollableTable, { scrollHeightFactor: scrollHeightFactor(props), onScrollBottom: onScrollBottom, table: table }));
        }; },
        /**
         * 对 div.tea-table__body 进行注入，提供 bodyRef 用于检测滚动状态变化
         */
        onInjectBody: function (render) { return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var body = render.apply(void 0, tslib_1.__spread(args));
            return (react_1.default.createElement(ScrollableTable_1.ScrollableTableBody, { body: body, style: { maxHeight: maxHeight, minHeight: minHeight } }));
        }; },
        /**
         * 对 div.tea-table__head 进行注入，根据滚动状态决定要不要使用 padding
         */
        onInjectHead: function (render) { return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var head = render.apply(void 0, tslib_1.__spread(args));
            return react_1.default.createElement(ScrollableTable_1.ScrollableTableHead, { head: head });
        }; },
    };
}
exports.scrollable = scrollable;
//# sourceMappingURL=scrollable.js.map