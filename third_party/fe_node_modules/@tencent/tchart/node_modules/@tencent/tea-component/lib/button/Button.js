"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var tooltip_1 = require("../tooltip");
var icon_1 = require("../icon");
var forward_ref_with_statics_1 = require("../_util/forward-ref-with-statics");
exports.Button = forward_ref_with_statics_1.forwardRefWithStatics(function (props, ref) {
    var disabled = props.disabled, _loading = props.loading, _icon = props.icon, _type = props.type, className = props.className, style = props.style, onClick = props.onClick, children = props.children, tooltip = props.tooltip, htmlType = props.htmlType, buttonProps = tslib_1.__rest(props, ["disabled", "loading", "icon", "type", "className", "style", "onClick", "children", "tooltip", "htmlType"]);
    var _a = tslib_1.__read([_loading, _icon, _type], 3), loading = _a[0], icon = _a[1], type = _a[2];
    // 指定了图标的话，
    if (!type) {
        type = icon ? "icon" : "weak";
    }
    // 只有下面三种类型的按钮支持 loading
    if (["primary", "weak", "pay"].indexOf(type) === -1 &&
        typeof loading !== "undefined") {
        loading = false;
    }
    // 计算类名
    var btnClassName = "tea-btn";
    var classList = ["tea-btn"];
    // 类型类名
    if (type !== "primary") {
        classList.push(btnClassName + "--" + type);
    }
    // 状态类名
    classList.push({
        "is-disabled": disabled,
        "is-loading": loading,
    });
    // 用户自定义类名
    if (className) {
        classList.push(className);
    }
    // loading 态的按钮，规范是只有一个 loading 图标
    if (loading) {
        icon = "loading";
    }
    /* eslint-disable react/button-has-type */
    var button = (react_1.default.createElement("button", tslib_1.__assign({ ref: ref, className: classnames_1.default.apply(void 0, tslib_1.__spread(classList)), onClick: (!disabled && !loading && onClick) || null, style: style || {}, type: htmlType, disabled: disabled }, buttonProps), icon ? react_1.default.createElement(icon_1.Icon, { type: icon }) : children));
    /* eslint-enable react/button-has-type */
    if (tooltip) {
        button = react_1.default.createElement(tooltip_1.Tooltip, { title: tooltip }, button);
    }
    return button;
}, {
    defaultLabelAlign: "middle",
});
//# sourceMappingURL=Button.js.map