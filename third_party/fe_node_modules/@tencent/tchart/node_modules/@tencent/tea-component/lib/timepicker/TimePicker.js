"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var moment_1 = tslib_1.__importStar(require("moment"));
var CalendarPart_1 = tslib_1.__importDefault(require("../calendar/CalendarPart"));
var controlled_1 = require("../form/controlled");
var input_1 = require("../input");
var TimeTable_1 = require("./TimeTable");
var button_1 = require("../button");
var i18n_1 = require("../i18n");
var dropdown_1 = require("../dropdown");
var util_1 = require("./util");
var with_statics_1 = require("../_util/with-statics");
var TimeRangePicker_1 = require("./TimeRangePicker");
var use_default_1 = require("../_util/use-default");
var Popover_1 = require("../popover/Popover");
var util_2 = require("../datepicker/util");
var Keys = {
    "13": "enter",
    "27": "esc",
};
exports.TimePicker = with_statics_1.withStatics(function TimePicker(props) {
    var t = i18n_1.useTranslation(moment_1.default);
    var _a = controlled_1.useDefaultValue(props), value = _a.value, onChange = _a.onChange, _b = _a.format, format = _b === void 0 ? "HH:mm:ss" : _b, _c = _a.placeholder, placeholder = _c === void 0 ? t.selectTime : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.hourStep, hourStep = _e === void 0 ? 1 : _e, _f = _a.minuteStep, minuteStep = _f === void 0 ? 1 : _f, _g = _a.secondStep, secondStep = _g === void 0 ? 1 : _g, _h = _a.defaultOpen, defaultOpen = _h === void 0 ? false : _h, open = _a.open, _j = _a.onOpenChange, onOpenChange = _j === void 0 ? function () { return null; } : _j, _k = _a.placement, placement = _k === void 0 ? "bottom-start" : _k, _l = _a.placementOffset, placementOffset = _l === void 0 ? 5 : _l, _m = _a.closeOnScroll, closeOnScroll = _m === void 0 ? true : _m, className = _a.className, style = _a.style;
    var _o = tslib_1.__read(react_1.useState(value), 2), curValue = _o[0], setCurValue = _o[1];
    var _p = tslib_1.__read(use_default_1.useDefault(open, defaultOpen, onOpenChange), 2), active = _p[0], setActive = _p[1];
    var _q = tslib_1.__read(react_1.useState(null), 2), bubble = _q[0], setBubble = _q[1];
    var inputRef = react_1.useRef(null);
    var getInputValue = react_1.useCallback(function (value) {
        return moment_1.isMoment(value) ? value.locale(t.locale).format(format) : "";
    }, [t.locale, format]);
    var _r = tslib_1.__read(react_1.useState(getInputValue(curValue)), 2), inputValue = _r[0], setInputValue = _r[1];
    react_1.useEffect(function () {
        setCurValue(value);
        setInputValue(getInputValue(value));
    }, [format, getInputValue, value]);
    function handleInputChange(content) {
        setInputValue(content);
        var value = moment_1.default(content, format, true);
        // 格式校验
        if (!value.isValid()) {
            setBubble(t.invalidFormat(format));
            return;
        }
        var _a = util_1.getHourMinuteSecond(value), hour = _a.hour, minute = _a.minute, second = _a.second;
        var _b = util_1.genShowHourMinuteSecond(format), showHour = _b.showHour, showMinute = _b.showMinute, showSecond = _b.showSecond;
        // 范围校验
        if ((showHour && util_1.getDisabledHours(props).includes(hour)) ||
            (showMinute && util_1.getDisabledMinutes(hour, props).includes(minute)) ||
            (showSecond && util_1.getDisabledSeconds(hour, minute, props).includes(second))) {
            setBubble(t.invalidTime);
            return;
        }
        // 步长校验
        if ((showHour && hour % hourStep) ||
            (showMinute && minute % minuteStep) ||
            (showSecond && second % secondStep)) {
            setBubble(t.invalidTime);
            return;
        }
        setCurValue(value);
        setBubble(null);
    }
    function handleKeyDown(event) {
        switch (Keys[event.keyCode]) {
            case "enter":
                if (!bubble) {
                    handleOk(event);
                }
                break;
            case "esc":
                handleClose();
                break;
        }
    }
    function handleSelectChange(value) {
        setBubble(null);
        setInputValue(getInputValue(value));
        setCurValue(value);
    }
    function handleOk(event) {
        onChange(curValue, { event: event });
        handleClose();
    }
    function handleOpen() {
        if (disabled) {
            return;
        }
        setActive(true);
    }
    function handleClose() {
        setInputValue(getInputValue(value));
        setActive(false);
        setBubble(null);
        inputRef.current.blur();
    }
    return (react_1.default.createElement(Popover_1.Popover, { trigger: [
            util_2.DatePickerTrigger,
            { onOpen: handleOpen, onClose: handleClose },
        ], visible: active, onVisibleChange: setActive, placement: placement, placementOffset: placementOffset, closeOnScroll: closeOnScroll, overlay: react_1.default.createElement(dropdown_1.DropdownBox, null,
            react_1.default.createElement(CalendarPart_1.default.Panel, { timeMode: true },
                react_1.default.createElement(CalendarPart_1.default.Body, null,
                    react_1.default.createElement(TimeTable_1.TimeTable, tslib_1.__assign({}, props, { value: curValue, onChange: handleSelectChange }))),
                react_1.default.createElement(CalendarPart_1.default.Footer, { right: react_1.default.createElement(button_1.Button, { type: "primary", onClick: handleOk }, "\u786E\u5B9A") }))) },
        react_1.default.createElement("div", { className: classnames_1.default("tea-timepicker", className), style: style },
            react_1.default.createElement("div", { className: "tea-timepicker__input" },
                react_1.default.createElement(input_1.Input, { ref: inputRef, maxLength: 8, disabled: disabled, placeholder: placeholder, value: inputValue, onChange: handleInputChange, onKeyDown: handleKeyDown })))));
}, {
    defaultLabelAlign: "middle",
    RangePicker: TimeRangePicker_1.TimeRangePicker,
});
//# sourceMappingURL=TimePicker.js.map