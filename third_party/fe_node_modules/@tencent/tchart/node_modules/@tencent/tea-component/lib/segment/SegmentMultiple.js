"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importDefault(require("react"));
var classnames_1 = tslib_1.__importDefault(require("classnames"));
var controlled_1 = require("../form/controlled");
var button_1 = require("../button");
function SegmentMultiple(props) {
    var _a = controlled_1.useDefaultValue(props), value = _a.value, onChange = _a.onChange, options = _a.options, style = _a.style, className = _a.className;
    var valueSet = new Set(value);
    return (react_1.default.createElement("div", { className: classnames_1.default("tea-segment", className), style: style }, options.map(function (option) { return (react_1.default.createElement(button_1.Button, { key: option.value, disabled: option.disabled, tooltip: option.tooltip, className: classnames_1.default({
            "is-selected": valueSet.has(option.value),
        }), onClick: option.disabled
            ? null
            : function (event) {
                var newValue;
                // 之前已经选中，新值排除此值
                if (valueSet.has(option.value)) {
                    newValue = options
                        .filter(function (x) { return x !== option && valueSet.has(x.value); })
                        .map(function (x) { return x.value; });
                }
                // 之前没有选中，新值包含次值
                else {
                    newValue = options
                        .filter(function (x) { return x === option || valueSet.has(x.value); })
                        .map(function (x) { return x.value; });
                }
                onChange(newValue, { event: event });
            } }, option.text || option.value)); })));
}
exports.SegmentMultiple = SegmentMultiple;
SegmentMultiple.defaultLabelAlign = "middle";
//# sourceMappingURL=SegmentMultiple.js.map