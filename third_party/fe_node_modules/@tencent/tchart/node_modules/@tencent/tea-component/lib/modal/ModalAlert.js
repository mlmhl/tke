"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var react_dom_1 = tslib_1.__importDefault(require("react-dom"));
var ModalMain_1 = require("./ModalMain");
var button_1 = require("../button");
var ModalMessage_1 = require("./ModalMessage");
var call_both_1 = require("../_util/call-both");
var i18n_1 = require("../i18n");
/**
 * API 的方式唤起一个告警对话框
 * @param options
 * @returns 异步返回布尔值，为 true 则表示用户确认，为 false 则表示用户取消
 */
function alert(options) {
    return new Promise(function (resolve) {
        var el = document.createElement("div");
        react_dom_1.default.render(react_1.default.createElement(ModalAlertAPI, tslib_1.__assign({}, options, { onButtonClick: function () { return resolve(); }, onExited: function () {
                react_dom_1.default.unmountComponentAtNode(el);
            } })), el);
    });
}
exports.alert = alert;
/**
 * API 的方式唤起一个对话框显示成功信息
 */
function success(options) {
    return alert(tslib_1.__assign({ type: "success" }, options));
}
exports.success = success;
/**
 * API 的方式唤起一个对话框显示失败信息
 */
function error(options) {
    return alert(tslib_1.__assign({ type: "error" }, options));
}
exports.error = error;
function ModalAlertAPI(_a) {
    var onButtonClick = _a.onButtonClick, modalProps = tslib_1.__rest(_a, ["onButtonClick"]);
    var _b = tslib_1.__read(react_1.useState(false), 2), visible = _b[0], setVisible = _b[1];
    // 渲染之后，马上显示
    react_1.useEffect(function () { return setVisible(true); }, []);
    var close = function () {
        setVisible(false);
        onButtonClick();
    };
    return (react_1.default.createElement(ModalAlert, tslib_1.__assign({ visible: visible, onButtonClick: close, onClose: close }, modalProps)));
}
/**
 * 提供原始的 ModalAlert 组件。
 * 推荐使用 `Modal.success()` / `Modal.error()` API 来简化用法
 */
function ModalAlert(_a) {
    var type = _a.type, message = _a.message, description = _a.description, buttonText = _a.buttonText, onButtonClick = _a.onButtonClick, buttons = _a.buttons, modalProps = tslib_1.__rest(_a, ["type", "message", "description", "buttonText", "onButtonClick", "buttons"]);
    var t = i18n_1.useTranslation();
    var okText = buttonText || t.okText;
    return (react_1.default.createElement(ModalMain_1.Modal, tslib_1.__assign({ disableCloseIcon: true }, modalProps),
        react_1.default.createElement(ModalMain_1.Modal.Body, null,
            react_1.default.createElement(ModalMessage_1.ModalMessage, { icon: type, message: message, description: description })),
        react_1.default.createElement(ModalMain_1.Modal.Footer, null,
            react_1.default.createElement(react_1.Fragment, null, (buttons || [react_1.default.createElement(button_1.Button, { type: "primary" }, okText)]).map(function (button, index) {
                return react_1.default.cloneElement(button, {
                    key: index,
                    onClick: call_both_1.callBoth(button.props.onClick, onButtonClick),
                });
            })))));
}
exports.ModalAlert = ModalAlert;
//# sourceMappingURL=ModalAlert.js.map