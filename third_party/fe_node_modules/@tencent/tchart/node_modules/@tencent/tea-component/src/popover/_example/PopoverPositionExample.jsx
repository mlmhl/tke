import React, { useState, Fragment } from "react";
import { Text } from "@tea/component/text";
import { Button } from "@tea/component/button";
import { Modal } from "@tea/component/modal";
import { Table } from "@tea/component/table";
import { Bubble } from "@tea/component/bubble";
import { scrollable } from "@tea/component/table/addons/scrollable";

const naturalNumbers = [];
for (let i = 0; i <= 100; i++) {
  naturalNumbers.push(i);
}

export default function PopoverPositionExample() {
  const [modalVisible, setModalVisible] = useState(false);

  return (
    <Fragment>
      <Button onClick={() => setModalVisible(true)}>打开信息表</Button>
      <Modal visible={modalVisible} onClose={() => setModalVisible(false)}>
        <Table
          columns={[
            { key: "number", header: "自然数", render: x => x },
            {
              key: "square",
              header: "平方",
              render: x => (
                <Bubble closeOnScroll content={`${x} * ${x} = ${x * x}`}>
                  {x * x}
                </Bubble>
              ),
            },
            {
              key: "odd",
              header: "奇偶性",
              render: x => <OddProperty x={x} />,
            },
            {
              key: "prime",
              header: "质合性",
              render: x => <PrimeProperty x={x} />,
            },
          ]}
          records={naturalNumbers}
          addons={[scrollable({ maxHeight: 400 })]}
        />
      </Modal>
    </Fragment>
  );
}

/**
 * Tooltip 是基于 Popover 来的，所以可以用 Tooltip 测试 Popover
 */
function OddProperty({ x }) {
  if (x % 2) {
    return (
      <Text tooltip={`${x} 是奇数，因为它不能被 2 整除`} overflow>
        奇数
      </Text>
    );
  }
  return (
    <Text tooltip={`${x} 是偶数，因为它能被 2 整除`} overflow>
      偶数
    </Text>
  );
}

function PrimeProperty({ x }) {
  if (isPrime(x)) {
    return (
      <Text
        tooltip={`${x} 是素数，因为它不能被除了 1 和它自身的任何自然数整除`}
        overflow
      >
        素数
      </Text>
    );
  }
  return (
    <Text
      tooltip={`${x} 是合数，因为它能被 ${getFactors(x).join(", ")} 整除`}
      overflow
    >
      合数
    </Text>
  );
}

const primeNumbers = new Set([
  2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  57,
  59,
  61,
  67,
  71,
  73,
  77,
  83,
  89,
  91,
  97,
]);

function isPrime(num) {
  return primeNumbers.has(num);
}

function getFactors(num) {
  const factors = [];
  for (let i = 2; i <= num / 2; i++) {
    if (num % i === 0) {
      factors.push(i);
      if (i * i !== num) {
        factors.push(num / i);
      }
    }
  }
  factors.sort();
  return factors;
}
