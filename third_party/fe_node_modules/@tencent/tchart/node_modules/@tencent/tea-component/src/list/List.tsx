import React from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { createRocket } from "../_util/create-rocket";
import { Tooltip } from "../tooltip";
import { DropdownBox } from "../dropdown";
import { withStatics } from "../_util/with-statics";

export interface ListItemProps extends StyledProps {
  /**
   * 是否处于激活态
   */
  current?: boolean;

  /**
   * 是否处于选中态
   */
  selected?: boolean;

  /**
   * 是否处于禁用态
   */
  disabled?: boolean;

  /**
   * 点击时回调
   */
  onClick?: (evt: React.MouseEvent) => void;

  /**
   * Tooltip 说明文本
   */
  tooltip?: React.ReactNode;

  /**
   * 菜单项
   */
  children?: React.ReactNode;
}

export function ListItem({
  children,
  className,
  style,
  current,
  disabled,
  selected,
  onClick,
  tooltip,
}: ListItemProps) {
  return (
    <Tooltip title={tooltip}>
      <li
        className={classNames(className, {
          "is-current": current,
          "is-disabled": disabled,
          "is-selected": selected,
        })}
        style={style}
        onClick={disabled ? null : onClick}
      >
        {children}
      </li>
    </Tooltip>
  );
}

export interface SubMenuProps extends StyledProps {
  /**
   * 子菜单名
   */
  label?: React.ReactNode;

  /**
   * 菜单项
   */
  children?: React.ReactNode;

  /**
   * 弹出方向
   * @default "right"
   */
  placement?: "right" | "left";
}

export function SubMenu({
  label,
  children,
  placement,
  className,
  style,
}: SubMenuProps) {
  const dropdownStyle = { position: undefined };

  if (placement === "left") {
    Object.assign(dropdownStyle, {
      left: "auto",
      right: "100%",
    });
  }

  return (
    <li className={classNames("tea-list__submenu", className)} style={style}>
      {label}
      <DropdownBox style={dropdownStyle}>{children}</DropdownBox>
    </li>
  );
}

export interface ListProps extends StyledProps {
  /**
   * 列表内容。使用 `<List.Item>` 来表示列表项
   */
  children?: React.ReactNode;

  /**
   * 列表类型
   *
   * - 可以不传，表示简单平铺的列表
   * - `bullet` 列表项以点号开头
   * - `number` 列表项以列表序号开头
   * - `option` 列表以菜单的形式渲染
   * - `option-group` 列表以分组菜单的形式渲染
   */
  type?: "bullet" | "number" | "option" | "option-group";

  /**
   * 列表项之间的分割方式
   *
   * - `divide` 表示使用分割线分割
   * - `stripe` 表示使用条纹背景色分割
   */
  split?: "divide" | "stripe";

  /**
   * 列表项滚动至底部的回调
   */
  onScrollBottom?: (event: React.UIEvent) => void;
}

export const List = withStatics(
  function List({
    className,
    style,
    children,
    type,
    split,
    onScrollBottom = () => null,
  }: ListProps) {
    function handleBodyScroll(event: React.UIEvent<HTMLElement>) {
      const list = event.target as HTMLElement;
      const { scrollHeight, scrollTop, clientHeight } = list;
      if (scrollHeight - scrollTop <= clientHeight) {
        onScrollBottom(event);
      }
    }

    const listClassName = classNames({
      "tea-list": true,
      "tea-list--bullet": type === "bullet",
      "tea-list--number": type === "number",
      "tea-list--option": type === "option" || type === "option-group",
      "tea-list--group": type === "option-group",
      "tea-list--divider": split === "divide",
      "tea-list--striped": split === "stripe",
      [className]: className,
    });

    const Parent = type === "number" ? "ol" : "ul";

    return (
      <Parent
        className={listClassName}
        style={style}
        onScroll={handleBodyScroll}
      >
        {children}
      </Parent>
    );
  },
  {
    GroupLabel: createRocket("GroupLabel", "li.tea-list__label"),
    StatusTip: createRocket("TipItem", "li.tea-list__status"),
    SubMenu,
    Item: ListItem,
  }
);
