import React from "react";
import { TableAddon } from "../TableProps";

const empty = () => ({});

/**
 * `injectable` 插件用于支持表格注入自定义 Props。
 *
 * 其中函数参数中将返回现有 `props`，用于需要属性合并的情况。
```jsx
import { injectable } from '@tea/component/table/addons/injectable';
function Example() {
  return <Table addons={[injectable({
    row: () => ({ onClick: event => console.log(event) }),
  })]} />;
}
```
 */
export interface InjectableOptions<Record = any> {
  /**
   * 设置行 Props
   */
  row?: (
    props: React.HTMLAttributes<HTMLTableRowElement>,
    context: {
      record: Record;
      rowKey: string;
      recordIndex: number;
    }
  ) => React.HTMLAttributes<HTMLTableRowElement>;

  /**
   * 设置内容 Props
   */
  body?: (
    props: React.HTMLAttributes<HTMLDivElement>
  ) => React.HTMLAttributes<HTMLDivElement>;

  /**
   * 设置表头 Props
   */
  head?: (
    props: React.HTMLAttributes<HTMLDivElement>
  ) => React.HTMLAttributes<HTMLDivElement>;

  /**
   * 设置表格 Props
   */
  table?: (
    props: React.HTMLAttributes<HTMLDivElement>
  ) => React.HTMLAttributes<HTMLDivElement>;
}

export function injectable({
  row = empty,
  body = empty,
  head = empty,
  table = empty,
}: InjectableOptions): TableAddon {
  return {
    onInjectRow: render => (record, rowKey, recordIndex, ...args) => {
      const result = render(record, rowKey, recordIndex, ...args);
      const props = row(result.row.props, {
        record,
        rowKey,
        recordIndex,
      });
      return {
        ...result,
        row: React.cloneElement(result.row, props),
      };
    },
    onInjectBody: render => (...args) => {
      const element = render(...args);
      return React.cloneElement(element, body(element.props));
    },
    onInjectHead: render => (...args) => {
      const element = render(...args);
      return React.cloneElement(element, head(element.props));
    },
    onInjectTable: render => (...args) => {
      const element = render(...args);
      return React.cloneElement(element, table(element.props));
    },
  };
}
