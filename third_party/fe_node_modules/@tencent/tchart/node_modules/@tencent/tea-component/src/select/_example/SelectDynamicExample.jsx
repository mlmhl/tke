import React, { useState, useRef } from "react";
import { Select } from "@tea/component/select";
import { StatusTip } from "@tea/component/tips";

// eslint-disable-next-line import/no-extraneous-dependencies
import debounce from "lodash.debounce";

export default function SelectDynamicExample() {
  const [status, setStatus] = useState(null);
  const [options, setOptions] = useState([]);
  const keywordRef = useRef("");

  const fetch = (inputValue = "") => {
    setStatus("loading");
    setOptions([]);
    setTimeout(() => {
      // 模拟失败
      if (Math.random() > 0.7) {
        setStatus("error");
        return;
      }
      setStatus(null);
      setOptions([
        { value: `${inputValue}1`, text: `选项一 ${inputValue}` },
        { value: `${inputValue}2`, text: `选项二 ${inputValue}` },
        { value: `${inputValue}3`, text: `选项三 ${inputValue}` },
      ]);
    }, 1500);
  };

  const debounceFetch = debounce(fetch, 600);

  return (
    <Select
      searchable
      boxSizeSync
      size="m"
      type="simulate"
      appearence="button"
      filter={() => true}
      onOpen={fetch}
      onSearch={value => {
        keywordRef.current = value;
        debounceFetch(value);
      }}
      options={options}
      onChange={value => console.log(value)}
      tips={
        status && (
          <StatusTip
            status={status}
            onRetry={() => fetch(keywordRef.current)}
          />
        )
      }
    />
  );
}
