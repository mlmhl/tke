import React from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { Icon } from "../icon";
import { Text } from "../text";

export interface TransferProps extends StyledProps {
  /**
   * 头部内容
   */
  header?: React.ReactNode;

  /**
   * 左侧 TransferCell
   * @docType React.ReactElement
   */
  leftCell: React.ReactElement;

  /**
   * 右侧 TransferCell
   * @docType React.ReactElement
   */
  rightCell: React.ReactElement;
}

export function Transfer({
  header,
  leftCell,
  rightCell,
  className,
  style,
}: TransferProps) {
  return (
    <div className={classNames("tea-transfer", className)} style={style}>
      {header && <div className="tea-transfer__header">{header}</div>}
      <div className="tea-transfer__body">
        {leftCell}
        <div className="tea-transfer__separator">
          <Icon type="transfer" />
        </div>
        {rightCell}
      </div>
    </div>
  );
}

Transfer.Cell = TransferCell;

interface TransferCellProps extends StyledProps {
  /**
   * Cell 标题
   */
  title?: React.ReactNode;

  /**
   * Cell 内容区头部内容
   */
  header?: React.ReactNode;

  /**
   * Cell 底部提示
   */
  tip?: React.ReactNode;

  /**
   * Cell 内容
   */
  children: React.ReactNode;

  /**
   * Cell 内容区是否垂直可滚动
   *
   * 需要实现内容内部滚动时（如 Table），可禁用此选项
   *
   * @default true
   */
  scrollable?: boolean;
}

function TransferCell({
  title,
  tip,
  header,
  children,
  scrollable = true,
  className,
  style,
}: TransferCellProps) {
  return (
    <div className={classNames("tea-transfer__cell", className)} style={style}>
      {typeof title !== "undefined" && (
        <div className="tea-transfer__title">
          {typeof title === "string" ? <h4>{title}</h4> : title}
        </div>
      )}
      <div className="tea-transfer__content">
        {header}
        <div
          className="tea-transfer__inner"
          style={{ overflowY: scrollable ? undefined : "hidden" }}
        >
          {children}
        </div>
      </div>
      <div className="tea-transfer__tips">
        {typeof tip === "string" ? <Text theme="weak">{tip}</Text> : tip}
      </div>
    </div>
  );
}
