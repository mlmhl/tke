import React, { useRef, useState, useEffect, useMemo } from "react";
import { AffixProps } from "./AffixProps";
import { getTarget, getRect, throttle, getFixed } from "./util";
import { addListener, removeListener } from "./AffixManager";
import { uuid } from "../_util/uuid";

export function Affix({
  offsetTop,
  offsetBottom,
  target = window,
  children,
  style,
  className,
}: AffixProps) {
  // 默认吸顶
  if (typeof offsetTop === "undefined" && typeof offsetBottom === "undefined") {
    offsetTop = 0; // eslint-disable-line no-param-reassign
  }
  const affixRef = useRef<HTMLDivElement>(null);
  const placeholderRef = useRef<HTMLDivElement>(null);
  const [affixStyle, setAffixStyle] = useState<React.CSSProperties>(undefined);
  const [placeholderStyle, setPlaceholderStyle] = useState<React.CSSProperties>(
    undefined
  );

  const update = useMemo(
    () =>
      throttle(() => {
        const placeholder = placeholderRef.current;
        const placeholderRect = getRect(placeholder);
        const sizeStyle = {
          width: placeholderRect.width,
          height: placeholderRect.height,
        };

        setPlaceholderStyle(sizeStyle);

        if (typeof offsetTop !== "undefined") {
          const top = getFixed(target, placeholder, offsetTop);
          setAffixStyle(
            typeof top !== "undefined"
              ? Object.assign({ position: "fixed", top }, sizeStyle)
              : undefined
          );
        } else {
          const bottom = getFixed(target, placeholder, offsetBottom, false);
          setAffixStyle(
            typeof bottom !== "undefined"
              ? Object.assign({ position: "fixed", bottom }, sizeStyle)
              : undefined
          );
        }
      }),
    [offsetBottom, offsetTop, target]
  );

  useEffect(() => {
    update();
    const id = uuid();
    const targetElement = getTarget(target);
    addListener(targetElement, id, update);
    return () => removeListener(targetElement, id);
  }, [offsetBottom, offsetTop, target, update]);

  return (
    <div ref={placeholderRef}>
      {affixStyle && <div style={placeholderStyle} />}
      <div
        ref={affixRef}
        className={className}
        style={{ ...(affixStyle || {}), ...(style || {}) }}
      >
        {children}
      </div>
    </div>
  );
}
