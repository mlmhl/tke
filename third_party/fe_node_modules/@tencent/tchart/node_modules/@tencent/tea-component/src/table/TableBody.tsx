import React, { forwardRef } from "react";
import classNames from "classnames";
import { Text } from "../text";
import { TableBox } from "./TableBox";
import { TableProps } from "./TableProps";
import { getRowKeyfromRecordKey } from "./util/get-row-key-from-record-key";
import { useMiddleware } from "./util/use-middleware";
import { SlideTransition } from "../transition";

// 表格组件核心实现
export const TableBody = forwardRef(function TableBody(
  {
    columns,
    records,
    addons,
    recordKey,
    rowClassName,
    rowDisabled,
    topTip,
    bottomTip,
    boxStyle,
    disableHoverHighlight,
    onScrollCapture = () => null,
  }: TableProps & {
    boxStyle?: React.CSSProperties;
    onScrollCapture?: (event: React.UIEvent<HTMLDivElement>) => void;
  },
  ref: React.Ref<HTMLDivElement>
) {
  // 键值的获取方式
  const getRowKey = getRowKeyfromRecordKey(recordKey);

  // 列渲染：(record, column) => { props, children }
  const renderColumn = useMiddleware(addons, "onInjectColumn")(
    (record, rowKey, recordIndex, column) => {
      let children = null;
      if (isFunction(column.render)) {
        children = column.render(record, rowKey, recordIndex, column);
      } else if (typeof record === "object" && record) {
        children = record[column.key];
      }
      if (typeof children === "undefined") {
        // never render undefined
        children = null;
      }
      if (typeof children !== "object") {
        children = <Text overflow>{children}</Text>;
      }
      return {
        props: {},
        children,
      };
    }
  );

  // 行渲染：(columns, record) => { prepends, row, appends }
  const renderRow = useMiddleware(addons, "onInjectRow")(
    (record, rowKey, recordIndex, columns) => {
      const className = classNames(
        isFunction(rowClassName) ? rowClassName(record) : null,
        isFunction(rowDisabled) ? { "is-disabled": rowDisabled(record) } : null,
        { "no-hover": !!disableHoverHighlight }
      );
      return {
        prepends: [],
        row: (
          <tr key={rowKey} className={className || null}>
            {columns.map(column => {
              const { props, children } = renderColumn(
                record,
                rowKey,
                recordIndex,
                column
              );
              return (
                <Text
                  key={column.key}
                  parent="td"
                  {...props}
                  align={column.align}
                >
                  <div>{children}</div>
                </Text>
              );
            })}
          </tr>
        ),
        appends: [],
      };
    }
  );

  // 记录渲染：(record) => <tr>[]
  const renderRecord = (record: any, recordIndex: number) => {
    // 生成 rowKey
    const rowKey = getRowKey(record, recordIndex);
    const { prepends, row, appends } = renderRow(
      record,
      rowKey,
      recordIndex,
      columns
    );
    return [...prepends, row, ...appends].filter(Boolean);
  };

  const renderBody = useMiddleware(addons, "onInjectBody")(
    (records, columns, topTip, bottomTip) => (
      <div
        className="tea-table__body"
        ref={ref}
        onScrollCapture={onScrollCapture}
      >
        <TableBox columns={columns} style={boxStyle}>
          <tbody>
            <SlideTransition in={Boolean(topTip)} exit={false}>
              <tr className="tea-table__tr--blank-new">
                <td colSpan={columns.length}>{topTip}</td>
              </tr>
            </SlideTransition>
            {(records || []).map(renderRecord)}
            <SlideTransition in={Boolean(bottomTip)} exit={false}>
              <tr className="tea-table__tr--blank-new">
                <td colSpan={columns.length}>{bottomTip}</td>
              </tr>
            </SlideTransition>
          </tbody>
        </TableBox>
      </div>
    )
  );

  return renderBody(records, columns, topTip, bottomTip);
});

function isFunction(target: any): target is Function {
  return typeof target === "function";
}
