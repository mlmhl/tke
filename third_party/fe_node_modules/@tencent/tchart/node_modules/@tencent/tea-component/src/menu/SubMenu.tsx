import React from "react";
import classNames from "classnames";
import { StyledProps } from "../_type";
import { Icon } from "../icon";
import { useDefault } from "../_util/use-default";

export interface SubMenuProps extends StyledProps {
  /**
   * 标题
   */
  title?: React.ReactNode;

  /**
   * 菜单折叠后标题处显示的图标 URL
   *
   * **传递一组 URL 时，第一个 URL 会作为未激活态图标，第二个 URL 会作为激活态图标**
   */
  icon?: string | [string, string];

  /**
   * 菜单内容（Menu.Item）
   */
  children?: React.ReactNode;

  /**
   * 是否默认展开
   *
   * @default false
   */
  defaultOpened?: boolean;

  /**
   * 是否展示
   */
  opened?: boolean;

  /**
   * 展开状态变化时回调
   */
  onOpenedChange?: (opened: boolean) => void;
}

export function SubMenu({
  title,
  icon,
  children,
  defaultOpened = false,
  opened,
  onOpenedChange,
  className,
  style,
}: SubMenuProps) {
  // eslint-disable-next-line no-param-reassign
  [opened, onOpenedChange] = useDefault(opened, defaultOpened, onOpenedChange);

  let defaultIcon;
  let activeIcon;

  if (typeof icon === "string") {
    defaultIcon = icon;
    activeIcon = icon;
  }

  if (Array.isArray(icon)) {
    [defaultIcon, activeIcon] = icon;
  }

  return (
    <li
      className={classNames("tea-menu__submenu", className, {
        "is-selected": opened,
      })}
      style={style}
    >
      <a
        href="javascript:;"
        className="tea-menu__item"
        onClick={() => onOpenedChange(!opened)}
      >
        {defaultIcon && (
          <img className="tea-menu__list-icon" src={defaultIcon} alt="icon" />
        )}
        {activeIcon && (
          <img
            className="tea-menu__list-icon is-selected"
            src={activeIcon}
            alt="icon"
          />
        )}
        <div className="tea-menu__text">{title}</div>
        <Icon type="arrowdown" />
      </a>
      <ul className="tea-menu__list">{children}</ul>
    </li>
  );
}
