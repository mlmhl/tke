/* eslint-disable @typescript-eslint/camelcase */
import { useEffect, useState } from "react";
import { zh_cn } from "./locale/zh_cn";
import { en_us } from "./locale/en_us";
import { ja } from "./locale/ja";
import { ko } from "./locale/ko";

type Locale = typeof zh_cn;
export interface Translation extends Locale {}

// 约定中语言名不规范
const lngs = {
  zh: "zh_cn",
  en: "en_us",
  jp: "ja",
};

/* eslint-disable @typescript-eslint/no-object-literal-type-assertion */
const translationMap = {
  zh_cn: zh_cn as Translation,
  zh: zh_cn as Translation,
  en_us: { ...zh_cn, ...en_us } as Translation,
  en: { ...zh_cn, ...en_us } as Translation,
  ja: { ...zh_cn, ...en_us, ...ja } as Translation,
  jp: { ...zh_cn, ...en_us, ...ja } as Translation,
  ko: { ...zh_cn, ...en_us, ...ko } as Translation,
};
/* eslint-enable @typescript-eslint/no-object-literal-type-assertion */

let currentTranslation = zh_cn;

export function setLocale(
  locale: keyof typeof translationMap,
  moment?: typeof import("moment")
) {
  if (moment) {
    moment.locale(lngs[locale] || locale);
  }
  currentTranslation = translationMap[locale];
}

export function useTranslation(moment?: typeof import("moment")): Translation {
  const t = currentTranslation || zh_cn;
  const locale = lngs[t.locale] || t.locale;

  useState(() => {
    if (moment) {
      moment.locale(locale);
    }
  });
  useEffect(() => {
    if (moment) {
      moment.locale(locale);
    }
  }, [locale]); // eslint-disable-line react-hooks/exhaustive-deps

  return t;
}
export function getTranslation(): Translation {
  return currentTranslation || zh_cn;
}

export interface TranslationProps {
  t?: Translation;
}
/* eslint-enable @typescript-eslint/camelcase */
