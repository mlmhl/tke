import React, { forwardRef, useRef, useImperativeHandle } from "react";
import classNames from "classnames";
import { InputProps, Input } from "../input";
import { Button } from "../button";
import { useDefaultValue } from "../form/controlled";
import { ScaleTransition } from "../transition";

export interface SearchBoxProps extends InputProps {
  /**
   * 是否为多行搜索模式
   *
   * @default false
   */
  multiline?: boolean;

  /**
   * 是否为简洁模式
   *
   * @default false
   */
  simple?: boolean;

  /**
   * 点击搜索或输入回车时回调
   * 如果自行绑定了 onKeydown 处理方法，则该回调不再提供
   */
  onSearch?: (keyword?: string) => void;

  /**
   * 用户清空搜索时回调
   * */
  onClear?: () => void;
}

const noop = () => {};

export const SearchBox = forwardRef(function SearchBox(
  props: SearchBoxProps,
  ref: React.Ref<HTMLInputElement | HTMLTextAreaElement>
) {
  const {
    multiline,
    simple,
    onSearch = noop,
    onClear = noop,
    className,
    style,
    size,
    ..._inputProps
  } = props;

  const inputBoxClassNames = classNames({
    "tea-search": true,
    "tea-search--multi": multiline,
    "tea-search--simple": simple,
    [className]: className,
  });

  const inputProps = useDefaultValue(_inputProps, "");

  // 需要使用到 inputRef，同时向外部暴露
  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);
  useImperativeHandle(ref, () => inputRef.current);

  return (
    <div
      className={classNames("tea-form--search", {
        [`size-${size === "full" ? `${size}-width` : size}`]: size,
      })}
    >
      <div className={inputBoxClassNames} style={style}>
        <div className="tea-search__inner">
          <Input
            type="search"
            multiline={multiline}
            baseClassName="tea-input"
            className="tea-input--search"
            onKeyDown={event => {
              const { keyCode, ctrlKey, metaKey } = event;
              if (keyCode === 27) {
                event.preventDefault();
                inputProps.onChange("", { event });
                onClear();
              }
              // 回车处理 onSearch 逻辑
              if (keyCode !== 13) {
                return;
              }
              // 多行模式下，要按下 ctrl 或者 command
              if (multiline && !metaKey && !ctrlKey) {
                return;
              }
              event.preventDefault();
              onSearch(inputProps.value);
            }}
            {...inputProps}
            ref={inputRef}
          />
        </div>
        <ScaleTransition in={/\S/.test(inputProps.value)}>
          <Button
            icon="dismiss"
            className="tea-btn--dismiss"
            onClick={event => {
              event.preventDefault();
              inputProps.onChange("", { event });
              onClear();
              if (inputRef.current) {
                inputRef.current.focus();
              }
            }}
          />
        </ScaleTransition>
        <Button
          icon="search"
          className="tea-btn--search"
          onClick={event => {
            event.preventDefault();
            onSearch(inputProps.value);
          }}
        />
      </div>
    </div>
  );
});
