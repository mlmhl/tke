import React, { Fragment, ReactNode, useState } from "react";
import { Combine, StyledProps } from "../_type";
import { DropdownProps, Dropdown, CommonDropdownProps } from "../dropdown";
import { List } from "../list";
import { Checkbox } from "../checkbox";
import { useDefaultValue, ControlledProps, ChangeContext } from "../form";
import { SelectOption } from "./SelectOption";
import { CheckTree } from "../checktree";
import { Button } from "../button";
import { useTranslation } from "../i18n";
import { withStatics } from "../_util/with-statics";

export interface SelectMultipleProps
  extends Combine<CommonDropdownProps, StyledProps, ControlledProps<string[]>> {
  /**
   * 是否暂存操作结果
   *
   * - 设置为 `true`，则会提供确定和取消按钮，确定后才会触发 onChange
   * - 设置为 `false`，则不渲染确定和取消按钮，修改后直接触发 onChange
   *
   * @default true
   */
  staging?: boolean;

  /**
   * 占位符
   * @default "请选择"（已处理国际化）
   */
  placeholder?: string;

  /**
   * 下拉选框的外观
   *
   * - `default` 无边框，适用于页面标题和表格内
   * - `button` 为按钮风格，有边框，多用于操作栏中
   * - `link` 为超链接风格
   * - `filter` 为过滤组件风格，多用于表头筛选
   * - `pure` 无额外样式
   *
   * 原有 `raw` 类型建议使用 `pure` 进行改造
   *
   * @default "default"
   */
  appearence?: DropdownProps["appearence"];

  /**
   * 下拉框大小
   */
  size?: DropdownProps["size"];

  /**
   * 是否禁用
   * @default false
   */
  disabled?: boolean;

  /**
   * 按钮显示内容，默认会显示当前选中的选项
   */
  button?: DropdownProps["button"];

  /**
   * 选项列表
   */
  options?: SelectOption[];

  /**
   * 表示全选的选项
   */
  allOption?: SelectOption | false;

  /**
   * 如果开启了全选支持，则可以指定哪些记录从全选的范围内排除
   *
   * - 默认为 'disabled' 可以排除禁用的记录
   * - 提供回调则自定义哪些记录应该排除，对于应该排除的记录，应该返回 `true`
   *
   * @default "disabled"
   */
  shouldOptionExcludeFromAll?: "disabled" | ((option: SelectOption) => boolean);

  /**
   * 允许不选择项
   *
   * @default true
   */
  allowEmpty?: boolean;

  /**
   * 内容
   */
  children?: ReactNode;

  /**
   * 弹出区域自定义类名
   */
  boxClassName?: DropdownProps["boxClassName"];

  /**
   * 弹出区域自定义样式
   */
  boxStyle?: DropdownProps["boxStyle"];
}

export const SelectMultiple = withStatics(
  function SelectMultiple(props: SelectMultipleProps) {
    const {
      staging,
      value,
      onChange,
      options = [],
      allOption,
      shouldOptionExcludeFromAll = "disabled",
      allowEmpty = true,
      ...dropdownProps
    } = useDefaultValue(props, []);

    const t = useTranslation();

    const [stagingValue, setStagingValue] = useState<string[]>(value);

    const handleChange = (value: string[], context: ChangeContext) => {
      if (staging === false) {
        onChange(value, context);
        return;
      }
      setStagingValue(value);
    };

    // 「全部」选项和其余选项是数关系
    const releations = {};
    if (allOption) {
      for (const option of options) {
        if (
          // 用户可以指定哪些选项从全选逻辑中排除
          (typeof shouldOptionExcludeFromAll === "function" &&
            shouldOptionExcludeFromAll(option)) ||
          (shouldOptionExcludeFromAll === "disabled" && option.disabled)
        ) {
          // continue
        } else {
          releations[option.value] = allOption.value;
        }
      }
    }

    return (
      <Dropdown
        updateOnChildrenChange
        button={<ValueBrief {...props} value={value} />}
        clickClose={false}
        {...dropdownProps}
      >
        {close => (
          <CheckTree
            relations={releations}
            value={stagingValue || value}
            onChange={handleChange}
            disabledNames={options.filter(x => x.disabled).map(x => x.value)}
          >
            <List type="option" className="tea-list--checkoption">
              {allOption && renderSelectOption(allOption)}
              {options.map(option => renderSelectOption(option))}
            </List>
            {staging !== false && (
              <Dropdown.Footer>
                <Button
                  type="primary"
                  disabled={!allowEmpty && stagingValue.length === 0}
                  onClick={event => {
                    onChange(stagingValue, { event });
                    close();
                  }}
                >
                  {t.okText}
                </Button>
                <Button type="weak" onClick={close}>
                  {t.cancelText}
                </Button>
              </Dropdown.Footer>
            )}
          </CheckTree>
        )}
      </Dropdown>
    );
  },
  {
    defaultLabelAlign: "middle",
  }
);

function renderSelectOption(option: SelectOption): JSX.Element {
  return (
    <List.Item
      key={option.value}
      tooltip={option.tooltip}
      disabled={option.disabled}
    >
      <Checkbox onClick={evt => evt.stopPropagation()} name={option.value}>
        {option.text}
      </Checkbox>
    </List.Item>
  );
}

function ValueBrief({
  value,
  allOption,
  options,
  button,
  placeholder,
}: SelectMultipleProps): JSX.Element {
  const t = useTranslation();

  if (button) {
    return <Fragment>{button}</Fragment>;
  }
  if (!value || !value.length) {
    return <Fragment>{placeholder || t.pleaseSelect}</Fragment>;
  }
  if (allOption && value.length === options.length) {
    return <Fragment>{allOption.text || allOption.value}</Fragment>;
  }

  const showupOption = value
    .slice(0, 5)
    .map(x => options.find(y => y.value === x));
  const showupExcceed = showupOption.length < value.length;

  return (
    <Fragment>
      {showupOption
        .filter(x => x)
        .map((option, index) => (
          <Fragment key={option.value}>
            {option.text || option.value}
            {index < showupOption.length - 1 && ", "}
          </Fragment>
        ))}
      {showupExcceed && "..."}
    </Fragment>
  );
}
