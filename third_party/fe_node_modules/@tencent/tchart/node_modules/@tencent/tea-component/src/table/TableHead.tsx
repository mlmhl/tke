import React, { forwardRef } from "react";
import { Text } from "../text";
import { TableBox } from "./TableBox";
import { TableProps } from "./TableProps";
import { useMiddleware } from "./util/use-middleware";
import { isCallable } from "../_util/is-callable";

export const TableHead = forwardRef(function TableHead(
  props: TableProps & {
    boxStyle?: React.CSSProperties;
  },
  ref: React.Ref<HTMLDivElement>
) {
  const { columns, addons, boxStyle } = props;

  const renderColumn = useMiddleware(addons, "onInjectColumn")(
    (record, rowKey, recordIndex, column) => {
      const { key, header } = column;
      let children: React.ReactNode = header;

      // pass a render function
      if (isCallable(header)) {
        children = header(column);
      }

      // forgot to pass, use a key as a reminder
      if (header === undefined) {
        children = key;
      }

      // plain values
      if (typeof header === "string" || typeof header === "number") {
        children = <Text overflow>{header}</Text>;
      }
      return {
        props: {},
        children,
      };
    }
  );

  const tableHeaders = columns.map(column => {
    const { props, children } = renderColumn(null, null, -1, column);
    return (
      <Text key={column.key} parent="th" {...props} align={column.align}>
        <div>{children}</div>
      </Text>
    );
  });

  return useMiddleware(addons, "onInjectHead")(props => (
    <div className="tea-table__header" ref={ref}>
      <TableBox columns={columns} style={boxStyle}>
        <thead>
          <tr>{tableHeaders}</tr>
        </thead>
      </TableBox>
    </div>
  ))(props);
});
