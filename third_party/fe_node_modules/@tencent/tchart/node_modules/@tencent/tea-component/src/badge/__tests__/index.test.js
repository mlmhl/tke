/* eslint-disable no-undef */
import React, { Component } from "react";
import { mount, render } from "enzyme";
import { Badge } from "../Badge";

describe("Badge", () => {
  it("render correctly", () => {
    const wrapper = render(<Badge>徽章</Badge>);
    expect(wrapper).toMatchSnapshot();
  });

  it("set props correctly", () => {
    // const themes = ["success", "warning", "default", "danger"];
    let wrapper = mount(<Badge />);
    expect(wrapper.props().theme).toBeUndefined();

    wrapper = mount(<Badge theme="success" dark />);
    expect(wrapper.find(".is-success-dark")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("success");

    wrapper = mount(<Badge theme="warning" dark />);
    expect(wrapper.find(".is-warning-dark")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("warning");

    wrapper = mount(<Badge theme="default" dark />);
    expect(wrapper.find(".is-blue-dark")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("default");

    wrapper = mount(<Badge theme="danger" dark />);
    expect(wrapper.find(".is-error-dark")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("danger");

    wrapper = mount(<Badge theme="success" />);
    expect(wrapper.find(".is-success")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("success");

    wrapper = mount(<Badge theme="warning" />);
    expect(wrapper.find(".is-warning")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("warning");

    wrapper = mount(<Badge theme="default" />);
    expect(wrapper.find(".is-blue")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("default");

    wrapper = mount(<Badge theme="danger" />);
    expect(wrapper.find(".is-error")).toHaveLength(1);
    expect(wrapper.props().theme).toBe("danger");
  });
});
